
lab5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004760  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08004870  08004870  00014870  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080048dc  080048dc  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  080048dc  080048dc  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  080048dc  080048dc  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080048dc  080048dc  000148dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080048e0  080048e0  000148e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080048e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000168  20000074  08004958  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001dc  08004958  000201dc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d720  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002418  00000000  00000000  0002d7bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e50  00000000  00000000  0002fbd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d30  00000000  00000000  00030a28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000191cc  00000000  00000000  00031758  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010b85  00000000  00000000  0004a924  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008e0b9  00000000  00000000  0005b4a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e9562  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003f54  00000000  00000000  000e95b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000074 	.word	0x20000074
 800012c:	00000000 	.word	0x00000000
 8000130:	08004858 	.word	0x08004858

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000078 	.word	0x20000078
 800014c:	08004858 	.word	0x08004858

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__aeabi_d2iz>:
 80008ec:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008f0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80008f4:	d215      	bcs.n	8000922 <__aeabi_d2iz+0x36>
 80008f6:	d511      	bpl.n	800091c <__aeabi_d2iz+0x30>
 80008f8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80008fc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000900:	d912      	bls.n	8000928 <__aeabi_d2iz+0x3c>
 8000902:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000906:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800090a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800090e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000912:	fa23 f002 	lsr.w	r0, r3, r2
 8000916:	bf18      	it	ne
 8000918:	4240      	negne	r0, r0
 800091a:	4770      	bx	lr
 800091c:	f04f 0000 	mov.w	r0, #0
 8000920:	4770      	bx	lr
 8000922:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000926:	d105      	bne.n	8000934 <__aeabi_d2iz+0x48>
 8000928:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 800092c:	bf08      	it	eq
 800092e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000932:	4770      	bx	lr
 8000934:	f04f 0000 	mov.w	r0, #0
 8000938:	4770      	bx	lr
 800093a:	bf00      	nop

0800093c <command_parser_fsm>:
 */


#include "command_parser_fsm.h"

void command_parser_fsm() {
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0
	switch(command_parser_status) {
 8000940:	4b1d      	ldr	r3, [pc, #116]	; (80009b8 <command_parser_fsm+0x7c>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	2b00      	cmp	r3, #0
 8000946:	d002      	beq.n	800094e <command_parser_fsm+0x12>
 8000948:	2b01      	cmp	r3, #1
 800094a:	d00b      	beq.n	8000964 <command_parser_fsm+0x28>
				index_command = 27;
			break;
		}
		break;
	default:
		break;
 800094c:	e030      	b.n	80009b0 <command_parser_fsm+0x74>
		if(temp == '!') {
 800094e:	4b1b      	ldr	r3, [pc, #108]	; (80009bc <command_parser_fsm+0x80>)
 8000950:	781b      	ldrb	r3, [r3, #0]
 8000952:	2b21      	cmp	r3, #33	; 0x21
 8000954:	d12b      	bne.n	80009ae <command_parser_fsm+0x72>
			command_parser_status = WAIT_COMMAND_END;
 8000956:	4b18      	ldr	r3, [pc, #96]	; (80009b8 <command_parser_fsm+0x7c>)
 8000958:	2201      	movs	r2, #1
 800095a:	601a      	str	r2, [r3, #0]
			index_command = 27;
 800095c:	4b18      	ldr	r3, [pc, #96]	; (80009c0 <command_parser_fsm+0x84>)
 800095e:	221b      	movs	r2, #27
 8000960:	701a      	strb	r2, [r3, #0]
		break;
 8000962:	e024      	b.n	80009ae <command_parser_fsm+0x72>
		switch(temp) {
 8000964:	4b15      	ldr	r3, [pc, #84]	; (80009bc <command_parser_fsm+0x80>)
 8000966:	781b      	ldrb	r3, [r3, #0]
 8000968:	2b21      	cmp	r3, #33	; 0x21
 800096a:	d008      	beq.n	800097e <command_parser_fsm+0x42>
 800096c:	2b23      	cmp	r3, #35	; 0x23
 800096e:	d10a      	bne.n	8000986 <command_parser_fsm+0x4a>
			command_parser_status = INIT_COMMAND;
 8000970:	4b11      	ldr	r3, [pc, #68]	; (80009b8 <command_parser_fsm+0x7c>)
 8000972:	2200      	movs	r2, #0
 8000974:	601a      	str	r2, [r3, #0]
			command_flag = 1;
 8000976:	4b13      	ldr	r3, [pc, #76]	; (80009c4 <command_parser_fsm+0x88>)
 8000978:	2201      	movs	r2, #1
 800097a:	701a      	strb	r2, [r3, #0]
			break;
 800097c:	e016      	b.n	80009ac <command_parser_fsm+0x70>
			index_command = 27;
 800097e:	4b10      	ldr	r3, [pc, #64]	; (80009c0 <command_parser_fsm+0x84>)
 8000980:	221b      	movs	r2, #27
 8000982:	701a      	strb	r2, [r3, #0]
			break;
 8000984:	e012      	b.n	80009ac <command_parser_fsm+0x70>
			buffer[index_command++] = temp;
 8000986:	4b0e      	ldr	r3, [pc, #56]	; (80009c0 <command_parser_fsm+0x84>)
 8000988:	781b      	ldrb	r3, [r3, #0]
 800098a:	1c5a      	adds	r2, r3, #1
 800098c:	b2d1      	uxtb	r1, r2
 800098e:	4a0c      	ldr	r2, [pc, #48]	; (80009c0 <command_parser_fsm+0x84>)
 8000990:	7011      	strb	r1, [r2, #0]
 8000992:	461a      	mov	r2, r3
 8000994:	4b09      	ldr	r3, [pc, #36]	; (80009bc <command_parser_fsm+0x80>)
 8000996:	7819      	ldrb	r1, [r3, #0]
 8000998:	4b0b      	ldr	r3, [pc, #44]	; (80009c8 <command_parser_fsm+0x8c>)
 800099a:	5499      	strb	r1, [r3, r2]
			if(index_command == MAX_BUFFER_SIZE)
 800099c:	4b08      	ldr	r3, [pc, #32]	; (80009c0 <command_parser_fsm+0x84>)
 800099e:	781b      	ldrb	r3, [r3, #0]
 80009a0:	2b1e      	cmp	r3, #30
 80009a2:	d102      	bne.n	80009aa <command_parser_fsm+0x6e>
				index_command = 27;
 80009a4:	4b06      	ldr	r3, [pc, #24]	; (80009c0 <command_parser_fsm+0x84>)
 80009a6:	221b      	movs	r2, #27
 80009a8:	701a      	strb	r2, [r3, #0]
			break;
 80009aa:	bf00      	nop
		break;
 80009ac:	e000      	b.n	80009b0 <command_parser_fsm+0x74>
		break;
 80009ae:	bf00      	nop
	}
}
 80009b0:	bf00      	nop
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bc80      	pop	{r7}
 80009b6:	4770      	bx	lr
 80009b8:	20000090 	.word	0x20000090
 80009bc:	20000094 	.word	0x20000094
 80009c0:	200000b8 	.word	0x200000b8
 80009c4:	200000b9 	.word	0x200000b9
 80009c8:	20000098 	.word	0x20000098

080009cc <HAL_UART_RxCpltCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef * huart) {
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b082      	sub	sp, #8
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART2){
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	4a13      	ldr	r2, [pc, #76]	; (8000a28 <HAL_UART_RxCpltCallback+0x5c>)
 80009da:	4293      	cmp	r3, r2
 80009dc:	d11f      	bne.n	8000a1e <HAL_UART_RxCpltCallback+0x52>
		buffer[index_buffer++] = temp;
 80009de:	4b13      	ldr	r3, [pc, #76]	; (8000a2c <HAL_UART_RxCpltCallback+0x60>)
 80009e0:	781b      	ldrb	r3, [r3, #0]
 80009e2:	1c5a      	adds	r2, r3, #1
 80009e4:	b2d1      	uxtb	r1, r2
 80009e6:	4a11      	ldr	r2, [pc, #68]	; (8000a2c <HAL_UART_RxCpltCallback+0x60>)
 80009e8:	7011      	strb	r1, [r2, #0]
 80009ea:	461a      	mov	r2, r3
 80009ec:	4b10      	ldr	r3, [pc, #64]	; (8000a30 <HAL_UART_RxCpltCallback+0x64>)
 80009ee:	7819      	ldrb	r1, [r3, #0]
 80009f0:	4b10      	ldr	r3, [pc, #64]	; (8000a34 <HAL_UART_RxCpltCallback+0x68>)
 80009f2:	5499      	strb	r1, [r3, r2]
		if(index_buffer == MAX_BUFFER_SIZE - 3) index_buffer = 0;
 80009f4:	4b0d      	ldr	r3, [pc, #52]	; (8000a2c <HAL_UART_RxCpltCallback+0x60>)
 80009f6:	781b      	ldrb	r3, [r3, #0]
 80009f8:	2b1b      	cmp	r3, #27
 80009fa:	d102      	bne.n	8000a02 <HAL_UART_RxCpltCallback+0x36>
 80009fc:	4b0b      	ldr	r3, [pc, #44]	; (8000a2c <HAL_UART_RxCpltCallback+0x60>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	701a      	strb	r2, [r3, #0]
		buffer_flag = 1;
 8000a02:	4b0d      	ldr	r3, [pc, #52]	; (8000a38 <HAL_UART_RxCpltCallback+0x6c>)
 8000a04:	2201      	movs	r2, #1
 8000a06:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&huart2, &temp, 1, 50);
 8000a08:	2332      	movs	r3, #50	; 0x32
 8000a0a:	2201      	movs	r2, #1
 8000a0c:	4908      	ldr	r1, [pc, #32]	; (8000a30 <HAL_UART_RxCpltCallback+0x64>)
 8000a0e:	480b      	ldr	r0, [pc, #44]	; (8000a3c <HAL_UART_RxCpltCallback+0x70>)
 8000a10:	f002 fd8b 	bl	800352a <HAL_UART_Transmit>
		HAL_UART_Receive_IT(&huart2, &temp, 1);
 8000a14:	2201      	movs	r2, #1
 8000a16:	4906      	ldr	r1, [pc, #24]	; (8000a30 <HAL_UART_RxCpltCallback+0x64>)
 8000a18:	4808      	ldr	r0, [pc, #32]	; (8000a3c <HAL_UART_RxCpltCallback+0x70>)
 8000a1a:	f002 fe18 	bl	800364e <HAL_UART_Receive_IT>
	}
}
 8000a1e:	bf00      	nop
 8000a20:	3708      	adds	r7, #8
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	40004400 	.word	0x40004400
 8000a2c:	200000b6 	.word	0x200000b6
 8000a30:	20000094 	.word	0x20000094
 8000a34:	20000098 	.word	0x20000098
 8000a38:	200000b7 	.word	0x200000b7
 8000a3c:	2000016c 	.word	0x2000016c

08000a40 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a44:	f000 fc72 	bl	800132c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a48:	f000 f83a 	bl	8000ac0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a4c:	f000 f97e 	bl	8000d4c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000a50:	f000 f952 	bl	8000cf8 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000a54:	f000 f884 	bl	8000b60 <MX_ADC1_Init>
  MX_TIM2_Init();
 8000a58:	f000 f8c2 	bl	8000be0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000a5c:	4812      	ldr	r0, [pc, #72]	; (8000aa8 <main+0x68>)
 8000a5e:	f002 f983 	bl	8002d68 <HAL_TIM_Base_Start_IT>
  HAL_UART_Receive_IT (&huart2 , &temp , 1) ;
 8000a62:	2201      	movs	r2, #1
 8000a64:	4911      	ldr	r1, [pc, #68]	; (8000aac <main+0x6c>)
 8000a66:	4812      	ldr	r0, [pc, #72]	; (8000ab0 <main+0x70>)
 8000a68:	f002 fdf1 	bl	800364e <HAL_UART_Receive_IT>
  //Timer for blinky led
  setTimer1(1000);
 8000a6c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a70:	f000 f9de 	bl	8000e30 <setTimer1>
  //Clear timer2 before run
  clearTimer2();
 8000a74:	f000 fa10 	bl	8000e98 <clearTimer2>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //Blinky led every 1s
	  if(timer1_flag == 1){
 8000a78:	4b0e      	ldr	r3, [pc, #56]	; (8000ab4 <main+0x74>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	2b01      	cmp	r3, #1
 8000a7e:	d107      	bne.n	8000a90 <main+0x50>
		  HAL_GPIO_TogglePin(LED_RED_GPIO_Port , LED_RED_Pin);
 8000a80:	2120      	movs	r1, #32
 8000a82:	480d      	ldr	r0, [pc, #52]	; (8000ab8 <main+0x78>)
 8000a84:	f001 fc36 	bl	80022f4 <HAL_GPIO_TogglePin>
		  setTimer1(1000) ;
 8000a88:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a8c:	f000 f9d0 	bl	8000e30 <setTimer1>
	  }

	  //If received byte , execute command_parser_fsm function
	  if (buffer_flag == 1) {
 8000a90:	4b0a      	ldr	r3, [pc, #40]	; (8000abc <main+0x7c>)
 8000a92:	781b      	ldrb	r3, [r3, #0]
 8000a94:	2b01      	cmp	r3, #1
 8000a96:	d104      	bne.n	8000aa2 <main+0x62>
		  command_parser_fsm();
 8000a98:	f7ff ff50 	bl	800093c <command_parser_fsm>
		  buffer_flag = 0;
 8000a9c:	4b07      	ldr	r3, [pc, #28]	; (8000abc <main+0x7c>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	701a      	strb	r2, [r3, #0]
	  }

	  //Always execute uart_communication_fsm
	  uart_communication_fsm();
 8000aa2:	f000 fb95 	bl	80011d0 <uart_communication_fsm>
	  if(timer1_flag == 1){
 8000aa6:	e7e7      	b.n	8000a78 <main+0x38>
 8000aa8:	20000124 	.word	0x20000124
 8000aac:	20000094 	.word	0x20000094
 8000ab0:	2000016c 	.word	0x2000016c
 8000ab4:	200001b8 	.word	0x200001b8
 8000ab8:	40010800 	.word	0x40010800
 8000abc:	200000b7 	.word	0x200000b7

08000ac0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b094      	sub	sp, #80	; 0x50
 8000ac4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ac6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000aca:	2228      	movs	r2, #40	; 0x28
 8000acc:	2100      	movs	r1, #0
 8000ace:	4618      	mov	r0, r3
 8000ad0:	f003 fa40 	bl	8003f54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ad4:	f107 0314 	add.w	r3, r7, #20
 8000ad8:	2200      	movs	r2, #0
 8000ada:	601a      	str	r2, [r3, #0]
 8000adc:	605a      	str	r2, [r3, #4]
 8000ade:	609a      	str	r2, [r3, #8]
 8000ae0:	60da      	str	r2, [r3, #12]
 8000ae2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ae4:	1d3b      	adds	r3, r7, #4
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	601a      	str	r2, [r3, #0]
 8000aea:	605a      	str	r2, [r3, #4]
 8000aec:	609a      	str	r2, [r3, #8]
 8000aee:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000af0:	2302      	movs	r3, #2
 8000af2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000af4:	2301      	movs	r3, #1
 8000af6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000af8:	2310      	movs	r3, #16
 8000afa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000afc:	2300      	movs	r3, #0
 8000afe:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b00:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b04:	4618      	mov	r0, r3
 8000b06:	f001 fc0f 	bl	8002328 <HAL_RCC_OscConfig>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d001      	beq.n	8000b14 <SystemClock_Config+0x54>
  {
    Error_Handler();
 8000b10:	f000 f988 	bl	8000e24 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b14:	230f      	movs	r3, #15
 8000b16:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b20:	2300      	movs	r3, #0
 8000b22:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b24:	2300      	movs	r3, #0
 8000b26:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000b28:	f107 0314 	add.w	r3, r7, #20
 8000b2c:	2100      	movs	r1, #0
 8000b2e:	4618      	mov	r0, r3
 8000b30:	f001 fe7c 	bl	800282c <HAL_RCC_ClockConfig>
 8000b34:	4603      	mov	r3, r0
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d001      	beq.n	8000b3e <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8000b3a:	f000 f973 	bl	8000e24 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000b3e:	2302      	movs	r3, #2
 8000b40:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8000b42:	2300      	movs	r3, #0
 8000b44:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b46:	1d3b      	adds	r3, r7, #4
 8000b48:	4618      	mov	r0, r3
 8000b4a:	f002 f807 	bl	8002b5c <HAL_RCCEx_PeriphCLKConfig>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d001      	beq.n	8000b58 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000b54:	f000 f966 	bl	8000e24 <Error_Handler>
  }
}
 8000b58:	bf00      	nop
 8000b5a:	3750      	adds	r7, #80	; 0x50
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bd80      	pop	{r7, pc}

08000b60 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b084      	sub	sp, #16
 8000b64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b66:	1d3b      	adds	r3, r7, #4
 8000b68:	2200      	movs	r2, #0
 8000b6a:	601a      	str	r2, [r3, #0]
 8000b6c:	605a      	str	r2, [r3, #4]
 8000b6e:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000b70:	4b18      	ldr	r3, [pc, #96]	; (8000bd4 <MX_ADC1_Init+0x74>)
 8000b72:	4a19      	ldr	r2, [pc, #100]	; (8000bd8 <MX_ADC1_Init+0x78>)
 8000b74:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000b76:	4b17      	ldr	r3, [pc, #92]	; (8000bd4 <MX_ADC1_Init+0x74>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000b7c:	4b15      	ldr	r3, [pc, #84]	; (8000bd4 <MX_ADC1_Init+0x74>)
 8000b7e:	2201      	movs	r2, #1
 8000b80:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000b82:	4b14      	ldr	r3, [pc, #80]	; (8000bd4 <MX_ADC1_Init+0x74>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b88:	4b12      	ldr	r3, [pc, #72]	; (8000bd4 <MX_ADC1_Init+0x74>)
 8000b8a:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000b8e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b90:	4b10      	ldr	r3, [pc, #64]	; (8000bd4 <MX_ADC1_Init+0x74>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000b96:	4b0f      	ldr	r3, [pc, #60]	; (8000bd4 <MX_ADC1_Init+0x74>)
 8000b98:	2201      	movs	r2, #1
 8000b9a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000b9c:	480d      	ldr	r0, [pc, #52]	; (8000bd4 <MX_ADC1_Init+0x74>)
 8000b9e:	f000 fc27 	bl	80013f0 <HAL_ADC_Init>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d001      	beq.n	8000bac <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000ba8:	f000 f93c 	bl	8000e24 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000bac:	2300      	movs	r3, #0
 8000bae:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000bb0:	2301      	movs	r3, #1
 8000bb2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bb8:	1d3b      	adds	r3, r7, #4
 8000bba:	4619      	mov	r1, r3
 8000bbc:	4805      	ldr	r0, [pc, #20]	; (8000bd4 <MX_ADC1_Init+0x74>)
 8000bbe:	f000 feab 	bl	8001918 <HAL_ADC_ConfigChannel>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d001      	beq.n	8000bcc <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000bc8:	f000 f92c 	bl	8000e24 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000bcc:	bf00      	nop
 8000bce:	3710      	adds	r7, #16
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	200000f4 	.word	0x200000f4
 8000bd8:	40012400 	.word	0x40012400
 8000bdc:	00000000 	.word	0x00000000

08000be0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000be0:	b5b0      	push	{r4, r5, r7, lr}
 8000be2:	b086      	sub	sp, #24
 8000be4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000be6:	f107 0308 	add.w	r3, r7, #8
 8000bea:	2200      	movs	r2, #0
 8000bec:	601a      	str	r2, [r3, #0]
 8000bee:	605a      	str	r2, [r3, #4]
 8000bf0:	609a      	str	r2, [r3, #8]
 8000bf2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bf4:	463b      	mov	r3, r7
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	601a      	str	r2, [r3, #0]
 8000bfa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000bfc:	4b3a      	ldr	r3, [pc, #232]	; (8000ce8 <MX_TIM2_Init+0x108>)
 8000bfe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c02:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000c04:	4b38      	ldr	r3, [pc, #224]	; (8000ce8 <MX_TIM2_Init+0x108>)
 8000c06:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000c0a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c0c:	4b36      	ldr	r3, [pc, #216]	; (8000ce8 <MX_TIM2_Init+0x108>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000c12:	4b35      	ldr	r3, [pc, #212]	; (8000ce8 <MX_TIM2_Init+0x108>)
 8000c14:	2209      	movs	r2, #9
 8000c16:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c18:	4b33      	ldr	r3, [pc, #204]	; (8000ce8 <MX_TIM2_Init+0x108>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c1e:	4b32      	ldr	r3, [pc, #200]	; (8000ce8 <MX_TIM2_Init+0x108>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000c24:	4830      	ldr	r0, [pc, #192]	; (8000ce8 <MX_TIM2_Init+0x108>)
 8000c26:	f002 f84f 	bl	8002cc8 <HAL_TIM_Base_Init>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d001      	beq.n	8000c34 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000c30:	f000 f8f8 	bl	8000e24 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c34:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c38:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000c3a:	f107 0308 	add.w	r3, r7, #8
 8000c3e:	4619      	mov	r1, r3
 8000c40:	4829      	ldr	r0, [pc, #164]	; (8000ce8 <MX_TIM2_Init+0x108>)
 8000c42:	f002 f9e5 	bl	8003010 <HAL_TIM_ConfigClockSource>
 8000c46:	4603      	mov	r3, r0
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d001      	beq.n	8000c50 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000c4c:	f000 f8ea 	bl	8000e24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c50:	2300      	movs	r3, #0
 8000c52:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c54:	2300      	movs	r3, #0
 8000c56:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c58:	463b      	mov	r3, r7
 8000c5a:	4619      	mov	r1, r3
 8000c5c:	4822      	ldr	r0, [pc, #136]	; (8000ce8 <MX_TIM2_Init+0x108>)
 8000c5e:	f002 fbad 	bl	80033bc <HAL_TIMEx_MasterConfigSynchronization>
 8000c62:	4603      	mov	r3, r0
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d001      	beq.n	8000c6c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000c68:	f000 f8dc 	bl	8000e24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  TICK = 1/ (8e6 / ( htim2.Init.Prescaler + 1) / (htim2.Init.Period + 1)) * 1000;
 8000c6c:	4b1e      	ldr	r3, [pc, #120]	; (8000ce8 <MX_TIM2_Init+0x108>)
 8000c6e:	685b      	ldr	r3, [r3, #4]
 8000c70:	3301      	adds	r3, #1
 8000c72:	4618      	mov	r0, r3
 8000c74:	f7ff fbae 	bl	80003d4 <__aeabi_ui2d>
 8000c78:	4602      	mov	r2, r0
 8000c7a:	460b      	mov	r3, r1
 8000c7c:	a118      	add	r1, pc, #96	; (adr r1, 8000ce0 <MX_TIM2_Init+0x100>)
 8000c7e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000c82:	f7ff fd4b 	bl	800071c <__aeabi_ddiv>
 8000c86:	4602      	mov	r2, r0
 8000c88:	460b      	mov	r3, r1
 8000c8a:	4614      	mov	r4, r2
 8000c8c:	461d      	mov	r5, r3
 8000c8e:	4b16      	ldr	r3, [pc, #88]	; (8000ce8 <MX_TIM2_Init+0x108>)
 8000c90:	68db      	ldr	r3, [r3, #12]
 8000c92:	3301      	adds	r3, #1
 8000c94:	4618      	mov	r0, r3
 8000c96:	f7ff fb9d 	bl	80003d4 <__aeabi_ui2d>
 8000c9a:	4602      	mov	r2, r0
 8000c9c:	460b      	mov	r3, r1
 8000c9e:	4620      	mov	r0, r4
 8000ca0:	4629      	mov	r1, r5
 8000ca2:	f7ff fd3b 	bl	800071c <__aeabi_ddiv>
 8000ca6:	4602      	mov	r2, r0
 8000ca8:	460b      	mov	r3, r1
 8000caa:	f04f 0000 	mov.w	r0, #0
 8000cae:	490f      	ldr	r1, [pc, #60]	; (8000cec <MX_TIM2_Init+0x10c>)
 8000cb0:	f7ff fd34 	bl	800071c <__aeabi_ddiv>
 8000cb4:	4602      	mov	r2, r0
 8000cb6:	460b      	mov	r3, r1
 8000cb8:	4610      	mov	r0, r2
 8000cba:	4619      	mov	r1, r3
 8000cbc:	f04f 0200 	mov.w	r2, #0
 8000cc0:	4b0b      	ldr	r3, [pc, #44]	; (8000cf0 <MX_TIM2_Init+0x110>)
 8000cc2:	f7ff fc01 	bl	80004c8 <__aeabi_dmul>
 8000cc6:	4602      	mov	r2, r0
 8000cc8:	460b      	mov	r3, r1
 8000cca:	4610      	mov	r0, r2
 8000ccc:	4619      	mov	r1, r3
 8000cce:	f7ff fe0d 	bl	80008ec <__aeabi_d2iz>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	4a07      	ldr	r2, [pc, #28]	; (8000cf4 <MX_TIM2_Init+0x114>)
 8000cd6:	6013      	str	r3, [r2, #0]
  /* USER CODE END TIM2_Init 2 */

}
 8000cd8:	bf00      	nop
 8000cda:	3718      	adds	r7, #24
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bdb0      	pop	{r4, r5, r7, pc}
 8000ce0:	00000000 	.word	0x00000000
 8000ce4:	415e8480 	.word	0x415e8480
 8000ce8:	20000124 	.word	0x20000124
 8000cec:	3ff00000 	.word	0x3ff00000
 8000cf0:	408f4000 	.word	0x408f4000
 8000cf4:	200001b0 	.word	0x200001b0

08000cf8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000cfc:	4b11      	ldr	r3, [pc, #68]	; (8000d44 <MX_USART2_UART_Init+0x4c>)
 8000cfe:	4a12      	ldr	r2, [pc, #72]	; (8000d48 <MX_USART2_UART_Init+0x50>)
 8000d00:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000d02:	4b10      	ldr	r3, [pc, #64]	; (8000d44 <MX_USART2_UART_Init+0x4c>)
 8000d04:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000d08:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d0a:	4b0e      	ldr	r3, [pc, #56]	; (8000d44 <MX_USART2_UART_Init+0x4c>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d10:	4b0c      	ldr	r3, [pc, #48]	; (8000d44 <MX_USART2_UART_Init+0x4c>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d16:	4b0b      	ldr	r3, [pc, #44]	; (8000d44 <MX_USART2_UART_Init+0x4c>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d1c:	4b09      	ldr	r3, [pc, #36]	; (8000d44 <MX_USART2_UART_Init+0x4c>)
 8000d1e:	220c      	movs	r2, #12
 8000d20:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d22:	4b08      	ldr	r3, [pc, #32]	; (8000d44 <MX_USART2_UART_Init+0x4c>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d28:	4b06      	ldr	r3, [pc, #24]	; (8000d44 <MX_USART2_UART_Init+0x4c>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d2e:	4805      	ldr	r0, [pc, #20]	; (8000d44 <MX_USART2_UART_Init+0x4c>)
 8000d30:	f002 fbae 	bl	8003490 <HAL_UART_Init>
 8000d34:	4603      	mov	r3, r0
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d001      	beq.n	8000d3e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000d3a:	f000 f873 	bl	8000e24 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d3e:	bf00      	nop
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	2000016c 	.word	0x2000016c
 8000d48:	40004400 	.word	0x40004400

08000d4c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b086      	sub	sp, #24
 8000d50:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d52:	f107 0308 	add.w	r3, r7, #8
 8000d56:	2200      	movs	r2, #0
 8000d58:	601a      	str	r2, [r3, #0]
 8000d5a:	605a      	str	r2, [r3, #4]
 8000d5c:	609a      	str	r2, [r3, #8]
 8000d5e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d60:	4b28      	ldr	r3, [pc, #160]	; (8000e04 <MX_GPIO_Init+0xb8>)
 8000d62:	699b      	ldr	r3, [r3, #24]
 8000d64:	4a27      	ldr	r2, [pc, #156]	; (8000e04 <MX_GPIO_Init+0xb8>)
 8000d66:	f043 0310 	orr.w	r3, r3, #16
 8000d6a:	6193      	str	r3, [r2, #24]
 8000d6c:	4b25      	ldr	r3, [pc, #148]	; (8000e04 <MX_GPIO_Init+0xb8>)
 8000d6e:	699b      	ldr	r3, [r3, #24]
 8000d70:	f003 0310 	and.w	r3, r3, #16
 8000d74:	607b      	str	r3, [r7, #4]
 8000d76:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d78:	4b22      	ldr	r3, [pc, #136]	; (8000e04 <MX_GPIO_Init+0xb8>)
 8000d7a:	699b      	ldr	r3, [r3, #24]
 8000d7c:	4a21      	ldr	r2, [pc, #132]	; (8000e04 <MX_GPIO_Init+0xb8>)
 8000d7e:	f043 0304 	orr.w	r3, r3, #4
 8000d82:	6193      	str	r3, [r2, #24]
 8000d84:	4b1f      	ldr	r3, [pc, #124]	; (8000e04 <MX_GPIO_Init+0xb8>)
 8000d86:	699b      	ldr	r3, [r3, #24]
 8000d88:	f003 0304 	and.w	r3, r3, #4
 8000d8c:	603b      	str	r3, [r7, #0]
 8000d8e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, USART2_TX_Pin|USART2_RX_Pin, GPIO_PIN_RESET);
 8000d90:	2200      	movs	r2, #0
 8000d92:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8000d96:	481c      	ldr	r0, [pc, #112]	; (8000e08 <MX_GPIO_Init+0xbc>)
 8000d98:	f001 fa94 	bl	80022c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_RED_Pin|TIM3_CH1_Pin, GPIO_PIN_RESET);
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	2160      	movs	r1, #96	; 0x60
 8000da0:	481a      	ldr	r0, [pc, #104]	; (8000e0c <MX_GPIO_Init+0xc0>)
 8000da2:	f001 fa8f 	bl	80022c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : USART2_TX_Pin USART2_RX_Pin */
  GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8000da6:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000daa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dac:	2301      	movs	r3, #1
 8000dae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db0:	2300      	movs	r3, #0
 8000db2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db4:	2302      	movs	r3, #2
 8000db6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000db8:	f107 0308 	add.w	r3, r7, #8
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	4812      	ldr	r0, [pc, #72]	; (8000e08 <MX_GPIO_Init+0xbc>)
 8000dc0:	f001 f904 	bl	8001fcc <HAL_GPIO_Init>

  /*Configure GPIO pin : ADC1_INO_Pin */
  GPIO_InitStruct.Pin = ADC1_INO_Pin;
 8000dc4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000dc8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(ADC1_INO_GPIO_Port, &GPIO_InitStruct);
 8000dd2:	f107 0308 	add.w	r3, r7, #8
 8000dd6:	4619      	mov	r1, r3
 8000dd8:	480b      	ldr	r0, [pc, #44]	; (8000e08 <MX_GPIO_Init+0xbc>)
 8000dda:	f001 f8f7 	bl	8001fcc <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_RED_Pin TIM3_CH1_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin|TIM3_CH1_Pin;
 8000dde:	2360      	movs	r3, #96	; 0x60
 8000de0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000de2:	2301      	movs	r3, #1
 8000de4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de6:	2300      	movs	r3, #0
 8000de8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dea:	2302      	movs	r3, #2
 8000dec:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dee:	f107 0308 	add.w	r3, r7, #8
 8000df2:	4619      	mov	r1, r3
 8000df4:	4805      	ldr	r0, [pc, #20]	; (8000e0c <MX_GPIO_Init+0xc0>)
 8000df6:	f001 f8e9 	bl	8001fcc <HAL_GPIO_Init>

}
 8000dfa:	bf00      	nop
 8000dfc:	3718      	adds	r7, #24
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	40021000 	.word	0x40021000
 8000e08:	40011000 	.word	0x40011000
 8000e0c:	40010800 	.word	0x40010800

08000e10 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b082      	sub	sp, #8
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
	timerRun();
 8000e18:	f000 f84e 	bl	8000eb8 <timerRun>
}
 8000e1c:	bf00      	nop
 8000e1e:	3708      	adds	r7, #8
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd80      	pop	{r7, pc}

08000e24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e24:	b480      	push	{r7}
 8000e26:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e28:	b672      	cpsid	i
}
 8000e2a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e2c:	e7fe      	b.n	8000e2c <Error_Handler+0x8>
	...

08000e30 <setTimer1>:
int timer1_flag = 0;

int timer2_counter = 0;
int timer2_flag = 0;

void setTimer1(int duration){
 8000e30:	b480      	push	{r7}
 8000e32:	b083      	sub	sp, #12
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
	timer1_counter = duration/TICK;
 8000e38:	4b07      	ldr	r3, [pc, #28]	; (8000e58 <setTimer1+0x28>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	687a      	ldr	r2, [r7, #4]
 8000e3e:	fb92 f3f3 	sdiv	r3, r2, r3
 8000e42:	4a06      	ldr	r2, [pc, #24]	; (8000e5c <setTimer1+0x2c>)
 8000e44:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 8000e46:	4b06      	ldr	r3, [pc, #24]	; (8000e60 <setTimer1+0x30>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	601a      	str	r2, [r3, #0]
}
 8000e4c:	bf00      	nop
 8000e4e:	370c      	adds	r7, #12
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bc80      	pop	{r7}
 8000e54:	4770      	bx	lr
 8000e56:	bf00      	nop
 8000e58:	200001b0 	.word	0x200001b0
 8000e5c:	200001b4 	.word	0x200001b4
 8000e60:	200001b8 	.word	0x200001b8

08000e64 <setTimer2>:
void clearTimer1(){
	timer1_counter = 0;
	timer1_flag = 0;
}

void setTimer2(int duration){
 8000e64:	b480      	push	{r7}
 8000e66:	b083      	sub	sp, #12
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
	timer2_counter = duration/TICK;
 8000e6c:	4b07      	ldr	r3, [pc, #28]	; (8000e8c <setTimer2+0x28>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	687a      	ldr	r2, [r7, #4]
 8000e72:	fb92 f3f3 	sdiv	r3, r2, r3
 8000e76:	4a06      	ldr	r2, [pc, #24]	; (8000e90 <setTimer2+0x2c>)
 8000e78:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 8000e7a:	4b06      	ldr	r3, [pc, #24]	; (8000e94 <setTimer2+0x30>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	601a      	str	r2, [r3, #0]
}
 8000e80:	bf00      	nop
 8000e82:	370c      	adds	r7, #12
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bc80      	pop	{r7}
 8000e88:	4770      	bx	lr
 8000e8a:	bf00      	nop
 8000e8c:	200001b0 	.word	0x200001b0
 8000e90:	200001bc 	.word	0x200001bc
 8000e94:	200001c0 	.word	0x200001c0

08000e98 <clearTimer2>:

void clearTimer2(){
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
	timer2_counter = 0;
 8000e9c:	4b04      	ldr	r3, [pc, #16]	; (8000eb0 <clearTimer2+0x18>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	601a      	str	r2, [r3, #0]
	timer2_flag = 0;
 8000ea2:	4b04      	ldr	r3, [pc, #16]	; (8000eb4 <clearTimer2+0x1c>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	601a      	str	r2, [r3, #0]
}
 8000ea8:	bf00      	nop
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bc80      	pop	{r7}
 8000eae:	4770      	bx	lr
 8000eb0:	200001bc 	.word	0x200001bc
 8000eb4:	200001c0 	.word	0x200001c0

08000eb8 <timerRun>:

void timerRun(){
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0
	if(timer1_counter > 0){
 8000ebc:	4b11      	ldr	r3, [pc, #68]	; (8000f04 <timerRun+0x4c>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	dd0b      	ble.n	8000edc <timerRun+0x24>
		timer1_counter--;
 8000ec4:	4b0f      	ldr	r3, [pc, #60]	; (8000f04 <timerRun+0x4c>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	3b01      	subs	r3, #1
 8000eca:	4a0e      	ldr	r2, [pc, #56]	; (8000f04 <timerRun+0x4c>)
 8000ecc:	6013      	str	r3, [r2, #0]
		if(timer1_counter == 0)
 8000ece:	4b0d      	ldr	r3, [pc, #52]	; (8000f04 <timerRun+0x4c>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d102      	bne.n	8000edc <timerRun+0x24>
			timer1_flag = 1;
 8000ed6:	4b0c      	ldr	r3, [pc, #48]	; (8000f08 <timerRun+0x50>)
 8000ed8:	2201      	movs	r2, #1
 8000eda:	601a      	str	r2, [r3, #0]
	}

	if(timer2_counter > 0){
 8000edc:	4b0b      	ldr	r3, [pc, #44]	; (8000f0c <timerRun+0x54>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	dd0b      	ble.n	8000efc <timerRun+0x44>
		timer2_counter--;
 8000ee4:	4b09      	ldr	r3, [pc, #36]	; (8000f0c <timerRun+0x54>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	3b01      	subs	r3, #1
 8000eea:	4a08      	ldr	r2, [pc, #32]	; (8000f0c <timerRun+0x54>)
 8000eec:	6013      	str	r3, [r2, #0]
		if(timer2_counter == 0)
 8000eee:	4b07      	ldr	r3, [pc, #28]	; (8000f0c <timerRun+0x54>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d102      	bne.n	8000efc <timerRun+0x44>
			timer2_flag = 1;
 8000ef6:	4b06      	ldr	r3, [pc, #24]	; (8000f10 <timerRun+0x58>)
 8000ef8:	2201      	movs	r2, #1
 8000efa:	601a      	str	r2, [r3, #0]
	}
}
 8000efc:	bf00      	nop
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bc80      	pop	{r7}
 8000f02:	4770      	bx	lr
 8000f04:	200001b4 	.word	0x200001b4
 8000f08:	200001b8 	.word	0x200001b8
 8000f0c:	200001bc 	.word	0x200001bc
 8000f10:	200001c0 	.word	0x200001c0

08000f14 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	b083      	sub	sp, #12
 8000f18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000f1a:	4b0e      	ldr	r3, [pc, #56]	; (8000f54 <HAL_MspInit+0x40>)
 8000f1c:	699b      	ldr	r3, [r3, #24]
 8000f1e:	4a0d      	ldr	r2, [pc, #52]	; (8000f54 <HAL_MspInit+0x40>)
 8000f20:	f043 0301 	orr.w	r3, r3, #1
 8000f24:	6193      	str	r3, [r2, #24]
 8000f26:	4b0b      	ldr	r3, [pc, #44]	; (8000f54 <HAL_MspInit+0x40>)
 8000f28:	699b      	ldr	r3, [r3, #24]
 8000f2a:	f003 0301 	and.w	r3, r3, #1
 8000f2e:	607b      	str	r3, [r7, #4]
 8000f30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f32:	4b08      	ldr	r3, [pc, #32]	; (8000f54 <HAL_MspInit+0x40>)
 8000f34:	69db      	ldr	r3, [r3, #28]
 8000f36:	4a07      	ldr	r2, [pc, #28]	; (8000f54 <HAL_MspInit+0x40>)
 8000f38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f3c:	61d3      	str	r3, [r2, #28]
 8000f3e:	4b05      	ldr	r3, [pc, #20]	; (8000f54 <HAL_MspInit+0x40>)
 8000f40:	69db      	ldr	r3, [r3, #28]
 8000f42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f46:	603b      	str	r3, [r7, #0]
 8000f48:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f4a:	bf00      	nop
 8000f4c:	370c      	adds	r7, #12
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bc80      	pop	{r7}
 8000f52:	4770      	bx	lr
 8000f54:	40021000 	.word	0x40021000

08000f58 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b088      	sub	sp, #32
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f60:	f107 0310 	add.w	r3, r7, #16
 8000f64:	2200      	movs	r2, #0
 8000f66:	601a      	str	r2, [r3, #0]
 8000f68:	605a      	str	r2, [r3, #4]
 8000f6a:	609a      	str	r2, [r3, #8]
 8000f6c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	4a18      	ldr	r2, [pc, #96]	; (8000fd4 <HAL_ADC_MspInit+0x7c>)
 8000f74:	4293      	cmp	r3, r2
 8000f76:	d129      	bne.n	8000fcc <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000f78:	4b17      	ldr	r3, [pc, #92]	; (8000fd8 <HAL_ADC_MspInit+0x80>)
 8000f7a:	699b      	ldr	r3, [r3, #24]
 8000f7c:	4a16      	ldr	r2, [pc, #88]	; (8000fd8 <HAL_ADC_MspInit+0x80>)
 8000f7e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f82:	6193      	str	r3, [r2, #24]
 8000f84:	4b14      	ldr	r3, [pc, #80]	; (8000fd8 <HAL_ADC_MspInit+0x80>)
 8000f86:	699b      	ldr	r3, [r3, #24]
 8000f88:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000f8c:	60fb      	str	r3, [r7, #12]
 8000f8e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f90:	4b11      	ldr	r3, [pc, #68]	; (8000fd8 <HAL_ADC_MspInit+0x80>)
 8000f92:	699b      	ldr	r3, [r3, #24]
 8000f94:	4a10      	ldr	r2, [pc, #64]	; (8000fd8 <HAL_ADC_MspInit+0x80>)
 8000f96:	f043 0304 	orr.w	r3, r3, #4
 8000f9a:	6193      	str	r3, [r2, #24]
 8000f9c:	4b0e      	ldr	r3, [pc, #56]	; (8000fd8 <HAL_ADC_MspInit+0x80>)
 8000f9e:	699b      	ldr	r3, [r3, #24]
 8000fa0:	f003 0304 	and.w	r3, r3, #4
 8000fa4:	60bb      	str	r3, [r7, #8]
 8000fa6:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000fa8:	2301      	movs	r3, #1
 8000faa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fac:	2303      	movs	r3, #3
 8000fae:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fb0:	f107 0310 	add.w	r3, r7, #16
 8000fb4:	4619      	mov	r1, r3
 8000fb6:	4809      	ldr	r0, [pc, #36]	; (8000fdc <HAL_ADC_MspInit+0x84>)
 8000fb8:	f001 f808 	bl	8001fcc <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	2100      	movs	r1, #0
 8000fc0:	2012      	movs	r0, #18
 8000fc2:	f000 ff1c 	bl	8001dfe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000fc6:	2012      	movs	r0, #18
 8000fc8:	f000 ff35 	bl	8001e36 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000fcc:	bf00      	nop
 8000fce:	3720      	adds	r7, #32
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	40012400 	.word	0x40012400
 8000fd8:	40021000 	.word	0x40021000
 8000fdc:	40010800 	.word	0x40010800

08000fe0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b084      	sub	sp, #16
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ff0:	d113      	bne.n	800101a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000ff2:	4b0c      	ldr	r3, [pc, #48]	; (8001024 <HAL_TIM_Base_MspInit+0x44>)
 8000ff4:	69db      	ldr	r3, [r3, #28]
 8000ff6:	4a0b      	ldr	r2, [pc, #44]	; (8001024 <HAL_TIM_Base_MspInit+0x44>)
 8000ff8:	f043 0301 	orr.w	r3, r3, #1
 8000ffc:	61d3      	str	r3, [r2, #28]
 8000ffe:	4b09      	ldr	r3, [pc, #36]	; (8001024 <HAL_TIM_Base_MspInit+0x44>)
 8001000:	69db      	ldr	r3, [r3, #28]
 8001002:	f003 0301 	and.w	r3, r3, #1
 8001006:	60fb      	str	r3, [r7, #12]
 8001008:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800100a:	2200      	movs	r2, #0
 800100c:	2100      	movs	r1, #0
 800100e:	201c      	movs	r0, #28
 8001010:	f000 fef5 	bl	8001dfe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001014:	201c      	movs	r0, #28
 8001016:	f000 ff0e 	bl	8001e36 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800101a:	bf00      	nop
 800101c:	3710      	adds	r7, #16
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	40021000 	.word	0x40021000

08001028 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b088      	sub	sp, #32
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001030:	f107 0310 	add.w	r3, r7, #16
 8001034:	2200      	movs	r2, #0
 8001036:	601a      	str	r2, [r3, #0]
 8001038:	605a      	str	r2, [r3, #4]
 800103a:	609a      	str	r2, [r3, #8]
 800103c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	4a1f      	ldr	r2, [pc, #124]	; (80010c0 <HAL_UART_MspInit+0x98>)
 8001044:	4293      	cmp	r3, r2
 8001046:	d137      	bne.n	80010b8 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001048:	4b1e      	ldr	r3, [pc, #120]	; (80010c4 <HAL_UART_MspInit+0x9c>)
 800104a:	69db      	ldr	r3, [r3, #28]
 800104c:	4a1d      	ldr	r2, [pc, #116]	; (80010c4 <HAL_UART_MspInit+0x9c>)
 800104e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001052:	61d3      	str	r3, [r2, #28]
 8001054:	4b1b      	ldr	r3, [pc, #108]	; (80010c4 <HAL_UART_MspInit+0x9c>)
 8001056:	69db      	ldr	r3, [r3, #28]
 8001058:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800105c:	60fb      	str	r3, [r7, #12]
 800105e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001060:	4b18      	ldr	r3, [pc, #96]	; (80010c4 <HAL_UART_MspInit+0x9c>)
 8001062:	699b      	ldr	r3, [r3, #24]
 8001064:	4a17      	ldr	r2, [pc, #92]	; (80010c4 <HAL_UART_MspInit+0x9c>)
 8001066:	f043 0304 	orr.w	r3, r3, #4
 800106a:	6193      	str	r3, [r2, #24]
 800106c:	4b15      	ldr	r3, [pc, #84]	; (80010c4 <HAL_UART_MspInit+0x9c>)
 800106e:	699b      	ldr	r3, [r3, #24]
 8001070:	f003 0304 	and.w	r3, r3, #4
 8001074:	60bb      	str	r3, [r7, #8]
 8001076:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001078:	2304      	movs	r3, #4
 800107a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800107c:	2302      	movs	r3, #2
 800107e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001080:	2303      	movs	r3, #3
 8001082:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001084:	f107 0310 	add.w	r3, r7, #16
 8001088:	4619      	mov	r1, r3
 800108a:	480f      	ldr	r0, [pc, #60]	; (80010c8 <HAL_UART_MspInit+0xa0>)
 800108c:	f000 ff9e 	bl	8001fcc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001090:	2308      	movs	r3, #8
 8001092:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001094:	2300      	movs	r3, #0
 8001096:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001098:	2300      	movs	r3, #0
 800109a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800109c:	f107 0310 	add.w	r3, r7, #16
 80010a0:	4619      	mov	r1, r3
 80010a2:	4809      	ldr	r0, [pc, #36]	; (80010c8 <HAL_UART_MspInit+0xa0>)
 80010a4:	f000 ff92 	bl	8001fcc <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80010a8:	2200      	movs	r2, #0
 80010aa:	2100      	movs	r1, #0
 80010ac:	2026      	movs	r0, #38	; 0x26
 80010ae:	f000 fea6 	bl	8001dfe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80010b2:	2026      	movs	r0, #38	; 0x26
 80010b4:	f000 febf 	bl	8001e36 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80010b8:	bf00      	nop
 80010ba:	3720      	adds	r7, #32
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	40004400 	.word	0x40004400
 80010c4:	40021000 	.word	0x40021000
 80010c8:	40010800 	.word	0x40010800

080010cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010cc:	b480      	push	{r7}
 80010ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010d0:	e7fe      	b.n	80010d0 <NMI_Handler+0x4>

080010d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010d2:	b480      	push	{r7}
 80010d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010d6:	e7fe      	b.n	80010d6 <HardFault_Handler+0x4>

080010d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010d8:	b480      	push	{r7}
 80010da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010dc:	e7fe      	b.n	80010dc <MemManage_Handler+0x4>

080010de <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010de:	b480      	push	{r7}
 80010e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010e2:	e7fe      	b.n	80010e2 <BusFault_Handler+0x4>

080010e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010e4:	b480      	push	{r7}
 80010e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010e8:	e7fe      	b.n	80010e8 <UsageFault_Handler+0x4>

080010ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010ea:	b480      	push	{r7}
 80010ec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010ee:	bf00      	nop
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bc80      	pop	{r7}
 80010f4:	4770      	bx	lr

080010f6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010f6:	b480      	push	{r7}
 80010f8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010fa:	bf00      	nop
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bc80      	pop	{r7}
 8001100:	4770      	bx	lr

08001102 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001102:	b480      	push	{r7}
 8001104:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001106:	bf00      	nop
 8001108:	46bd      	mov	sp, r7
 800110a:	bc80      	pop	{r7}
 800110c:	4770      	bx	lr

0800110e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800110e:	b580      	push	{r7, lr}
 8001110:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001112:	f000 f951 	bl	80013b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001116:	bf00      	nop
 8001118:	bd80      	pop	{r7, pc}
	...

0800111c <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001120:	4802      	ldr	r0, [pc, #8]	; (800112c <ADC1_2_IRQHandler+0x10>)
 8001122:	f000 fb23 	bl	800176c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001126:	bf00      	nop
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	200000f4 	.word	0x200000f4

08001130 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001134:	4802      	ldr	r0, [pc, #8]	; (8001140 <TIM2_IRQHandler+0x10>)
 8001136:	f001 fe63 	bl	8002e00 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800113a:	bf00      	nop
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	20000124 	.word	0x20000124

08001144 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001148:	4802      	ldr	r0, [pc, #8]	; (8001154 <USART2_IRQHandler+0x10>)
 800114a:	f002 fab1 	bl	80036b0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800114e:	bf00      	nop
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	2000016c 	.word	0x2000016c

08001158 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b086      	sub	sp, #24
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001160:	4a14      	ldr	r2, [pc, #80]	; (80011b4 <_sbrk+0x5c>)
 8001162:	4b15      	ldr	r3, [pc, #84]	; (80011b8 <_sbrk+0x60>)
 8001164:	1ad3      	subs	r3, r2, r3
 8001166:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001168:	697b      	ldr	r3, [r7, #20]
 800116a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800116c:	4b13      	ldr	r3, [pc, #76]	; (80011bc <_sbrk+0x64>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	2b00      	cmp	r3, #0
 8001172:	d102      	bne.n	800117a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001174:	4b11      	ldr	r3, [pc, #68]	; (80011bc <_sbrk+0x64>)
 8001176:	4a12      	ldr	r2, [pc, #72]	; (80011c0 <_sbrk+0x68>)
 8001178:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800117a:	4b10      	ldr	r3, [pc, #64]	; (80011bc <_sbrk+0x64>)
 800117c:	681a      	ldr	r2, [r3, #0]
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	4413      	add	r3, r2
 8001182:	693a      	ldr	r2, [r7, #16]
 8001184:	429a      	cmp	r2, r3
 8001186:	d207      	bcs.n	8001198 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001188:	f002 feba 	bl	8003f00 <__errno>
 800118c:	4603      	mov	r3, r0
 800118e:	220c      	movs	r2, #12
 8001190:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001192:	f04f 33ff 	mov.w	r3, #4294967295
 8001196:	e009      	b.n	80011ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001198:	4b08      	ldr	r3, [pc, #32]	; (80011bc <_sbrk+0x64>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800119e:	4b07      	ldr	r3, [pc, #28]	; (80011bc <_sbrk+0x64>)
 80011a0:	681a      	ldr	r2, [r3, #0]
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	4413      	add	r3, r2
 80011a6:	4a05      	ldr	r2, [pc, #20]	; (80011bc <_sbrk+0x64>)
 80011a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011aa:	68fb      	ldr	r3, [r7, #12]
}
 80011ac:	4618      	mov	r0, r3
 80011ae:	3718      	adds	r7, #24
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	20002800 	.word	0x20002800
 80011b8:	00000400 	.word	0x00000400
 80011bc:	200001c4 	.word	0x200001c4
 80011c0:	200001e0 	.word	0x200001e0

080011c4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011c8:	bf00      	nop
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bc80      	pop	{r7}
 80011ce:	4770      	bx	lr

080011d0 <uart_communication_fsm>:
 */


#include "uart_communication_fsm.h"

void uart_communication_fsm() {
 80011d0:	b580      	push	{r7, lr}
 80011d2:	af00      	add	r7, sp, #0
	switch(uart_communication_status) {
 80011d4:	4b38      	ldr	r3, [pc, #224]	; (80012b8 <uart_communication_fsm+0xe8>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	2b0b      	cmp	r3, #11
 80011da:	d002      	beq.n	80011e2 <uart_communication_fsm+0x12>
 80011dc:	2b0c      	cmp	r3, #12
 80011de:	d055      	beq.n	800128c <uart_communication_fsm+0xbc>
	case SEND_ADC_VALUE:
		HAL_UART_Transmit(&huart2, (void*)str, sprintf(str, "!ADC=%lu#\r\n", ADC_value), 1000);
		uart_communication_status = WAIT;
		break;
	default:
		break;
 80011e0:	e068      	b.n	80012b4 <uart_communication_fsm+0xe4>
		if(command_flag == 1) {
 80011e2:	4b36      	ldr	r3, [pc, #216]	; (80012bc <uart_communication_fsm+0xec>)
 80011e4:	781b      	ldrb	r3, [r3, #0]
 80011e6:	2b01      	cmp	r3, #1
 80011e8:	d144      	bne.n	8001274 <uart_communication_fsm+0xa4>
			command_flag = 0;
 80011ea:	4b34      	ldr	r3, [pc, #208]	; (80012bc <uart_communication_fsm+0xec>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	701a      	strb	r2, [r3, #0]
			if(buffer[27] == 'R' && buffer[28] == 'S' && buffer[29] == 'T') {
 80011f0:	4b33      	ldr	r3, [pc, #204]	; (80012c0 <uart_communication_fsm+0xf0>)
 80011f2:	7edb      	ldrb	r3, [r3, #27]
 80011f4:	2b52      	cmp	r3, #82	; 0x52
 80011f6:	d127      	bne.n	8001248 <uart_communication_fsm+0x78>
 80011f8:	4b31      	ldr	r3, [pc, #196]	; (80012c0 <uart_communication_fsm+0xf0>)
 80011fa:	7f1b      	ldrb	r3, [r3, #28]
 80011fc:	2b53      	cmp	r3, #83	; 0x53
 80011fe:	d123      	bne.n	8001248 <uart_communication_fsm+0x78>
 8001200:	4b2f      	ldr	r3, [pc, #188]	; (80012c0 <uart_communication_fsm+0xf0>)
 8001202:	7f5b      	ldrb	r3, [r3, #29]
 8001204:	2b54      	cmp	r3, #84	; 0x54
 8001206:	d11f      	bne.n	8001248 <uart_communication_fsm+0x78>
				HAL_ADC_Start(&hadc1);
 8001208:	482e      	ldr	r0, [pc, #184]	; (80012c4 <uart_communication_fsm+0xf4>)
 800120a:	f000 f9c9 	bl	80015a0 <HAL_ADC_Start>
				ADC_value = HAL_ADC_GetValue(&hadc1);
 800120e:	482d      	ldr	r0, [pc, #180]	; (80012c4 <uart_communication_fsm+0xf4>)
 8001210:	f000 faa0 	bl	8001754 <HAL_ADC_GetValue>
 8001214:	4603      	mov	r3, r0
 8001216:	4a2c      	ldr	r2, [pc, #176]	; (80012c8 <uart_communication_fsm+0xf8>)
 8001218:	6013      	str	r3, [r2, #0]
				HAL_ADC_Stop(&hadc1);
 800121a:	482a      	ldr	r0, [pc, #168]	; (80012c4 <uart_communication_fsm+0xf4>)
 800121c:	f000 fa6e 	bl	80016fc <HAL_ADC_Stop>
				HAL_UART_Transmit(&huart2, (void*)str, sprintf(str, "\r\n"), 1000);
 8001220:	492a      	ldr	r1, [pc, #168]	; (80012cc <uart_communication_fsm+0xfc>)
 8001222:	482b      	ldr	r0, [pc, #172]	; (80012d0 <uart_communication_fsm+0x100>)
 8001224:	f002 fe9e 	bl	8003f64 <siprintf>
 8001228:	4603      	mov	r3, r0
 800122a:	b29a      	uxth	r2, r3
 800122c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001230:	4927      	ldr	r1, [pc, #156]	; (80012d0 <uart_communication_fsm+0x100>)
 8001232:	4828      	ldr	r0, [pc, #160]	; (80012d4 <uart_communication_fsm+0x104>)
 8001234:	f002 f979 	bl	800352a <HAL_UART_Transmit>
				uart_communication_status = SEND_ADC_VALUE;
 8001238:	4b1f      	ldr	r3, [pc, #124]	; (80012b8 <uart_communication_fsm+0xe8>)
 800123a:	220c      	movs	r2, #12
 800123c:	601a      	str	r2, [r3, #0]
				setTimer2(3000);
 800123e:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001242:	f7ff fe0f 	bl	8000e64 <setTimer2>
 8001246:	e015      	b.n	8001274 <uart_communication_fsm+0xa4>
				if(buffer[27] == 'O' && buffer[28] == 'K') {
 8001248:	4b1d      	ldr	r3, [pc, #116]	; (80012c0 <uart_communication_fsm+0xf0>)
 800124a:	7edb      	ldrb	r3, [r3, #27]
 800124c:	2b4f      	cmp	r3, #79	; 0x4f
 800124e:	d111      	bne.n	8001274 <uart_communication_fsm+0xa4>
 8001250:	4b1b      	ldr	r3, [pc, #108]	; (80012c0 <uart_communication_fsm+0xf0>)
 8001252:	7f1b      	ldrb	r3, [r3, #28]
 8001254:	2b4b      	cmp	r3, #75	; 0x4b
 8001256:	d10d      	bne.n	8001274 <uart_communication_fsm+0xa4>
					HAL_UART_Transmit(&huart2, (void*)str, sprintf(str, "\r\n"), 1000);
 8001258:	491c      	ldr	r1, [pc, #112]	; (80012cc <uart_communication_fsm+0xfc>)
 800125a:	481d      	ldr	r0, [pc, #116]	; (80012d0 <uart_communication_fsm+0x100>)
 800125c:	f002 fe82 	bl	8003f64 <siprintf>
 8001260:	4603      	mov	r3, r0
 8001262:	b29a      	uxth	r2, r3
 8001264:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001268:	4919      	ldr	r1, [pc, #100]	; (80012d0 <uart_communication_fsm+0x100>)
 800126a:	481a      	ldr	r0, [pc, #104]	; (80012d4 <uart_communication_fsm+0x104>)
 800126c:	f002 f95d 	bl	800352a <HAL_UART_Transmit>
					clearTimer2();
 8001270:	f7ff fe12 	bl	8000e98 <clearTimer2>
		if(timer2_flag == 1) {
 8001274:	4b18      	ldr	r3, [pc, #96]	; (80012d8 <uart_communication_fsm+0x108>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	2b01      	cmp	r3, #1
 800127a:	d11a      	bne.n	80012b2 <uart_communication_fsm+0xe2>
			uart_communication_status = SEND_ADC_VALUE;
 800127c:	4b0e      	ldr	r3, [pc, #56]	; (80012b8 <uart_communication_fsm+0xe8>)
 800127e:	220c      	movs	r2, #12
 8001280:	601a      	str	r2, [r3, #0]
			setTimer2(3000);
 8001282:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001286:	f7ff fded 	bl	8000e64 <setTimer2>
		break;
 800128a:	e012      	b.n	80012b2 <uart_communication_fsm+0xe2>
		HAL_UART_Transmit(&huart2, (void*)str, sprintf(str, "!ADC=%lu#\r\n", ADC_value), 1000);
 800128c:	4b0e      	ldr	r3, [pc, #56]	; (80012c8 <uart_communication_fsm+0xf8>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	461a      	mov	r2, r3
 8001292:	4912      	ldr	r1, [pc, #72]	; (80012dc <uart_communication_fsm+0x10c>)
 8001294:	480e      	ldr	r0, [pc, #56]	; (80012d0 <uart_communication_fsm+0x100>)
 8001296:	f002 fe65 	bl	8003f64 <siprintf>
 800129a:	4603      	mov	r3, r0
 800129c:	b29a      	uxth	r2, r3
 800129e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012a2:	490b      	ldr	r1, [pc, #44]	; (80012d0 <uart_communication_fsm+0x100>)
 80012a4:	480b      	ldr	r0, [pc, #44]	; (80012d4 <uart_communication_fsm+0x104>)
 80012a6:	f002 f940 	bl	800352a <HAL_UART_Transmit>
		uart_communication_status = WAIT;
 80012aa:	4b03      	ldr	r3, [pc, #12]	; (80012b8 <uart_communication_fsm+0xe8>)
 80012ac:	220b      	movs	r2, #11
 80012ae:	601a      	str	r2, [r3, #0]
		break;
 80012b0:	e000      	b.n	80012b4 <uart_communication_fsm+0xe4>
		break;
 80012b2:	bf00      	nop
	}
}
 80012b4:	bf00      	nop
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	20000000 	.word	0x20000000
 80012bc:	200000b9 	.word	0x200000b9
 80012c0:	20000098 	.word	0x20000098
 80012c4:	200000f4 	.word	0x200000f4
 80012c8:	200000bc 	.word	0x200000bc
 80012cc:	08004870 	.word	0x08004870
 80012d0:	200000c0 	.word	0x200000c0
 80012d4:	2000016c 	.word	0x2000016c
 80012d8:	200001c0 	.word	0x200001c0
 80012dc:	08004874 	.word	0x08004874

080012e0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012e0:	480c      	ldr	r0, [pc, #48]	; (8001314 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80012e2:	490d      	ldr	r1, [pc, #52]	; (8001318 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80012e4:	4a0d      	ldr	r2, [pc, #52]	; (800131c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80012e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012e8:	e002      	b.n	80012f0 <LoopCopyDataInit>

080012ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012ee:	3304      	adds	r3, #4

080012f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012f4:	d3f9      	bcc.n	80012ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012f6:	4a0a      	ldr	r2, [pc, #40]	; (8001320 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80012f8:	4c0a      	ldr	r4, [pc, #40]	; (8001324 <LoopFillZerobss+0x22>)
  movs r3, #0
 80012fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012fc:	e001      	b.n	8001302 <LoopFillZerobss>

080012fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001300:	3204      	adds	r2, #4

08001302 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001302:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001304:	d3fb      	bcc.n	80012fe <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001306:	f7ff ff5d 	bl	80011c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800130a:	f002 fdff 	bl	8003f0c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800130e:	f7ff fb97 	bl	8000a40 <main>
  bx lr
 8001312:	4770      	bx	lr
  ldr r0, =_sdata
 8001314:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001318:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 800131c:	080048e4 	.word	0x080048e4
  ldr r2, =_sbss
 8001320:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001324:	200001dc 	.word	0x200001dc

08001328 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001328:	e7fe      	b.n	8001328 <CAN1_RX1_IRQHandler>
	...

0800132c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001330:	4b08      	ldr	r3, [pc, #32]	; (8001354 <HAL_Init+0x28>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4a07      	ldr	r2, [pc, #28]	; (8001354 <HAL_Init+0x28>)
 8001336:	f043 0310 	orr.w	r3, r3, #16
 800133a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800133c:	2003      	movs	r0, #3
 800133e:	f000 fd53 	bl	8001de8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001342:	200f      	movs	r0, #15
 8001344:	f000 f808 	bl	8001358 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001348:	f7ff fde4 	bl	8000f14 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800134c:	2300      	movs	r3, #0
}
 800134e:	4618      	mov	r0, r3
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	40022000 	.word	0x40022000

08001358 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b082      	sub	sp, #8
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001360:	4b12      	ldr	r3, [pc, #72]	; (80013ac <HAL_InitTick+0x54>)
 8001362:	681a      	ldr	r2, [r3, #0]
 8001364:	4b12      	ldr	r3, [pc, #72]	; (80013b0 <HAL_InitTick+0x58>)
 8001366:	781b      	ldrb	r3, [r3, #0]
 8001368:	4619      	mov	r1, r3
 800136a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800136e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001372:	fbb2 f3f3 	udiv	r3, r2, r3
 8001376:	4618      	mov	r0, r3
 8001378:	f000 fd6b 	bl	8001e52 <HAL_SYSTICK_Config>
 800137c:	4603      	mov	r3, r0
 800137e:	2b00      	cmp	r3, #0
 8001380:	d001      	beq.n	8001386 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001382:	2301      	movs	r3, #1
 8001384:	e00e      	b.n	80013a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	2b0f      	cmp	r3, #15
 800138a:	d80a      	bhi.n	80013a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800138c:	2200      	movs	r2, #0
 800138e:	6879      	ldr	r1, [r7, #4]
 8001390:	f04f 30ff 	mov.w	r0, #4294967295
 8001394:	f000 fd33 	bl	8001dfe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001398:	4a06      	ldr	r2, [pc, #24]	; (80013b4 <HAL_InitTick+0x5c>)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800139e:	2300      	movs	r3, #0
 80013a0:	e000      	b.n	80013a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80013a2:	2301      	movs	r3, #1
}
 80013a4:	4618      	mov	r0, r3
 80013a6:	3708      	adds	r7, #8
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	20000004 	.word	0x20000004
 80013b0:	2000000c 	.word	0x2000000c
 80013b4:	20000008 	.word	0x20000008

080013b8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013b8:	b480      	push	{r7}
 80013ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013bc:	4b05      	ldr	r3, [pc, #20]	; (80013d4 <HAL_IncTick+0x1c>)
 80013be:	781b      	ldrb	r3, [r3, #0]
 80013c0:	461a      	mov	r2, r3
 80013c2:	4b05      	ldr	r3, [pc, #20]	; (80013d8 <HAL_IncTick+0x20>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	4413      	add	r3, r2
 80013c8:	4a03      	ldr	r2, [pc, #12]	; (80013d8 <HAL_IncTick+0x20>)
 80013ca:	6013      	str	r3, [r2, #0]
}
 80013cc:	bf00      	nop
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bc80      	pop	{r7}
 80013d2:	4770      	bx	lr
 80013d4:	2000000c 	.word	0x2000000c
 80013d8:	200001c8 	.word	0x200001c8

080013dc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013dc:	b480      	push	{r7}
 80013de:	af00      	add	r7, sp, #0
  return uwTick;
 80013e0:	4b02      	ldr	r3, [pc, #8]	; (80013ec <HAL_GetTick+0x10>)
 80013e2:	681b      	ldr	r3, [r3, #0]
}
 80013e4:	4618      	mov	r0, r3
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bc80      	pop	{r7}
 80013ea:	4770      	bx	lr
 80013ec:	200001c8 	.word	0x200001c8

080013f0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b086      	sub	sp, #24
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80013f8:	2300      	movs	r3, #0
 80013fa:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80013fc:	2300      	movs	r3, #0
 80013fe:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001400:	2300      	movs	r3, #0
 8001402:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001404:	2300      	movs	r3, #0
 8001406:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	2b00      	cmp	r3, #0
 800140c:	d101      	bne.n	8001412 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800140e:	2301      	movs	r3, #1
 8001410:	e0be      	b.n	8001590 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	689b      	ldr	r3, [r3, #8]
 8001416:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800141c:	2b00      	cmp	r3, #0
 800141e:	d109      	bne.n	8001434 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	2200      	movs	r2, #0
 8001424:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	2200      	movs	r2, #0
 800142a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800142e:	6878      	ldr	r0, [r7, #4]
 8001430:	f7ff fd92 	bl	8000f58 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001434:	6878      	ldr	r0, [r7, #4]
 8001436:	f000 fbc1 	bl	8001bbc <ADC_ConversionStop_Disable>
 800143a:	4603      	mov	r3, r0
 800143c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001442:	f003 0310 	and.w	r3, r3, #16
 8001446:	2b00      	cmp	r3, #0
 8001448:	f040 8099 	bne.w	800157e <HAL_ADC_Init+0x18e>
 800144c:	7dfb      	ldrb	r3, [r7, #23]
 800144e:	2b00      	cmp	r3, #0
 8001450:	f040 8095 	bne.w	800157e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001458:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800145c:	f023 0302 	bic.w	r3, r3, #2
 8001460:	f043 0202 	orr.w	r2, r3, #2
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001470:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	7b1b      	ldrb	r3, [r3, #12]
 8001476:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001478:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800147a:	68ba      	ldr	r2, [r7, #8]
 800147c:	4313      	orrs	r3, r2
 800147e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	689b      	ldr	r3, [r3, #8]
 8001484:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001488:	d003      	beq.n	8001492 <HAL_ADC_Init+0xa2>
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	689b      	ldr	r3, [r3, #8]
 800148e:	2b01      	cmp	r3, #1
 8001490:	d102      	bne.n	8001498 <HAL_ADC_Init+0xa8>
 8001492:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001496:	e000      	b.n	800149a <HAL_ADC_Init+0xaa>
 8001498:	2300      	movs	r3, #0
 800149a:	693a      	ldr	r2, [r7, #16]
 800149c:	4313      	orrs	r3, r2
 800149e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	7d1b      	ldrb	r3, [r3, #20]
 80014a4:	2b01      	cmp	r3, #1
 80014a6:	d119      	bne.n	80014dc <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	7b1b      	ldrb	r3, [r3, #12]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d109      	bne.n	80014c4 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	699b      	ldr	r3, [r3, #24]
 80014b4:	3b01      	subs	r3, #1
 80014b6:	035a      	lsls	r2, r3, #13
 80014b8:	693b      	ldr	r3, [r7, #16]
 80014ba:	4313      	orrs	r3, r2
 80014bc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80014c0:	613b      	str	r3, [r7, #16]
 80014c2:	e00b      	b.n	80014dc <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014c8:	f043 0220 	orr.w	r2, r3, #32
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014d4:	f043 0201 	orr.w	r2, r3, #1
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	693a      	ldr	r2, [r7, #16]
 80014ec:	430a      	orrs	r2, r1
 80014ee:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	689a      	ldr	r2, [r3, #8]
 80014f6:	4b28      	ldr	r3, [pc, #160]	; (8001598 <HAL_ADC_Init+0x1a8>)
 80014f8:	4013      	ands	r3, r2
 80014fa:	687a      	ldr	r2, [r7, #4]
 80014fc:	6812      	ldr	r2, [r2, #0]
 80014fe:	68b9      	ldr	r1, [r7, #8]
 8001500:	430b      	orrs	r3, r1
 8001502:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	689b      	ldr	r3, [r3, #8]
 8001508:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800150c:	d003      	beq.n	8001516 <HAL_ADC_Init+0x126>
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	689b      	ldr	r3, [r3, #8]
 8001512:	2b01      	cmp	r3, #1
 8001514:	d104      	bne.n	8001520 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	691b      	ldr	r3, [r3, #16]
 800151a:	3b01      	subs	r3, #1
 800151c:	051b      	lsls	r3, r3, #20
 800151e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001526:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	68fa      	ldr	r2, [r7, #12]
 8001530:	430a      	orrs	r2, r1
 8001532:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	689a      	ldr	r2, [r3, #8]
 800153a:	4b18      	ldr	r3, [pc, #96]	; (800159c <HAL_ADC_Init+0x1ac>)
 800153c:	4013      	ands	r3, r2
 800153e:	68ba      	ldr	r2, [r7, #8]
 8001540:	429a      	cmp	r2, r3
 8001542:	d10b      	bne.n	800155c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	2200      	movs	r2, #0
 8001548:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800154e:	f023 0303 	bic.w	r3, r3, #3
 8001552:	f043 0201 	orr.w	r2, r3, #1
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800155a:	e018      	b.n	800158e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001560:	f023 0312 	bic.w	r3, r3, #18
 8001564:	f043 0210 	orr.w	r2, r3, #16
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001570:	f043 0201 	orr.w	r2, r3, #1
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001578:	2301      	movs	r3, #1
 800157a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800157c:	e007      	b.n	800158e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001582:	f043 0210 	orr.w	r2, r3, #16
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800158a:	2301      	movs	r3, #1
 800158c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800158e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001590:	4618      	mov	r0, r3
 8001592:	3718      	adds	r7, #24
 8001594:	46bd      	mov	sp, r7
 8001596:	bd80      	pop	{r7, pc}
 8001598:	ffe1f7fd 	.word	0xffe1f7fd
 800159c:	ff1f0efe 	.word	0xff1f0efe

080015a0 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b084      	sub	sp, #16
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80015a8:	2300      	movs	r3, #0
 80015aa:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80015b2:	2b01      	cmp	r3, #1
 80015b4:	d101      	bne.n	80015ba <HAL_ADC_Start+0x1a>
 80015b6:	2302      	movs	r3, #2
 80015b8:	e098      	b.n	80016ec <HAL_ADC_Start+0x14c>
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	2201      	movs	r2, #1
 80015be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80015c2:	6878      	ldr	r0, [r7, #4]
 80015c4:	f000 faa0 	bl	8001b08 <ADC_Enable>
 80015c8:	4603      	mov	r3, r0
 80015ca:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80015cc:	7bfb      	ldrb	r3, [r7, #15]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	f040 8087 	bne.w	80016e2 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80015dc:	f023 0301 	bic.w	r3, r3, #1
 80015e0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4a41      	ldr	r2, [pc, #260]	; (80016f4 <HAL_ADC_Start+0x154>)
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d105      	bne.n	80015fe <HAL_ADC_Start+0x5e>
 80015f2:	4b41      	ldr	r3, [pc, #260]	; (80016f8 <HAL_ADC_Start+0x158>)
 80015f4:	685b      	ldr	r3, [r3, #4]
 80015f6:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d115      	bne.n	800162a <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001602:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001614:	2b00      	cmp	r3, #0
 8001616:	d026      	beq.n	8001666 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800161c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001620:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001628:	e01d      	b.n	8001666 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800162e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	4a2f      	ldr	r2, [pc, #188]	; (80016f8 <HAL_ADC_Start+0x158>)
 800163c:	4293      	cmp	r3, r2
 800163e:	d004      	beq.n	800164a <HAL_ADC_Start+0xaa>
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4a2b      	ldr	r2, [pc, #172]	; (80016f4 <HAL_ADC_Start+0x154>)
 8001646:	4293      	cmp	r3, r2
 8001648:	d10d      	bne.n	8001666 <HAL_ADC_Start+0xc6>
 800164a:	4b2b      	ldr	r3, [pc, #172]	; (80016f8 <HAL_ADC_Start+0x158>)
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001652:	2b00      	cmp	r3, #0
 8001654:	d007      	beq.n	8001666 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800165a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800165e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800166a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800166e:	2b00      	cmp	r3, #0
 8001670:	d006      	beq.n	8001680 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001676:	f023 0206 	bic.w	r2, r3, #6
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	62da      	str	r2, [r3, #44]	; 0x2c
 800167e:	e002      	b.n	8001686 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	2200      	movs	r2, #0
 8001684:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	2200      	movs	r2, #0
 800168a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f06f 0202 	mvn.w	r2, #2
 8001696:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	689b      	ldr	r3, [r3, #8]
 800169e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80016a2:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80016a6:	d113      	bne.n	80016d0 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80016ac:	4a11      	ldr	r2, [pc, #68]	; (80016f4 <HAL_ADC_Start+0x154>)
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d105      	bne.n	80016be <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80016b2:	4b11      	ldr	r3, [pc, #68]	; (80016f8 <HAL_ADC_Start+0x158>)
 80016b4:	685b      	ldr	r3, [r3, #4]
 80016b6:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d108      	bne.n	80016d0 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	689a      	ldr	r2, [r3, #8]
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80016cc:	609a      	str	r2, [r3, #8]
 80016ce:	e00c      	b.n	80016ea <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	689a      	ldr	r2, [r3, #8]
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80016de:	609a      	str	r2, [r3, #8]
 80016e0:	e003      	b.n	80016ea <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	2200      	movs	r2, #0
 80016e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 80016ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80016ec:	4618      	mov	r0, r3
 80016ee:	3710      	adds	r7, #16
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}
 80016f4:	40012800 	.word	0x40012800
 80016f8:	40012400 	.word	0x40012400

080016fc <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b084      	sub	sp, #16
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001704:	2300      	movs	r3, #0
 8001706:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800170e:	2b01      	cmp	r3, #1
 8001710:	d101      	bne.n	8001716 <HAL_ADC_Stop+0x1a>
 8001712:	2302      	movs	r3, #2
 8001714:	e01a      	b.n	800174c <HAL_ADC_Stop+0x50>
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	2201      	movs	r2, #1
 800171a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800171e:	6878      	ldr	r0, [r7, #4]
 8001720:	f000 fa4c 	bl	8001bbc <ADC_ConversionStop_Disable>
 8001724:	4603      	mov	r3, r0
 8001726:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8001728:	7bfb      	ldrb	r3, [r7, #15]
 800172a:	2b00      	cmp	r3, #0
 800172c:	d109      	bne.n	8001742 <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001732:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001736:	f023 0301 	bic.w	r3, r3, #1
 800173a:	f043 0201 	orr.w	r2, r3, #1
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	2200      	movs	r2, #0
 8001746:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800174a:	7bfb      	ldrb	r3, [r7, #15]
}
 800174c:	4618      	mov	r0, r3
 800174e:	3710      	adds	r7, #16
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}

08001754 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001754:	b480      	push	{r7}
 8001756:	b083      	sub	sp, #12
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001762:	4618      	mov	r0, r3
 8001764:	370c      	adds	r7, #12
 8001766:	46bd      	mov	sp, r7
 8001768:	bc80      	pop	{r7}
 800176a:	4770      	bx	lr

0800176c <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b082      	sub	sp, #8
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	f003 0320 	and.w	r3, r3, #32
 800177e:	2b20      	cmp	r3, #32
 8001780:	d140      	bne.n	8001804 <HAL_ADC_IRQHandler+0x98>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f003 0302 	and.w	r3, r3, #2
 800178c:	2b02      	cmp	r3, #2
 800178e:	d139      	bne.n	8001804 <HAL_ADC_IRQHandler+0x98>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001794:	f003 0310 	and.w	r3, r3, #16
 8001798:	2b00      	cmp	r3, #0
 800179a:	d105      	bne.n	80017a8 <HAL_ADC_IRQHandler+0x3c>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017a0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	689b      	ldr	r3, [r3, #8]
 80017ae:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80017b2:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80017b6:	d11d      	bne.n	80017f4 <HAL_ADC_IRQHandler+0x88>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d119      	bne.n	80017f4 <HAL_ADC_IRQHandler+0x88>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	685a      	ldr	r2, [r3, #4]
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f022 0220 	bic.w	r2, r2, #32
 80017ce:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017d4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d105      	bne.n	80017f4 <HAL_ADC_IRQHandler+0x88>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017ec:	f043 0201 	orr.w	r2, r3, #1
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 80017f4:	6878      	ldr	r0, [r7, #4]
 80017f6:	f000 f87c 	bl	80018f2 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f06f 0212 	mvn.w	r2, #18
 8001802:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800180e:	2b80      	cmp	r3, #128	; 0x80
 8001810:	d14f      	bne.n	80018b2 <HAL_ADC_IRQHandler+0x146>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f003 0304 	and.w	r3, r3, #4
 800181c:	2b04      	cmp	r3, #4
 800181e:	d148      	bne.n	80018b2 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001824:	f003 0310 	and.w	r3, r3, #16
 8001828:	2b00      	cmp	r3, #0
 800182a:	d105      	bne.n	8001838 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001830:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	689b      	ldr	r3, [r3, #8]
 800183e:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8001842:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 8001846:	d012      	beq.n	800186e <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001852:	2b00      	cmp	r3, #0
 8001854:	d125      	bne.n	80018a2 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	689b      	ldr	r3, [r3, #8]
 800185c:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001860:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001864:	d11d      	bne.n	80018a2 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800186a:	2b00      	cmp	r3, #0
 800186c:	d119      	bne.n	80018a2 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	685a      	ldr	r2, [r3, #4]
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800187c:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001882:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800188e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001892:	2b00      	cmp	r3, #0
 8001894:	d105      	bne.n	80018a2 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800189a:	f043 0201 	orr.w	r2, r3, #1
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80018a2:	6878      	ldr	r0, [r7, #4]
 80018a4:	f000 f9cb 	bl	8001c3e <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f06f 020c 	mvn.w	r2, #12
 80018b0:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018bc:	2b40      	cmp	r3, #64	; 0x40
 80018be:	d114      	bne.n	80018ea <HAL_ADC_IRQHandler+0x17e>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f003 0301 	and.w	r3, r3, #1
 80018ca:	2b01      	cmp	r3, #1
 80018cc:	d10d      	bne.n	80018ea <HAL_ADC_IRQHandler+0x17e>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018d2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80018da:	6878      	ldr	r0, [r7, #4]
 80018dc:	f000 f812 	bl	8001904 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f06f 0201 	mvn.w	r2, #1
 80018e8:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 80018ea:	bf00      	nop
 80018ec:	3708      	adds	r7, #8
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}

080018f2 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80018f2:	b480      	push	{r7}
 80018f4:	b083      	sub	sp, #12
 80018f6:	af00      	add	r7, sp, #0
 80018f8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80018fa:	bf00      	nop
 80018fc:	370c      	adds	r7, #12
 80018fe:	46bd      	mov	sp, r7
 8001900:	bc80      	pop	{r7}
 8001902:	4770      	bx	lr

08001904 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001904:	b480      	push	{r7}
 8001906:	b083      	sub	sp, #12
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 800190c:	bf00      	nop
 800190e:	370c      	adds	r7, #12
 8001910:	46bd      	mov	sp, r7
 8001912:	bc80      	pop	{r7}
 8001914:	4770      	bx	lr
	...

08001918 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001918:	b480      	push	{r7}
 800191a:	b085      	sub	sp, #20
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
 8001920:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001922:	2300      	movs	r3, #0
 8001924:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001926:	2300      	movs	r3, #0
 8001928:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001930:	2b01      	cmp	r3, #1
 8001932:	d101      	bne.n	8001938 <HAL_ADC_ConfigChannel+0x20>
 8001934:	2302      	movs	r3, #2
 8001936:	e0dc      	b.n	8001af2 <HAL_ADC_ConfigChannel+0x1da>
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2201      	movs	r2, #1
 800193c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	2b06      	cmp	r3, #6
 8001946:	d81c      	bhi.n	8001982 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	685a      	ldr	r2, [r3, #4]
 8001952:	4613      	mov	r3, r2
 8001954:	009b      	lsls	r3, r3, #2
 8001956:	4413      	add	r3, r2
 8001958:	3b05      	subs	r3, #5
 800195a:	221f      	movs	r2, #31
 800195c:	fa02 f303 	lsl.w	r3, r2, r3
 8001960:	43db      	mvns	r3, r3
 8001962:	4019      	ands	r1, r3
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	6818      	ldr	r0, [r3, #0]
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	685a      	ldr	r2, [r3, #4]
 800196c:	4613      	mov	r3, r2
 800196e:	009b      	lsls	r3, r3, #2
 8001970:	4413      	add	r3, r2
 8001972:	3b05      	subs	r3, #5
 8001974:	fa00 f203 	lsl.w	r2, r0, r3
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	430a      	orrs	r2, r1
 800197e:	635a      	str	r2, [r3, #52]	; 0x34
 8001980:	e03c      	b.n	80019fc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	2b0c      	cmp	r3, #12
 8001988:	d81c      	bhi.n	80019c4 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	685a      	ldr	r2, [r3, #4]
 8001994:	4613      	mov	r3, r2
 8001996:	009b      	lsls	r3, r3, #2
 8001998:	4413      	add	r3, r2
 800199a:	3b23      	subs	r3, #35	; 0x23
 800199c:	221f      	movs	r2, #31
 800199e:	fa02 f303 	lsl.w	r3, r2, r3
 80019a2:	43db      	mvns	r3, r3
 80019a4:	4019      	ands	r1, r3
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	6818      	ldr	r0, [r3, #0]
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	685a      	ldr	r2, [r3, #4]
 80019ae:	4613      	mov	r3, r2
 80019b0:	009b      	lsls	r3, r3, #2
 80019b2:	4413      	add	r3, r2
 80019b4:	3b23      	subs	r3, #35	; 0x23
 80019b6:	fa00 f203 	lsl.w	r2, r0, r3
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	430a      	orrs	r2, r1
 80019c0:	631a      	str	r2, [r3, #48]	; 0x30
 80019c2:	e01b      	b.n	80019fc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	685a      	ldr	r2, [r3, #4]
 80019ce:	4613      	mov	r3, r2
 80019d0:	009b      	lsls	r3, r3, #2
 80019d2:	4413      	add	r3, r2
 80019d4:	3b41      	subs	r3, #65	; 0x41
 80019d6:	221f      	movs	r2, #31
 80019d8:	fa02 f303 	lsl.w	r3, r2, r3
 80019dc:	43db      	mvns	r3, r3
 80019de:	4019      	ands	r1, r3
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	6818      	ldr	r0, [r3, #0]
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	685a      	ldr	r2, [r3, #4]
 80019e8:	4613      	mov	r3, r2
 80019ea:	009b      	lsls	r3, r3, #2
 80019ec:	4413      	add	r3, r2
 80019ee:	3b41      	subs	r3, #65	; 0x41
 80019f0:	fa00 f203 	lsl.w	r2, r0, r3
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	430a      	orrs	r2, r1
 80019fa:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	2b09      	cmp	r3, #9
 8001a02:	d91c      	bls.n	8001a3e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	68d9      	ldr	r1, [r3, #12]
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	681a      	ldr	r2, [r3, #0]
 8001a0e:	4613      	mov	r3, r2
 8001a10:	005b      	lsls	r3, r3, #1
 8001a12:	4413      	add	r3, r2
 8001a14:	3b1e      	subs	r3, #30
 8001a16:	2207      	movs	r2, #7
 8001a18:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1c:	43db      	mvns	r3, r3
 8001a1e:	4019      	ands	r1, r3
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	6898      	ldr	r0, [r3, #8]
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	681a      	ldr	r2, [r3, #0]
 8001a28:	4613      	mov	r3, r2
 8001a2a:	005b      	lsls	r3, r3, #1
 8001a2c:	4413      	add	r3, r2
 8001a2e:	3b1e      	subs	r3, #30
 8001a30:	fa00 f203 	lsl.w	r2, r0, r3
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	430a      	orrs	r2, r1
 8001a3a:	60da      	str	r2, [r3, #12]
 8001a3c:	e019      	b.n	8001a72 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	6919      	ldr	r1, [r3, #16]
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	681a      	ldr	r2, [r3, #0]
 8001a48:	4613      	mov	r3, r2
 8001a4a:	005b      	lsls	r3, r3, #1
 8001a4c:	4413      	add	r3, r2
 8001a4e:	2207      	movs	r2, #7
 8001a50:	fa02 f303 	lsl.w	r3, r2, r3
 8001a54:	43db      	mvns	r3, r3
 8001a56:	4019      	ands	r1, r3
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	6898      	ldr	r0, [r3, #8]
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	681a      	ldr	r2, [r3, #0]
 8001a60:	4613      	mov	r3, r2
 8001a62:	005b      	lsls	r3, r3, #1
 8001a64:	4413      	add	r3, r2
 8001a66:	fa00 f203 	lsl.w	r2, r0, r3
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	430a      	orrs	r2, r1
 8001a70:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	2b10      	cmp	r3, #16
 8001a78:	d003      	beq.n	8001a82 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001a7e:	2b11      	cmp	r3, #17
 8001a80:	d132      	bne.n	8001ae8 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4a1d      	ldr	r2, [pc, #116]	; (8001afc <HAL_ADC_ConfigChannel+0x1e4>)
 8001a88:	4293      	cmp	r3, r2
 8001a8a:	d125      	bne.n	8001ad8 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	689b      	ldr	r3, [r3, #8]
 8001a92:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d126      	bne.n	8001ae8 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	689a      	ldr	r2, [r3, #8]
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001aa8:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	2b10      	cmp	r3, #16
 8001ab0:	d11a      	bne.n	8001ae8 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001ab2:	4b13      	ldr	r3, [pc, #76]	; (8001b00 <HAL_ADC_ConfigChannel+0x1e8>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4a13      	ldr	r2, [pc, #76]	; (8001b04 <HAL_ADC_ConfigChannel+0x1ec>)
 8001ab8:	fba2 2303 	umull	r2, r3, r2, r3
 8001abc:	0c9a      	lsrs	r2, r3, #18
 8001abe:	4613      	mov	r3, r2
 8001ac0:	009b      	lsls	r3, r3, #2
 8001ac2:	4413      	add	r3, r2
 8001ac4:	005b      	lsls	r3, r3, #1
 8001ac6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001ac8:	e002      	b.n	8001ad0 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001aca:	68bb      	ldr	r3, [r7, #8]
 8001acc:	3b01      	subs	r3, #1
 8001ace:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001ad0:	68bb      	ldr	r3, [r7, #8]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d1f9      	bne.n	8001aca <HAL_ADC_ConfigChannel+0x1b2>
 8001ad6:	e007      	b.n	8001ae8 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001adc:	f043 0220 	orr.w	r2, r3, #32
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2200      	movs	r2, #0
 8001aec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001af0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	3714      	adds	r7, #20
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bc80      	pop	{r7}
 8001afa:	4770      	bx	lr
 8001afc:	40012400 	.word	0x40012400
 8001b00:	20000004 	.word	0x20000004
 8001b04:	431bde83 	.word	0x431bde83

08001b08 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b084      	sub	sp, #16
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001b10:	2300      	movs	r3, #0
 8001b12:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001b14:	2300      	movs	r3, #0
 8001b16:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	689b      	ldr	r3, [r3, #8]
 8001b1e:	f003 0301 	and.w	r3, r3, #1
 8001b22:	2b01      	cmp	r3, #1
 8001b24:	d040      	beq.n	8001ba8 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	689a      	ldr	r2, [r3, #8]
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f042 0201 	orr.w	r2, r2, #1
 8001b34:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001b36:	4b1f      	ldr	r3, [pc, #124]	; (8001bb4 <ADC_Enable+0xac>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4a1f      	ldr	r2, [pc, #124]	; (8001bb8 <ADC_Enable+0xb0>)
 8001b3c:	fba2 2303 	umull	r2, r3, r2, r3
 8001b40:	0c9b      	lsrs	r3, r3, #18
 8001b42:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001b44:	e002      	b.n	8001b4c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001b46:	68bb      	ldr	r3, [r7, #8]
 8001b48:	3b01      	subs	r3, #1
 8001b4a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001b4c:	68bb      	ldr	r3, [r7, #8]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d1f9      	bne.n	8001b46 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001b52:	f7ff fc43 	bl	80013dc <HAL_GetTick>
 8001b56:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001b58:	e01f      	b.n	8001b9a <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001b5a:	f7ff fc3f 	bl	80013dc <HAL_GetTick>
 8001b5e:	4602      	mov	r2, r0
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	1ad3      	subs	r3, r2, r3
 8001b64:	2b02      	cmp	r3, #2
 8001b66:	d918      	bls.n	8001b9a <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	689b      	ldr	r3, [r3, #8]
 8001b6e:	f003 0301 	and.w	r3, r3, #1
 8001b72:	2b01      	cmp	r3, #1
 8001b74:	d011      	beq.n	8001b9a <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b7a:	f043 0210 	orr.w	r2, r3, #16
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b86:	f043 0201 	orr.w	r2, r3, #1
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	2200      	movs	r2, #0
 8001b92:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001b96:	2301      	movs	r3, #1
 8001b98:	e007      	b.n	8001baa <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	689b      	ldr	r3, [r3, #8]
 8001ba0:	f003 0301 	and.w	r3, r3, #1
 8001ba4:	2b01      	cmp	r3, #1
 8001ba6:	d1d8      	bne.n	8001b5a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001ba8:	2300      	movs	r3, #0
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	3710      	adds	r7, #16
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	20000004 	.word	0x20000004
 8001bb8:	431bde83 	.word	0x431bde83

08001bbc <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b084      	sub	sp, #16
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	689b      	ldr	r3, [r3, #8]
 8001bce:	f003 0301 	and.w	r3, r3, #1
 8001bd2:	2b01      	cmp	r3, #1
 8001bd4:	d12e      	bne.n	8001c34 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	689a      	ldr	r2, [r3, #8]
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f022 0201 	bic.w	r2, r2, #1
 8001be4:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001be6:	f7ff fbf9 	bl	80013dc <HAL_GetTick>
 8001bea:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001bec:	e01b      	b.n	8001c26 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001bee:	f7ff fbf5 	bl	80013dc <HAL_GetTick>
 8001bf2:	4602      	mov	r2, r0
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	1ad3      	subs	r3, r2, r3
 8001bf8:	2b02      	cmp	r3, #2
 8001bfa:	d914      	bls.n	8001c26 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	689b      	ldr	r3, [r3, #8]
 8001c02:	f003 0301 	and.w	r3, r3, #1
 8001c06:	2b01      	cmp	r3, #1
 8001c08:	d10d      	bne.n	8001c26 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c0e:	f043 0210 	orr.w	r2, r3, #16
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c1a:	f043 0201 	orr.w	r2, r3, #1
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8001c22:	2301      	movs	r3, #1
 8001c24:	e007      	b.n	8001c36 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	689b      	ldr	r3, [r3, #8]
 8001c2c:	f003 0301 	and.w	r3, r3, #1
 8001c30:	2b01      	cmp	r3, #1
 8001c32:	d0dc      	beq.n	8001bee <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001c34:	2300      	movs	r3, #0
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	3710      	adds	r7, #16
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}

08001c3e <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001c3e:	b480      	push	{r7}
 8001c40:	b083      	sub	sp, #12
 8001c42:	af00      	add	r7, sp, #0
 8001c44:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8001c46:	bf00      	nop
 8001c48:	370c      	adds	r7, #12
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bc80      	pop	{r7}
 8001c4e:	4770      	bx	lr

08001c50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c50:	b480      	push	{r7}
 8001c52:	b085      	sub	sp, #20
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	f003 0307 	and.w	r3, r3, #7
 8001c5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c60:	4b0c      	ldr	r3, [pc, #48]	; (8001c94 <__NVIC_SetPriorityGrouping+0x44>)
 8001c62:	68db      	ldr	r3, [r3, #12]
 8001c64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c66:	68ba      	ldr	r2, [r7, #8]
 8001c68:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c6c:	4013      	ands	r3, r2
 8001c6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c74:	68bb      	ldr	r3, [r7, #8]
 8001c76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c78:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c82:	4a04      	ldr	r2, [pc, #16]	; (8001c94 <__NVIC_SetPriorityGrouping+0x44>)
 8001c84:	68bb      	ldr	r3, [r7, #8]
 8001c86:	60d3      	str	r3, [r2, #12]
}
 8001c88:	bf00      	nop
 8001c8a:	3714      	adds	r7, #20
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bc80      	pop	{r7}
 8001c90:	4770      	bx	lr
 8001c92:	bf00      	nop
 8001c94:	e000ed00 	.word	0xe000ed00

08001c98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c9c:	4b04      	ldr	r3, [pc, #16]	; (8001cb0 <__NVIC_GetPriorityGrouping+0x18>)
 8001c9e:	68db      	ldr	r3, [r3, #12]
 8001ca0:	0a1b      	lsrs	r3, r3, #8
 8001ca2:	f003 0307 	and.w	r3, r3, #7
}
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bc80      	pop	{r7}
 8001cac:	4770      	bx	lr
 8001cae:	bf00      	nop
 8001cb0:	e000ed00 	.word	0xe000ed00

08001cb4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	b083      	sub	sp, #12
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	4603      	mov	r3, r0
 8001cbc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	db0b      	blt.n	8001cde <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cc6:	79fb      	ldrb	r3, [r7, #7]
 8001cc8:	f003 021f 	and.w	r2, r3, #31
 8001ccc:	4906      	ldr	r1, [pc, #24]	; (8001ce8 <__NVIC_EnableIRQ+0x34>)
 8001cce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cd2:	095b      	lsrs	r3, r3, #5
 8001cd4:	2001      	movs	r0, #1
 8001cd6:	fa00 f202 	lsl.w	r2, r0, r2
 8001cda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001cde:	bf00      	nop
 8001ce0:	370c      	adds	r7, #12
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bc80      	pop	{r7}
 8001ce6:	4770      	bx	lr
 8001ce8:	e000e100 	.word	0xe000e100

08001cec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b083      	sub	sp, #12
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	6039      	str	r1, [r7, #0]
 8001cf6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cf8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	db0a      	blt.n	8001d16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	b2da      	uxtb	r2, r3
 8001d04:	490c      	ldr	r1, [pc, #48]	; (8001d38 <__NVIC_SetPriority+0x4c>)
 8001d06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d0a:	0112      	lsls	r2, r2, #4
 8001d0c:	b2d2      	uxtb	r2, r2
 8001d0e:	440b      	add	r3, r1
 8001d10:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d14:	e00a      	b.n	8001d2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	b2da      	uxtb	r2, r3
 8001d1a:	4908      	ldr	r1, [pc, #32]	; (8001d3c <__NVIC_SetPriority+0x50>)
 8001d1c:	79fb      	ldrb	r3, [r7, #7]
 8001d1e:	f003 030f 	and.w	r3, r3, #15
 8001d22:	3b04      	subs	r3, #4
 8001d24:	0112      	lsls	r2, r2, #4
 8001d26:	b2d2      	uxtb	r2, r2
 8001d28:	440b      	add	r3, r1
 8001d2a:	761a      	strb	r2, [r3, #24]
}
 8001d2c:	bf00      	nop
 8001d2e:	370c      	adds	r7, #12
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bc80      	pop	{r7}
 8001d34:	4770      	bx	lr
 8001d36:	bf00      	nop
 8001d38:	e000e100 	.word	0xe000e100
 8001d3c:	e000ed00 	.word	0xe000ed00

08001d40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b089      	sub	sp, #36	; 0x24
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	60f8      	str	r0, [r7, #12]
 8001d48:	60b9      	str	r1, [r7, #8]
 8001d4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	f003 0307 	and.w	r3, r3, #7
 8001d52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d54:	69fb      	ldr	r3, [r7, #28]
 8001d56:	f1c3 0307 	rsb	r3, r3, #7
 8001d5a:	2b04      	cmp	r3, #4
 8001d5c:	bf28      	it	cs
 8001d5e:	2304      	movcs	r3, #4
 8001d60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d62:	69fb      	ldr	r3, [r7, #28]
 8001d64:	3304      	adds	r3, #4
 8001d66:	2b06      	cmp	r3, #6
 8001d68:	d902      	bls.n	8001d70 <NVIC_EncodePriority+0x30>
 8001d6a:	69fb      	ldr	r3, [r7, #28]
 8001d6c:	3b03      	subs	r3, #3
 8001d6e:	e000      	b.n	8001d72 <NVIC_EncodePriority+0x32>
 8001d70:	2300      	movs	r3, #0
 8001d72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d74:	f04f 32ff 	mov.w	r2, #4294967295
 8001d78:	69bb      	ldr	r3, [r7, #24]
 8001d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7e:	43da      	mvns	r2, r3
 8001d80:	68bb      	ldr	r3, [r7, #8]
 8001d82:	401a      	ands	r2, r3
 8001d84:	697b      	ldr	r3, [r7, #20]
 8001d86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d88:	f04f 31ff 	mov.w	r1, #4294967295
 8001d8c:	697b      	ldr	r3, [r7, #20]
 8001d8e:	fa01 f303 	lsl.w	r3, r1, r3
 8001d92:	43d9      	mvns	r1, r3
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d98:	4313      	orrs	r3, r2
         );
}
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	3724      	adds	r7, #36	; 0x24
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bc80      	pop	{r7}
 8001da2:	4770      	bx	lr

08001da4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b082      	sub	sp, #8
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	3b01      	subs	r3, #1
 8001db0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001db4:	d301      	bcc.n	8001dba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001db6:	2301      	movs	r3, #1
 8001db8:	e00f      	b.n	8001dda <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001dba:	4a0a      	ldr	r2, [pc, #40]	; (8001de4 <SysTick_Config+0x40>)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	3b01      	subs	r3, #1
 8001dc0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001dc2:	210f      	movs	r1, #15
 8001dc4:	f04f 30ff 	mov.w	r0, #4294967295
 8001dc8:	f7ff ff90 	bl	8001cec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001dcc:	4b05      	ldr	r3, [pc, #20]	; (8001de4 <SysTick_Config+0x40>)
 8001dce:	2200      	movs	r2, #0
 8001dd0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001dd2:	4b04      	ldr	r3, [pc, #16]	; (8001de4 <SysTick_Config+0x40>)
 8001dd4:	2207      	movs	r2, #7
 8001dd6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001dd8:	2300      	movs	r3, #0
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	3708      	adds	r7, #8
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	bf00      	nop
 8001de4:	e000e010 	.word	0xe000e010

08001de8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b082      	sub	sp, #8
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001df0:	6878      	ldr	r0, [r7, #4]
 8001df2:	f7ff ff2d 	bl	8001c50 <__NVIC_SetPriorityGrouping>
}
 8001df6:	bf00      	nop
 8001df8:	3708      	adds	r7, #8
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}

08001dfe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001dfe:	b580      	push	{r7, lr}
 8001e00:	b086      	sub	sp, #24
 8001e02:	af00      	add	r7, sp, #0
 8001e04:	4603      	mov	r3, r0
 8001e06:	60b9      	str	r1, [r7, #8]
 8001e08:	607a      	str	r2, [r7, #4]
 8001e0a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e10:	f7ff ff42 	bl	8001c98 <__NVIC_GetPriorityGrouping>
 8001e14:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e16:	687a      	ldr	r2, [r7, #4]
 8001e18:	68b9      	ldr	r1, [r7, #8]
 8001e1a:	6978      	ldr	r0, [r7, #20]
 8001e1c:	f7ff ff90 	bl	8001d40 <NVIC_EncodePriority>
 8001e20:	4602      	mov	r2, r0
 8001e22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e26:	4611      	mov	r1, r2
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f7ff ff5f 	bl	8001cec <__NVIC_SetPriority>
}
 8001e2e:	bf00      	nop
 8001e30:	3718      	adds	r7, #24
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}

08001e36 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e36:	b580      	push	{r7, lr}
 8001e38:	b082      	sub	sp, #8
 8001e3a:	af00      	add	r7, sp, #0
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e44:	4618      	mov	r0, r3
 8001e46:	f7ff ff35 	bl	8001cb4 <__NVIC_EnableIRQ>
}
 8001e4a:	bf00      	nop
 8001e4c:	3708      	adds	r7, #8
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}

08001e52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e52:	b580      	push	{r7, lr}
 8001e54:	b082      	sub	sp, #8
 8001e56:	af00      	add	r7, sp, #0
 8001e58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e5a:	6878      	ldr	r0, [r7, #4]
 8001e5c:	f7ff ffa2 	bl	8001da4 <SysTick_Config>
 8001e60:	4603      	mov	r3, r0
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	3708      	adds	r7, #8
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}

08001e6a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001e6a:	b480      	push	{r7}
 8001e6c:	b085      	sub	sp, #20
 8001e6e:	af00      	add	r7, sp, #0
 8001e70:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e72:	2300      	movs	r3, #0
 8001e74:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001e7c:	2b02      	cmp	r3, #2
 8001e7e:	d008      	beq.n	8001e92 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2204      	movs	r2, #4
 8001e84:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2200      	movs	r2, #0
 8001e8a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	e020      	b.n	8001ed4 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	681a      	ldr	r2, [r3, #0]
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f022 020e 	bic.w	r2, r2, #14
 8001ea0:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	681a      	ldr	r2, [r3, #0]
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f022 0201 	bic.w	r2, r2, #1
 8001eb0:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001eba:	2101      	movs	r1, #1
 8001ebc:	fa01 f202 	lsl.w	r2, r1, r2
 8001ec0:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2201      	movs	r2, #1
 8001ec6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2200      	movs	r2, #0
 8001ece:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001ed2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	3714      	adds	r7, #20
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bc80      	pop	{r7}
 8001edc:	4770      	bx	lr
	...

08001ee0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b084      	sub	sp, #16
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001ef2:	2b02      	cmp	r3, #2
 8001ef4:	d005      	beq.n	8001f02 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2204      	movs	r2, #4
 8001efa:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001efc:	2301      	movs	r3, #1
 8001efe:	73fb      	strb	r3, [r7, #15]
 8001f00:	e051      	b.n	8001fa6 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	681a      	ldr	r2, [r3, #0]
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f022 020e 	bic.w	r2, r2, #14
 8001f10:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	681a      	ldr	r2, [r3, #0]
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f022 0201 	bic.w	r2, r2, #1
 8001f20:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4a22      	ldr	r2, [pc, #136]	; (8001fb0 <HAL_DMA_Abort_IT+0xd0>)
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	d029      	beq.n	8001f80 <HAL_DMA_Abort_IT+0xa0>
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4a20      	ldr	r2, [pc, #128]	; (8001fb4 <HAL_DMA_Abort_IT+0xd4>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d022      	beq.n	8001f7c <HAL_DMA_Abort_IT+0x9c>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4a1f      	ldr	r2, [pc, #124]	; (8001fb8 <HAL_DMA_Abort_IT+0xd8>)
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d01a      	beq.n	8001f76 <HAL_DMA_Abort_IT+0x96>
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a1d      	ldr	r2, [pc, #116]	; (8001fbc <HAL_DMA_Abort_IT+0xdc>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d012      	beq.n	8001f70 <HAL_DMA_Abort_IT+0x90>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4a1c      	ldr	r2, [pc, #112]	; (8001fc0 <HAL_DMA_Abort_IT+0xe0>)
 8001f50:	4293      	cmp	r3, r2
 8001f52:	d00a      	beq.n	8001f6a <HAL_DMA_Abort_IT+0x8a>
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4a1a      	ldr	r2, [pc, #104]	; (8001fc4 <HAL_DMA_Abort_IT+0xe4>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d102      	bne.n	8001f64 <HAL_DMA_Abort_IT+0x84>
 8001f5e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001f62:	e00e      	b.n	8001f82 <HAL_DMA_Abort_IT+0xa2>
 8001f64:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001f68:	e00b      	b.n	8001f82 <HAL_DMA_Abort_IT+0xa2>
 8001f6a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001f6e:	e008      	b.n	8001f82 <HAL_DMA_Abort_IT+0xa2>
 8001f70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f74:	e005      	b.n	8001f82 <HAL_DMA_Abort_IT+0xa2>
 8001f76:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f7a:	e002      	b.n	8001f82 <HAL_DMA_Abort_IT+0xa2>
 8001f7c:	2310      	movs	r3, #16
 8001f7e:	e000      	b.n	8001f82 <HAL_DMA_Abort_IT+0xa2>
 8001f80:	2301      	movs	r3, #1
 8001f82:	4a11      	ldr	r2, [pc, #68]	; (8001fc8 <HAL_DMA_Abort_IT+0xe8>)
 8001f84:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2201      	movs	r2, #1
 8001f8a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2200      	movs	r2, #0
 8001f92:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d003      	beq.n	8001fa6 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fa2:	6878      	ldr	r0, [r7, #4]
 8001fa4:	4798      	blx	r3
    } 
  }
  return status;
 8001fa6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fa8:	4618      	mov	r0, r3
 8001faa:	3710      	adds	r7, #16
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}
 8001fb0:	40020008 	.word	0x40020008
 8001fb4:	4002001c 	.word	0x4002001c
 8001fb8:	40020030 	.word	0x40020030
 8001fbc:	40020044 	.word	0x40020044
 8001fc0:	40020058 	.word	0x40020058
 8001fc4:	4002006c 	.word	0x4002006c
 8001fc8:	40020000 	.word	0x40020000

08001fcc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b08b      	sub	sp, #44	; 0x2c
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
 8001fd4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fde:	e161      	b.n	80022a4 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001fe0:	2201      	movs	r2, #1
 8001fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	69fa      	ldr	r2, [r7, #28]
 8001ff0:	4013      	ands	r3, r2
 8001ff2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001ff4:	69ba      	ldr	r2, [r7, #24]
 8001ff6:	69fb      	ldr	r3, [r7, #28]
 8001ff8:	429a      	cmp	r2, r3
 8001ffa:	f040 8150 	bne.w	800229e <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	4a97      	ldr	r2, [pc, #604]	; (8002260 <HAL_GPIO_Init+0x294>)
 8002004:	4293      	cmp	r3, r2
 8002006:	d05e      	beq.n	80020c6 <HAL_GPIO_Init+0xfa>
 8002008:	4a95      	ldr	r2, [pc, #596]	; (8002260 <HAL_GPIO_Init+0x294>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d875      	bhi.n	80020fa <HAL_GPIO_Init+0x12e>
 800200e:	4a95      	ldr	r2, [pc, #596]	; (8002264 <HAL_GPIO_Init+0x298>)
 8002010:	4293      	cmp	r3, r2
 8002012:	d058      	beq.n	80020c6 <HAL_GPIO_Init+0xfa>
 8002014:	4a93      	ldr	r2, [pc, #588]	; (8002264 <HAL_GPIO_Init+0x298>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d86f      	bhi.n	80020fa <HAL_GPIO_Init+0x12e>
 800201a:	4a93      	ldr	r2, [pc, #588]	; (8002268 <HAL_GPIO_Init+0x29c>)
 800201c:	4293      	cmp	r3, r2
 800201e:	d052      	beq.n	80020c6 <HAL_GPIO_Init+0xfa>
 8002020:	4a91      	ldr	r2, [pc, #580]	; (8002268 <HAL_GPIO_Init+0x29c>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d869      	bhi.n	80020fa <HAL_GPIO_Init+0x12e>
 8002026:	4a91      	ldr	r2, [pc, #580]	; (800226c <HAL_GPIO_Init+0x2a0>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d04c      	beq.n	80020c6 <HAL_GPIO_Init+0xfa>
 800202c:	4a8f      	ldr	r2, [pc, #572]	; (800226c <HAL_GPIO_Init+0x2a0>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d863      	bhi.n	80020fa <HAL_GPIO_Init+0x12e>
 8002032:	4a8f      	ldr	r2, [pc, #572]	; (8002270 <HAL_GPIO_Init+0x2a4>)
 8002034:	4293      	cmp	r3, r2
 8002036:	d046      	beq.n	80020c6 <HAL_GPIO_Init+0xfa>
 8002038:	4a8d      	ldr	r2, [pc, #564]	; (8002270 <HAL_GPIO_Init+0x2a4>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d85d      	bhi.n	80020fa <HAL_GPIO_Init+0x12e>
 800203e:	2b12      	cmp	r3, #18
 8002040:	d82a      	bhi.n	8002098 <HAL_GPIO_Init+0xcc>
 8002042:	2b12      	cmp	r3, #18
 8002044:	d859      	bhi.n	80020fa <HAL_GPIO_Init+0x12e>
 8002046:	a201      	add	r2, pc, #4	; (adr r2, 800204c <HAL_GPIO_Init+0x80>)
 8002048:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800204c:	080020c7 	.word	0x080020c7
 8002050:	080020a1 	.word	0x080020a1
 8002054:	080020b3 	.word	0x080020b3
 8002058:	080020f5 	.word	0x080020f5
 800205c:	080020fb 	.word	0x080020fb
 8002060:	080020fb 	.word	0x080020fb
 8002064:	080020fb 	.word	0x080020fb
 8002068:	080020fb 	.word	0x080020fb
 800206c:	080020fb 	.word	0x080020fb
 8002070:	080020fb 	.word	0x080020fb
 8002074:	080020fb 	.word	0x080020fb
 8002078:	080020fb 	.word	0x080020fb
 800207c:	080020fb 	.word	0x080020fb
 8002080:	080020fb 	.word	0x080020fb
 8002084:	080020fb 	.word	0x080020fb
 8002088:	080020fb 	.word	0x080020fb
 800208c:	080020fb 	.word	0x080020fb
 8002090:	080020a9 	.word	0x080020a9
 8002094:	080020bd 	.word	0x080020bd
 8002098:	4a76      	ldr	r2, [pc, #472]	; (8002274 <HAL_GPIO_Init+0x2a8>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d013      	beq.n	80020c6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800209e:	e02c      	b.n	80020fa <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	68db      	ldr	r3, [r3, #12]
 80020a4:	623b      	str	r3, [r7, #32]
          break;
 80020a6:	e029      	b.n	80020fc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	68db      	ldr	r3, [r3, #12]
 80020ac:	3304      	adds	r3, #4
 80020ae:	623b      	str	r3, [r7, #32]
          break;
 80020b0:	e024      	b.n	80020fc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	68db      	ldr	r3, [r3, #12]
 80020b6:	3308      	adds	r3, #8
 80020b8:	623b      	str	r3, [r7, #32]
          break;
 80020ba:	e01f      	b.n	80020fc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	68db      	ldr	r3, [r3, #12]
 80020c0:	330c      	adds	r3, #12
 80020c2:	623b      	str	r3, [r7, #32]
          break;
 80020c4:	e01a      	b.n	80020fc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	689b      	ldr	r3, [r3, #8]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d102      	bne.n	80020d4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80020ce:	2304      	movs	r3, #4
 80020d0:	623b      	str	r3, [r7, #32]
          break;
 80020d2:	e013      	b.n	80020fc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	689b      	ldr	r3, [r3, #8]
 80020d8:	2b01      	cmp	r3, #1
 80020da:	d105      	bne.n	80020e8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80020dc:	2308      	movs	r3, #8
 80020de:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	69fa      	ldr	r2, [r7, #28]
 80020e4:	611a      	str	r2, [r3, #16]
          break;
 80020e6:	e009      	b.n	80020fc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80020e8:	2308      	movs	r3, #8
 80020ea:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	69fa      	ldr	r2, [r7, #28]
 80020f0:	615a      	str	r2, [r3, #20]
          break;
 80020f2:	e003      	b.n	80020fc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80020f4:	2300      	movs	r3, #0
 80020f6:	623b      	str	r3, [r7, #32]
          break;
 80020f8:	e000      	b.n	80020fc <HAL_GPIO_Init+0x130>
          break;
 80020fa:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80020fc:	69bb      	ldr	r3, [r7, #24]
 80020fe:	2bff      	cmp	r3, #255	; 0xff
 8002100:	d801      	bhi.n	8002106 <HAL_GPIO_Init+0x13a>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	e001      	b.n	800210a <HAL_GPIO_Init+0x13e>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	3304      	adds	r3, #4
 800210a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800210c:	69bb      	ldr	r3, [r7, #24]
 800210e:	2bff      	cmp	r3, #255	; 0xff
 8002110:	d802      	bhi.n	8002118 <HAL_GPIO_Init+0x14c>
 8002112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002114:	009b      	lsls	r3, r3, #2
 8002116:	e002      	b.n	800211e <HAL_GPIO_Init+0x152>
 8002118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800211a:	3b08      	subs	r3, #8
 800211c:	009b      	lsls	r3, r3, #2
 800211e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002120:	697b      	ldr	r3, [r7, #20]
 8002122:	681a      	ldr	r2, [r3, #0]
 8002124:	210f      	movs	r1, #15
 8002126:	693b      	ldr	r3, [r7, #16]
 8002128:	fa01 f303 	lsl.w	r3, r1, r3
 800212c:	43db      	mvns	r3, r3
 800212e:	401a      	ands	r2, r3
 8002130:	6a39      	ldr	r1, [r7, #32]
 8002132:	693b      	ldr	r3, [r7, #16]
 8002134:	fa01 f303 	lsl.w	r3, r1, r3
 8002138:	431a      	orrs	r2, r3
 800213a:	697b      	ldr	r3, [r7, #20]
 800213c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002146:	2b00      	cmp	r3, #0
 8002148:	f000 80a9 	beq.w	800229e <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800214c:	4b4a      	ldr	r3, [pc, #296]	; (8002278 <HAL_GPIO_Init+0x2ac>)
 800214e:	699b      	ldr	r3, [r3, #24]
 8002150:	4a49      	ldr	r2, [pc, #292]	; (8002278 <HAL_GPIO_Init+0x2ac>)
 8002152:	f043 0301 	orr.w	r3, r3, #1
 8002156:	6193      	str	r3, [r2, #24]
 8002158:	4b47      	ldr	r3, [pc, #284]	; (8002278 <HAL_GPIO_Init+0x2ac>)
 800215a:	699b      	ldr	r3, [r3, #24]
 800215c:	f003 0301 	and.w	r3, r3, #1
 8002160:	60bb      	str	r3, [r7, #8]
 8002162:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002164:	4a45      	ldr	r2, [pc, #276]	; (800227c <HAL_GPIO_Init+0x2b0>)
 8002166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002168:	089b      	lsrs	r3, r3, #2
 800216a:	3302      	adds	r3, #2
 800216c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002170:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002174:	f003 0303 	and.w	r3, r3, #3
 8002178:	009b      	lsls	r3, r3, #2
 800217a:	220f      	movs	r2, #15
 800217c:	fa02 f303 	lsl.w	r3, r2, r3
 8002180:	43db      	mvns	r3, r3
 8002182:	68fa      	ldr	r2, [r7, #12]
 8002184:	4013      	ands	r3, r2
 8002186:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	4a3d      	ldr	r2, [pc, #244]	; (8002280 <HAL_GPIO_Init+0x2b4>)
 800218c:	4293      	cmp	r3, r2
 800218e:	d00d      	beq.n	80021ac <HAL_GPIO_Init+0x1e0>
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	4a3c      	ldr	r2, [pc, #240]	; (8002284 <HAL_GPIO_Init+0x2b8>)
 8002194:	4293      	cmp	r3, r2
 8002196:	d007      	beq.n	80021a8 <HAL_GPIO_Init+0x1dc>
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	4a3b      	ldr	r2, [pc, #236]	; (8002288 <HAL_GPIO_Init+0x2bc>)
 800219c:	4293      	cmp	r3, r2
 800219e:	d101      	bne.n	80021a4 <HAL_GPIO_Init+0x1d8>
 80021a0:	2302      	movs	r3, #2
 80021a2:	e004      	b.n	80021ae <HAL_GPIO_Init+0x1e2>
 80021a4:	2303      	movs	r3, #3
 80021a6:	e002      	b.n	80021ae <HAL_GPIO_Init+0x1e2>
 80021a8:	2301      	movs	r3, #1
 80021aa:	e000      	b.n	80021ae <HAL_GPIO_Init+0x1e2>
 80021ac:	2300      	movs	r3, #0
 80021ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021b0:	f002 0203 	and.w	r2, r2, #3
 80021b4:	0092      	lsls	r2, r2, #2
 80021b6:	4093      	lsls	r3, r2
 80021b8:	68fa      	ldr	r2, [r7, #12]
 80021ba:	4313      	orrs	r3, r2
 80021bc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80021be:	492f      	ldr	r1, [pc, #188]	; (800227c <HAL_GPIO_Init+0x2b0>)
 80021c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c2:	089b      	lsrs	r3, r3, #2
 80021c4:	3302      	adds	r3, #2
 80021c6:	68fa      	ldr	r2, [r7, #12]
 80021c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d006      	beq.n	80021e6 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80021d8:	4b2c      	ldr	r3, [pc, #176]	; (800228c <HAL_GPIO_Init+0x2c0>)
 80021da:	681a      	ldr	r2, [r3, #0]
 80021dc:	492b      	ldr	r1, [pc, #172]	; (800228c <HAL_GPIO_Init+0x2c0>)
 80021de:	69bb      	ldr	r3, [r7, #24]
 80021e0:	4313      	orrs	r3, r2
 80021e2:	600b      	str	r3, [r1, #0]
 80021e4:	e006      	b.n	80021f4 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80021e6:	4b29      	ldr	r3, [pc, #164]	; (800228c <HAL_GPIO_Init+0x2c0>)
 80021e8:	681a      	ldr	r2, [r3, #0]
 80021ea:	69bb      	ldr	r3, [r7, #24]
 80021ec:	43db      	mvns	r3, r3
 80021ee:	4927      	ldr	r1, [pc, #156]	; (800228c <HAL_GPIO_Init+0x2c0>)
 80021f0:	4013      	ands	r3, r2
 80021f2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d006      	beq.n	800220e <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002200:	4b22      	ldr	r3, [pc, #136]	; (800228c <HAL_GPIO_Init+0x2c0>)
 8002202:	685a      	ldr	r2, [r3, #4]
 8002204:	4921      	ldr	r1, [pc, #132]	; (800228c <HAL_GPIO_Init+0x2c0>)
 8002206:	69bb      	ldr	r3, [r7, #24]
 8002208:	4313      	orrs	r3, r2
 800220a:	604b      	str	r3, [r1, #4]
 800220c:	e006      	b.n	800221c <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800220e:	4b1f      	ldr	r3, [pc, #124]	; (800228c <HAL_GPIO_Init+0x2c0>)
 8002210:	685a      	ldr	r2, [r3, #4]
 8002212:	69bb      	ldr	r3, [r7, #24]
 8002214:	43db      	mvns	r3, r3
 8002216:	491d      	ldr	r1, [pc, #116]	; (800228c <HAL_GPIO_Init+0x2c0>)
 8002218:	4013      	ands	r3, r2
 800221a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002224:	2b00      	cmp	r3, #0
 8002226:	d006      	beq.n	8002236 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002228:	4b18      	ldr	r3, [pc, #96]	; (800228c <HAL_GPIO_Init+0x2c0>)
 800222a:	689a      	ldr	r2, [r3, #8]
 800222c:	4917      	ldr	r1, [pc, #92]	; (800228c <HAL_GPIO_Init+0x2c0>)
 800222e:	69bb      	ldr	r3, [r7, #24]
 8002230:	4313      	orrs	r3, r2
 8002232:	608b      	str	r3, [r1, #8]
 8002234:	e006      	b.n	8002244 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002236:	4b15      	ldr	r3, [pc, #84]	; (800228c <HAL_GPIO_Init+0x2c0>)
 8002238:	689a      	ldr	r2, [r3, #8]
 800223a:	69bb      	ldr	r3, [r7, #24]
 800223c:	43db      	mvns	r3, r3
 800223e:	4913      	ldr	r1, [pc, #76]	; (800228c <HAL_GPIO_Init+0x2c0>)
 8002240:	4013      	ands	r3, r2
 8002242:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800224c:	2b00      	cmp	r3, #0
 800224e:	d01f      	beq.n	8002290 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002250:	4b0e      	ldr	r3, [pc, #56]	; (800228c <HAL_GPIO_Init+0x2c0>)
 8002252:	68da      	ldr	r2, [r3, #12]
 8002254:	490d      	ldr	r1, [pc, #52]	; (800228c <HAL_GPIO_Init+0x2c0>)
 8002256:	69bb      	ldr	r3, [r7, #24]
 8002258:	4313      	orrs	r3, r2
 800225a:	60cb      	str	r3, [r1, #12]
 800225c:	e01f      	b.n	800229e <HAL_GPIO_Init+0x2d2>
 800225e:	bf00      	nop
 8002260:	10320000 	.word	0x10320000
 8002264:	10310000 	.word	0x10310000
 8002268:	10220000 	.word	0x10220000
 800226c:	10210000 	.word	0x10210000
 8002270:	10120000 	.word	0x10120000
 8002274:	10110000 	.word	0x10110000
 8002278:	40021000 	.word	0x40021000
 800227c:	40010000 	.word	0x40010000
 8002280:	40010800 	.word	0x40010800
 8002284:	40010c00 	.word	0x40010c00
 8002288:	40011000 	.word	0x40011000
 800228c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002290:	4b0b      	ldr	r3, [pc, #44]	; (80022c0 <HAL_GPIO_Init+0x2f4>)
 8002292:	68da      	ldr	r2, [r3, #12]
 8002294:	69bb      	ldr	r3, [r7, #24]
 8002296:	43db      	mvns	r3, r3
 8002298:	4909      	ldr	r1, [pc, #36]	; (80022c0 <HAL_GPIO_Init+0x2f4>)
 800229a:	4013      	ands	r3, r2
 800229c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800229e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022a0:	3301      	adds	r3, #1
 80022a2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	681a      	ldr	r2, [r3, #0]
 80022a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022aa:	fa22 f303 	lsr.w	r3, r2, r3
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	f47f ae96 	bne.w	8001fe0 <HAL_GPIO_Init+0x14>
  }
}
 80022b4:	bf00      	nop
 80022b6:	bf00      	nop
 80022b8:	372c      	adds	r7, #44	; 0x2c
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bc80      	pop	{r7}
 80022be:	4770      	bx	lr
 80022c0:	40010400 	.word	0x40010400

080022c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022c4:	b480      	push	{r7}
 80022c6:	b083      	sub	sp, #12
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
 80022cc:	460b      	mov	r3, r1
 80022ce:	807b      	strh	r3, [r7, #2]
 80022d0:	4613      	mov	r3, r2
 80022d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80022d4:	787b      	ldrb	r3, [r7, #1]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d003      	beq.n	80022e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80022da:	887a      	ldrh	r2, [r7, #2]
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80022e0:	e003      	b.n	80022ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80022e2:	887b      	ldrh	r3, [r7, #2]
 80022e4:	041a      	lsls	r2, r3, #16
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	611a      	str	r2, [r3, #16]
}
 80022ea:	bf00      	nop
 80022ec:	370c      	adds	r7, #12
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bc80      	pop	{r7}
 80022f2:	4770      	bx	lr

080022f4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80022f4:	b480      	push	{r7}
 80022f6:	b085      	sub	sp, #20
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
 80022fc:	460b      	mov	r3, r1
 80022fe:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	68db      	ldr	r3, [r3, #12]
 8002304:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002306:	887a      	ldrh	r2, [r7, #2]
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	4013      	ands	r3, r2
 800230c:	041a      	lsls	r2, r3, #16
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	43d9      	mvns	r1, r3
 8002312:	887b      	ldrh	r3, [r7, #2]
 8002314:	400b      	ands	r3, r1
 8002316:	431a      	orrs	r2, r3
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	611a      	str	r2, [r3, #16]
}
 800231c:	bf00      	nop
 800231e:	3714      	adds	r7, #20
 8002320:	46bd      	mov	sp, r7
 8002322:	bc80      	pop	{r7}
 8002324:	4770      	bx	lr
	...

08002328 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b086      	sub	sp, #24
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2b00      	cmp	r3, #0
 8002334:	d101      	bne.n	800233a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002336:	2301      	movs	r3, #1
 8002338:	e272      	b.n	8002820 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f003 0301 	and.w	r3, r3, #1
 8002342:	2b00      	cmp	r3, #0
 8002344:	f000 8087 	beq.w	8002456 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002348:	4b92      	ldr	r3, [pc, #584]	; (8002594 <HAL_RCC_OscConfig+0x26c>)
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	f003 030c 	and.w	r3, r3, #12
 8002350:	2b04      	cmp	r3, #4
 8002352:	d00c      	beq.n	800236e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002354:	4b8f      	ldr	r3, [pc, #572]	; (8002594 <HAL_RCC_OscConfig+0x26c>)
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	f003 030c 	and.w	r3, r3, #12
 800235c:	2b08      	cmp	r3, #8
 800235e:	d112      	bne.n	8002386 <HAL_RCC_OscConfig+0x5e>
 8002360:	4b8c      	ldr	r3, [pc, #560]	; (8002594 <HAL_RCC_OscConfig+0x26c>)
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002368:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800236c:	d10b      	bne.n	8002386 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800236e:	4b89      	ldr	r3, [pc, #548]	; (8002594 <HAL_RCC_OscConfig+0x26c>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002376:	2b00      	cmp	r3, #0
 8002378:	d06c      	beq.n	8002454 <HAL_RCC_OscConfig+0x12c>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d168      	bne.n	8002454 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002382:	2301      	movs	r3, #1
 8002384:	e24c      	b.n	8002820 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800238e:	d106      	bne.n	800239e <HAL_RCC_OscConfig+0x76>
 8002390:	4b80      	ldr	r3, [pc, #512]	; (8002594 <HAL_RCC_OscConfig+0x26c>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a7f      	ldr	r2, [pc, #508]	; (8002594 <HAL_RCC_OscConfig+0x26c>)
 8002396:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800239a:	6013      	str	r3, [r2, #0]
 800239c:	e02e      	b.n	80023fc <HAL_RCC_OscConfig+0xd4>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d10c      	bne.n	80023c0 <HAL_RCC_OscConfig+0x98>
 80023a6:	4b7b      	ldr	r3, [pc, #492]	; (8002594 <HAL_RCC_OscConfig+0x26c>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4a7a      	ldr	r2, [pc, #488]	; (8002594 <HAL_RCC_OscConfig+0x26c>)
 80023ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023b0:	6013      	str	r3, [r2, #0]
 80023b2:	4b78      	ldr	r3, [pc, #480]	; (8002594 <HAL_RCC_OscConfig+0x26c>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4a77      	ldr	r2, [pc, #476]	; (8002594 <HAL_RCC_OscConfig+0x26c>)
 80023b8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023bc:	6013      	str	r3, [r2, #0]
 80023be:	e01d      	b.n	80023fc <HAL_RCC_OscConfig+0xd4>
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80023c8:	d10c      	bne.n	80023e4 <HAL_RCC_OscConfig+0xbc>
 80023ca:	4b72      	ldr	r3, [pc, #456]	; (8002594 <HAL_RCC_OscConfig+0x26c>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4a71      	ldr	r2, [pc, #452]	; (8002594 <HAL_RCC_OscConfig+0x26c>)
 80023d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023d4:	6013      	str	r3, [r2, #0]
 80023d6:	4b6f      	ldr	r3, [pc, #444]	; (8002594 <HAL_RCC_OscConfig+0x26c>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4a6e      	ldr	r2, [pc, #440]	; (8002594 <HAL_RCC_OscConfig+0x26c>)
 80023dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023e0:	6013      	str	r3, [r2, #0]
 80023e2:	e00b      	b.n	80023fc <HAL_RCC_OscConfig+0xd4>
 80023e4:	4b6b      	ldr	r3, [pc, #428]	; (8002594 <HAL_RCC_OscConfig+0x26c>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4a6a      	ldr	r2, [pc, #424]	; (8002594 <HAL_RCC_OscConfig+0x26c>)
 80023ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023ee:	6013      	str	r3, [r2, #0]
 80023f0:	4b68      	ldr	r3, [pc, #416]	; (8002594 <HAL_RCC_OscConfig+0x26c>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4a67      	ldr	r2, [pc, #412]	; (8002594 <HAL_RCC_OscConfig+0x26c>)
 80023f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023fa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d013      	beq.n	800242c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002404:	f7fe ffea 	bl	80013dc <HAL_GetTick>
 8002408:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800240a:	e008      	b.n	800241e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800240c:	f7fe ffe6 	bl	80013dc <HAL_GetTick>
 8002410:	4602      	mov	r2, r0
 8002412:	693b      	ldr	r3, [r7, #16]
 8002414:	1ad3      	subs	r3, r2, r3
 8002416:	2b64      	cmp	r3, #100	; 0x64
 8002418:	d901      	bls.n	800241e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800241a:	2303      	movs	r3, #3
 800241c:	e200      	b.n	8002820 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800241e:	4b5d      	ldr	r3, [pc, #372]	; (8002594 <HAL_RCC_OscConfig+0x26c>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002426:	2b00      	cmp	r3, #0
 8002428:	d0f0      	beq.n	800240c <HAL_RCC_OscConfig+0xe4>
 800242a:	e014      	b.n	8002456 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800242c:	f7fe ffd6 	bl	80013dc <HAL_GetTick>
 8002430:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002432:	e008      	b.n	8002446 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002434:	f7fe ffd2 	bl	80013dc <HAL_GetTick>
 8002438:	4602      	mov	r2, r0
 800243a:	693b      	ldr	r3, [r7, #16]
 800243c:	1ad3      	subs	r3, r2, r3
 800243e:	2b64      	cmp	r3, #100	; 0x64
 8002440:	d901      	bls.n	8002446 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002442:	2303      	movs	r3, #3
 8002444:	e1ec      	b.n	8002820 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002446:	4b53      	ldr	r3, [pc, #332]	; (8002594 <HAL_RCC_OscConfig+0x26c>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800244e:	2b00      	cmp	r3, #0
 8002450:	d1f0      	bne.n	8002434 <HAL_RCC_OscConfig+0x10c>
 8002452:	e000      	b.n	8002456 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002454:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f003 0302 	and.w	r3, r3, #2
 800245e:	2b00      	cmp	r3, #0
 8002460:	d063      	beq.n	800252a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002462:	4b4c      	ldr	r3, [pc, #304]	; (8002594 <HAL_RCC_OscConfig+0x26c>)
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	f003 030c 	and.w	r3, r3, #12
 800246a:	2b00      	cmp	r3, #0
 800246c:	d00b      	beq.n	8002486 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800246e:	4b49      	ldr	r3, [pc, #292]	; (8002594 <HAL_RCC_OscConfig+0x26c>)
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	f003 030c 	and.w	r3, r3, #12
 8002476:	2b08      	cmp	r3, #8
 8002478:	d11c      	bne.n	80024b4 <HAL_RCC_OscConfig+0x18c>
 800247a:	4b46      	ldr	r3, [pc, #280]	; (8002594 <HAL_RCC_OscConfig+0x26c>)
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002482:	2b00      	cmp	r3, #0
 8002484:	d116      	bne.n	80024b4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002486:	4b43      	ldr	r3, [pc, #268]	; (8002594 <HAL_RCC_OscConfig+0x26c>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f003 0302 	and.w	r3, r3, #2
 800248e:	2b00      	cmp	r3, #0
 8002490:	d005      	beq.n	800249e <HAL_RCC_OscConfig+0x176>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	691b      	ldr	r3, [r3, #16]
 8002496:	2b01      	cmp	r3, #1
 8002498:	d001      	beq.n	800249e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800249a:	2301      	movs	r3, #1
 800249c:	e1c0      	b.n	8002820 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800249e:	4b3d      	ldr	r3, [pc, #244]	; (8002594 <HAL_RCC_OscConfig+0x26c>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	695b      	ldr	r3, [r3, #20]
 80024aa:	00db      	lsls	r3, r3, #3
 80024ac:	4939      	ldr	r1, [pc, #228]	; (8002594 <HAL_RCC_OscConfig+0x26c>)
 80024ae:	4313      	orrs	r3, r2
 80024b0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024b2:	e03a      	b.n	800252a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	691b      	ldr	r3, [r3, #16]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d020      	beq.n	80024fe <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024bc:	4b36      	ldr	r3, [pc, #216]	; (8002598 <HAL_RCC_OscConfig+0x270>)
 80024be:	2201      	movs	r2, #1
 80024c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024c2:	f7fe ff8b 	bl	80013dc <HAL_GetTick>
 80024c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024c8:	e008      	b.n	80024dc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024ca:	f7fe ff87 	bl	80013dc <HAL_GetTick>
 80024ce:	4602      	mov	r2, r0
 80024d0:	693b      	ldr	r3, [r7, #16]
 80024d2:	1ad3      	subs	r3, r2, r3
 80024d4:	2b02      	cmp	r3, #2
 80024d6:	d901      	bls.n	80024dc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80024d8:	2303      	movs	r3, #3
 80024da:	e1a1      	b.n	8002820 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024dc:	4b2d      	ldr	r3, [pc, #180]	; (8002594 <HAL_RCC_OscConfig+0x26c>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f003 0302 	and.w	r3, r3, #2
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d0f0      	beq.n	80024ca <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024e8:	4b2a      	ldr	r3, [pc, #168]	; (8002594 <HAL_RCC_OscConfig+0x26c>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	695b      	ldr	r3, [r3, #20]
 80024f4:	00db      	lsls	r3, r3, #3
 80024f6:	4927      	ldr	r1, [pc, #156]	; (8002594 <HAL_RCC_OscConfig+0x26c>)
 80024f8:	4313      	orrs	r3, r2
 80024fa:	600b      	str	r3, [r1, #0]
 80024fc:	e015      	b.n	800252a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024fe:	4b26      	ldr	r3, [pc, #152]	; (8002598 <HAL_RCC_OscConfig+0x270>)
 8002500:	2200      	movs	r2, #0
 8002502:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002504:	f7fe ff6a 	bl	80013dc <HAL_GetTick>
 8002508:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800250a:	e008      	b.n	800251e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800250c:	f7fe ff66 	bl	80013dc <HAL_GetTick>
 8002510:	4602      	mov	r2, r0
 8002512:	693b      	ldr	r3, [r7, #16]
 8002514:	1ad3      	subs	r3, r2, r3
 8002516:	2b02      	cmp	r3, #2
 8002518:	d901      	bls.n	800251e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800251a:	2303      	movs	r3, #3
 800251c:	e180      	b.n	8002820 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800251e:	4b1d      	ldr	r3, [pc, #116]	; (8002594 <HAL_RCC_OscConfig+0x26c>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f003 0302 	and.w	r3, r3, #2
 8002526:	2b00      	cmp	r3, #0
 8002528:	d1f0      	bne.n	800250c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f003 0308 	and.w	r3, r3, #8
 8002532:	2b00      	cmp	r3, #0
 8002534:	d03a      	beq.n	80025ac <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	699b      	ldr	r3, [r3, #24]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d019      	beq.n	8002572 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800253e:	4b17      	ldr	r3, [pc, #92]	; (800259c <HAL_RCC_OscConfig+0x274>)
 8002540:	2201      	movs	r2, #1
 8002542:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002544:	f7fe ff4a 	bl	80013dc <HAL_GetTick>
 8002548:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800254a:	e008      	b.n	800255e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800254c:	f7fe ff46 	bl	80013dc <HAL_GetTick>
 8002550:	4602      	mov	r2, r0
 8002552:	693b      	ldr	r3, [r7, #16]
 8002554:	1ad3      	subs	r3, r2, r3
 8002556:	2b02      	cmp	r3, #2
 8002558:	d901      	bls.n	800255e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800255a:	2303      	movs	r3, #3
 800255c:	e160      	b.n	8002820 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800255e:	4b0d      	ldr	r3, [pc, #52]	; (8002594 <HAL_RCC_OscConfig+0x26c>)
 8002560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002562:	f003 0302 	and.w	r3, r3, #2
 8002566:	2b00      	cmp	r3, #0
 8002568:	d0f0      	beq.n	800254c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800256a:	2001      	movs	r0, #1
 800256c:	f000 fad8 	bl	8002b20 <RCC_Delay>
 8002570:	e01c      	b.n	80025ac <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002572:	4b0a      	ldr	r3, [pc, #40]	; (800259c <HAL_RCC_OscConfig+0x274>)
 8002574:	2200      	movs	r2, #0
 8002576:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002578:	f7fe ff30 	bl	80013dc <HAL_GetTick>
 800257c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800257e:	e00f      	b.n	80025a0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002580:	f7fe ff2c 	bl	80013dc <HAL_GetTick>
 8002584:	4602      	mov	r2, r0
 8002586:	693b      	ldr	r3, [r7, #16]
 8002588:	1ad3      	subs	r3, r2, r3
 800258a:	2b02      	cmp	r3, #2
 800258c:	d908      	bls.n	80025a0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800258e:	2303      	movs	r3, #3
 8002590:	e146      	b.n	8002820 <HAL_RCC_OscConfig+0x4f8>
 8002592:	bf00      	nop
 8002594:	40021000 	.word	0x40021000
 8002598:	42420000 	.word	0x42420000
 800259c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025a0:	4b92      	ldr	r3, [pc, #584]	; (80027ec <HAL_RCC_OscConfig+0x4c4>)
 80025a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025a4:	f003 0302 	and.w	r3, r3, #2
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d1e9      	bne.n	8002580 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f003 0304 	and.w	r3, r3, #4
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	f000 80a6 	beq.w	8002706 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025ba:	2300      	movs	r3, #0
 80025bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025be:	4b8b      	ldr	r3, [pc, #556]	; (80027ec <HAL_RCC_OscConfig+0x4c4>)
 80025c0:	69db      	ldr	r3, [r3, #28]
 80025c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d10d      	bne.n	80025e6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025ca:	4b88      	ldr	r3, [pc, #544]	; (80027ec <HAL_RCC_OscConfig+0x4c4>)
 80025cc:	69db      	ldr	r3, [r3, #28]
 80025ce:	4a87      	ldr	r2, [pc, #540]	; (80027ec <HAL_RCC_OscConfig+0x4c4>)
 80025d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025d4:	61d3      	str	r3, [r2, #28]
 80025d6:	4b85      	ldr	r3, [pc, #532]	; (80027ec <HAL_RCC_OscConfig+0x4c4>)
 80025d8:	69db      	ldr	r3, [r3, #28]
 80025da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025de:	60bb      	str	r3, [r7, #8]
 80025e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025e2:	2301      	movs	r3, #1
 80025e4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025e6:	4b82      	ldr	r3, [pc, #520]	; (80027f0 <HAL_RCC_OscConfig+0x4c8>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d118      	bne.n	8002624 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80025f2:	4b7f      	ldr	r3, [pc, #508]	; (80027f0 <HAL_RCC_OscConfig+0x4c8>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4a7e      	ldr	r2, [pc, #504]	; (80027f0 <HAL_RCC_OscConfig+0x4c8>)
 80025f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025fe:	f7fe feed 	bl	80013dc <HAL_GetTick>
 8002602:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002604:	e008      	b.n	8002618 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002606:	f7fe fee9 	bl	80013dc <HAL_GetTick>
 800260a:	4602      	mov	r2, r0
 800260c:	693b      	ldr	r3, [r7, #16]
 800260e:	1ad3      	subs	r3, r2, r3
 8002610:	2b64      	cmp	r3, #100	; 0x64
 8002612:	d901      	bls.n	8002618 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002614:	2303      	movs	r3, #3
 8002616:	e103      	b.n	8002820 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002618:	4b75      	ldr	r3, [pc, #468]	; (80027f0 <HAL_RCC_OscConfig+0x4c8>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002620:	2b00      	cmp	r3, #0
 8002622:	d0f0      	beq.n	8002606 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	68db      	ldr	r3, [r3, #12]
 8002628:	2b01      	cmp	r3, #1
 800262a:	d106      	bne.n	800263a <HAL_RCC_OscConfig+0x312>
 800262c:	4b6f      	ldr	r3, [pc, #444]	; (80027ec <HAL_RCC_OscConfig+0x4c4>)
 800262e:	6a1b      	ldr	r3, [r3, #32]
 8002630:	4a6e      	ldr	r2, [pc, #440]	; (80027ec <HAL_RCC_OscConfig+0x4c4>)
 8002632:	f043 0301 	orr.w	r3, r3, #1
 8002636:	6213      	str	r3, [r2, #32]
 8002638:	e02d      	b.n	8002696 <HAL_RCC_OscConfig+0x36e>
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	68db      	ldr	r3, [r3, #12]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d10c      	bne.n	800265c <HAL_RCC_OscConfig+0x334>
 8002642:	4b6a      	ldr	r3, [pc, #424]	; (80027ec <HAL_RCC_OscConfig+0x4c4>)
 8002644:	6a1b      	ldr	r3, [r3, #32]
 8002646:	4a69      	ldr	r2, [pc, #420]	; (80027ec <HAL_RCC_OscConfig+0x4c4>)
 8002648:	f023 0301 	bic.w	r3, r3, #1
 800264c:	6213      	str	r3, [r2, #32]
 800264e:	4b67      	ldr	r3, [pc, #412]	; (80027ec <HAL_RCC_OscConfig+0x4c4>)
 8002650:	6a1b      	ldr	r3, [r3, #32]
 8002652:	4a66      	ldr	r2, [pc, #408]	; (80027ec <HAL_RCC_OscConfig+0x4c4>)
 8002654:	f023 0304 	bic.w	r3, r3, #4
 8002658:	6213      	str	r3, [r2, #32]
 800265a:	e01c      	b.n	8002696 <HAL_RCC_OscConfig+0x36e>
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	68db      	ldr	r3, [r3, #12]
 8002660:	2b05      	cmp	r3, #5
 8002662:	d10c      	bne.n	800267e <HAL_RCC_OscConfig+0x356>
 8002664:	4b61      	ldr	r3, [pc, #388]	; (80027ec <HAL_RCC_OscConfig+0x4c4>)
 8002666:	6a1b      	ldr	r3, [r3, #32]
 8002668:	4a60      	ldr	r2, [pc, #384]	; (80027ec <HAL_RCC_OscConfig+0x4c4>)
 800266a:	f043 0304 	orr.w	r3, r3, #4
 800266e:	6213      	str	r3, [r2, #32]
 8002670:	4b5e      	ldr	r3, [pc, #376]	; (80027ec <HAL_RCC_OscConfig+0x4c4>)
 8002672:	6a1b      	ldr	r3, [r3, #32]
 8002674:	4a5d      	ldr	r2, [pc, #372]	; (80027ec <HAL_RCC_OscConfig+0x4c4>)
 8002676:	f043 0301 	orr.w	r3, r3, #1
 800267a:	6213      	str	r3, [r2, #32]
 800267c:	e00b      	b.n	8002696 <HAL_RCC_OscConfig+0x36e>
 800267e:	4b5b      	ldr	r3, [pc, #364]	; (80027ec <HAL_RCC_OscConfig+0x4c4>)
 8002680:	6a1b      	ldr	r3, [r3, #32]
 8002682:	4a5a      	ldr	r2, [pc, #360]	; (80027ec <HAL_RCC_OscConfig+0x4c4>)
 8002684:	f023 0301 	bic.w	r3, r3, #1
 8002688:	6213      	str	r3, [r2, #32]
 800268a:	4b58      	ldr	r3, [pc, #352]	; (80027ec <HAL_RCC_OscConfig+0x4c4>)
 800268c:	6a1b      	ldr	r3, [r3, #32]
 800268e:	4a57      	ldr	r2, [pc, #348]	; (80027ec <HAL_RCC_OscConfig+0x4c4>)
 8002690:	f023 0304 	bic.w	r3, r3, #4
 8002694:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	68db      	ldr	r3, [r3, #12]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d015      	beq.n	80026ca <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800269e:	f7fe fe9d 	bl	80013dc <HAL_GetTick>
 80026a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026a4:	e00a      	b.n	80026bc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026a6:	f7fe fe99 	bl	80013dc <HAL_GetTick>
 80026aa:	4602      	mov	r2, r0
 80026ac:	693b      	ldr	r3, [r7, #16]
 80026ae:	1ad3      	subs	r3, r2, r3
 80026b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80026b4:	4293      	cmp	r3, r2
 80026b6:	d901      	bls.n	80026bc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80026b8:	2303      	movs	r3, #3
 80026ba:	e0b1      	b.n	8002820 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026bc:	4b4b      	ldr	r3, [pc, #300]	; (80027ec <HAL_RCC_OscConfig+0x4c4>)
 80026be:	6a1b      	ldr	r3, [r3, #32]
 80026c0:	f003 0302 	and.w	r3, r3, #2
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d0ee      	beq.n	80026a6 <HAL_RCC_OscConfig+0x37e>
 80026c8:	e014      	b.n	80026f4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026ca:	f7fe fe87 	bl	80013dc <HAL_GetTick>
 80026ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026d0:	e00a      	b.n	80026e8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026d2:	f7fe fe83 	bl	80013dc <HAL_GetTick>
 80026d6:	4602      	mov	r2, r0
 80026d8:	693b      	ldr	r3, [r7, #16]
 80026da:	1ad3      	subs	r3, r2, r3
 80026dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80026e0:	4293      	cmp	r3, r2
 80026e2:	d901      	bls.n	80026e8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80026e4:	2303      	movs	r3, #3
 80026e6:	e09b      	b.n	8002820 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026e8:	4b40      	ldr	r3, [pc, #256]	; (80027ec <HAL_RCC_OscConfig+0x4c4>)
 80026ea:	6a1b      	ldr	r3, [r3, #32]
 80026ec:	f003 0302 	and.w	r3, r3, #2
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d1ee      	bne.n	80026d2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80026f4:	7dfb      	ldrb	r3, [r7, #23]
 80026f6:	2b01      	cmp	r3, #1
 80026f8:	d105      	bne.n	8002706 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026fa:	4b3c      	ldr	r3, [pc, #240]	; (80027ec <HAL_RCC_OscConfig+0x4c4>)
 80026fc:	69db      	ldr	r3, [r3, #28]
 80026fe:	4a3b      	ldr	r2, [pc, #236]	; (80027ec <HAL_RCC_OscConfig+0x4c4>)
 8002700:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002704:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	69db      	ldr	r3, [r3, #28]
 800270a:	2b00      	cmp	r3, #0
 800270c:	f000 8087 	beq.w	800281e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002710:	4b36      	ldr	r3, [pc, #216]	; (80027ec <HAL_RCC_OscConfig+0x4c4>)
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	f003 030c 	and.w	r3, r3, #12
 8002718:	2b08      	cmp	r3, #8
 800271a:	d061      	beq.n	80027e0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	69db      	ldr	r3, [r3, #28]
 8002720:	2b02      	cmp	r3, #2
 8002722:	d146      	bne.n	80027b2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002724:	4b33      	ldr	r3, [pc, #204]	; (80027f4 <HAL_RCC_OscConfig+0x4cc>)
 8002726:	2200      	movs	r2, #0
 8002728:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800272a:	f7fe fe57 	bl	80013dc <HAL_GetTick>
 800272e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002730:	e008      	b.n	8002744 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002732:	f7fe fe53 	bl	80013dc <HAL_GetTick>
 8002736:	4602      	mov	r2, r0
 8002738:	693b      	ldr	r3, [r7, #16]
 800273a:	1ad3      	subs	r3, r2, r3
 800273c:	2b02      	cmp	r3, #2
 800273e:	d901      	bls.n	8002744 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002740:	2303      	movs	r3, #3
 8002742:	e06d      	b.n	8002820 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002744:	4b29      	ldr	r3, [pc, #164]	; (80027ec <HAL_RCC_OscConfig+0x4c4>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800274c:	2b00      	cmp	r3, #0
 800274e:	d1f0      	bne.n	8002732 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6a1b      	ldr	r3, [r3, #32]
 8002754:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002758:	d108      	bne.n	800276c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800275a:	4b24      	ldr	r3, [pc, #144]	; (80027ec <HAL_RCC_OscConfig+0x4c4>)
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	689b      	ldr	r3, [r3, #8]
 8002766:	4921      	ldr	r1, [pc, #132]	; (80027ec <HAL_RCC_OscConfig+0x4c4>)
 8002768:	4313      	orrs	r3, r2
 800276a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800276c:	4b1f      	ldr	r3, [pc, #124]	; (80027ec <HAL_RCC_OscConfig+0x4c4>)
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6a19      	ldr	r1, [r3, #32]
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800277c:	430b      	orrs	r3, r1
 800277e:	491b      	ldr	r1, [pc, #108]	; (80027ec <HAL_RCC_OscConfig+0x4c4>)
 8002780:	4313      	orrs	r3, r2
 8002782:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002784:	4b1b      	ldr	r3, [pc, #108]	; (80027f4 <HAL_RCC_OscConfig+0x4cc>)
 8002786:	2201      	movs	r2, #1
 8002788:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800278a:	f7fe fe27 	bl	80013dc <HAL_GetTick>
 800278e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002790:	e008      	b.n	80027a4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002792:	f7fe fe23 	bl	80013dc <HAL_GetTick>
 8002796:	4602      	mov	r2, r0
 8002798:	693b      	ldr	r3, [r7, #16]
 800279a:	1ad3      	subs	r3, r2, r3
 800279c:	2b02      	cmp	r3, #2
 800279e:	d901      	bls.n	80027a4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80027a0:	2303      	movs	r3, #3
 80027a2:	e03d      	b.n	8002820 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80027a4:	4b11      	ldr	r3, [pc, #68]	; (80027ec <HAL_RCC_OscConfig+0x4c4>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d0f0      	beq.n	8002792 <HAL_RCC_OscConfig+0x46a>
 80027b0:	e035      	b.n	800281e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027b2:	4b10      	ldr	r3, [pc, #64]	; (80027f4 <HAL_RCC_OscConfig+0x4cc>)
 80027b4:	2200      	movs	r2, #0
 80027b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027b8:	f7fe fe10 	bl	80013dc <HAL_GetTick>
 80027bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027be:	e008      	b.n	80027d2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027c0:	f7fe fe0c 	bl	80013dc <HAL_GetTick>
 80027c4:	4602      	mov	r2, r0
 80027c6:	693b      	ldr	r3, [r7, #16]
 80027c8:	1ad3      	subs	r3, r2, r3
 80027ca:	2b02      	cmp	r3, #2
 80027cc:	d901      	bls.n	80027d2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80027ce:	2303      	movs	r3, #3
 80027d0:	e026      	b.n	8002820 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027d2:	4b06      	ldr	r3, [pc, #24]	; (80027ec <HAL_RCC_OscConfig+0x4c4>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d1f0      	bne.n	80027c0 <HAL_RCC_OscConfig+0x498>
 80027de:	e01e      	b.n	800281e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	69db      	ldr	r3, [r3, #28]
 80027e4:	2b01      	cmp	r3, #1
 80027e6:	d107      	bne.n	80027f8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80027e8:	2301      	movs	r3, #1
 80027ea:	e019      	b.n	8002820 <HAL_RCC_OscConfig+0x4f8>
 80027ec:	40021000 	.word	0x40021000
 80027f0:	40007000 	.word	0x40007000
 80027f4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80027f8:	4b0b      	ldr	r3, [pc, #44]	; (8002828 <HAL_RCC_OscConfig+0x500>)
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6a1b      	ldr	r3, [r3, #32]
 8002808:	429a      	cmp	r2, r3
 800280a:	d106      	bne.n	800281a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002816:	429a      	cmp	r2, r3
 8002818:	d001      	beq.n	800281e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800281a:	2301      	movs	r3, #1
 800281c:	e000      	b.n	8002820 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800281e:	2300      	movs	r3, #0
}
 8002820:	4618      	mov	r0, r3
 8002822:	3718      	adds	r7, #24
 8002824:	46bd      	mov	sp, r7
 8002826:	bd80      	pop	{r7, pc}
 8002828:	40021000 	.word	0x40021000

0800282c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b084      	sub	sp, #16
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
 8002834:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d101      	bne.n	8002840 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800283c:	2301      	movs	r3, #1
 800283e:	e0d0      	b.n	80029e2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002840:	4b6a      	ldr	r3, [pc, #424]	; (80029ec <HAL_RCC_ClockConfig+0x1c0>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f003 0307 	and.w	r3, r3, #7
 8002848:	683a      	ldr	r2, [r7, #0]
 800284a:	429a      	cmp	r2, r3
 800284c:	d910      	bls.n	8002870 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800284e:	4b67      	ldr	r3, [pc, #412]	; (80029ec <HAL_RCC_ClockConfig+0x1c0>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f023 0207 	bic.w	r2, r3, #7
 8002856:	4965      	ldr	r1, [pc, #404]	; (80029ec <HAL_RCC_ClockConfig+0x1c0>)
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	4313      	orrs	r3, r2
 800285c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800285e:	4b63      	ldr	r3, [pc, #396]	; (80029ec <HAL_RCC_ClockConfig+0x1c0>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f003 0307 	and.w	r3, r3, #7
 8002866:	683a      	ldr	r2, [r7, #0]
 8002868:	429a      	cmp	r2, r3
 800286a:	d001      	beq.n	8002870 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800286c:	2301      	movs	r3, #1
 800286e:	e0b8      	b.n	80029e2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f003 0302 	and.w	r3, r3, #2
 8002878:	2b00      	cmp	r3, #0
 800287a:	d020      	beq.n	80028be <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f003 0304 	and.w	r3, r3, #4
 8002884:	2b00      	cmp	r3, #0
 8002886:	d005      	beq.n	8002894 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002888:	4b59      	ldr	r3, [pc, #356]	; (80029f0 <HAL_RCC_ClockConfig+0x1c4>)
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	4a58      	ldr	r2, [pc, #352]	; (80029f0 <HAL_RCC_ClockConfig+0x1c4>)
 800288e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002892:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f003 0308 	and.w	r3, r3, #8
 800289c:	2b00      	cmp	r3, #0
 800289e:	d005      	beq.n	80028ac <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80028a0:	4b53      	ldr	r3, [pc, #332]	; (80029f0 <HAL_RCC_ClockConfig+0x1c4>)
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	4a52      	ldr	r2, [pc, #328]	; (80029f0 <HAL_RCC_ClockConfig+0x1c4>)
 80028a6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80028aa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028ac:	4b50      	ldr	r3, [pc, #320]	; (80029f0 <HAL_RCC_ClockConfig+0x1c4>)
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	689b      	ldr	r3, [r3, #8]
 80028b8:	494d      	ldr	r1, [pc, #308]	; (80029f0 <HAL_RCC_ClockConfig+0x1c4>)
 80028ba:	4313      	orrs	r3, r2
 80028bc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f003 0301 	and.w	r3, r3, #1
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d040      	beq.n	800294c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	2b01      	cmp	r3, #1
 80028d0:	d107      	bne.n	80028e2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028d2:	4b47      	ldr	r3, [pc, #284]	; (80029f0 <HAL_RCC_ClockConfig+0x1c4>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d115      	bne.n	800290a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028de:	2301      	movs	r3, #1
 80028e0:	e07f      	b.n	80029e2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	2b02      	cmp	r3, #2
 80028e8:	d107      	bne.n	80028fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028ea:	4b41      	ldr	r3, [pc, #260]	; (80029f0 <HAL_RCC_ClockConfig+0x1c4>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d109      	bne.n	800290a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028f6:	2301      	movs	r3, #1
 80028f8:	e073      	b.n	80029e2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028fa:	4b3d      	ldr	r3, [pc, #244]	; (80029f0 <HAL_RCC_ClockConfig+0x1c4>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f003 0302 	and.w	r3, r3, #2
 8002902:	2b00      	cmp	r3, #0
 8002904:	d101      	bne.n	800290a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002906:	2301      	movs	r3, #1
 8002908:	e06b      	b.n	80029e2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800290a:	4b39      	ldr	r3, [pc, #228]	; (80029f0 <HAL_RCC_ClockConfig+0x1c4>)
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	f023 0203 	bic.w	r2, r3, #3
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	4936      	ldr	r1, [pc, #216]	; (80029f0 <HAL_RCC_ClockConfig+0x1c4>)
 8002918:	4313      	orrs	r3, r2
 800291a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800291c:	f7fe fd5e 	bl	80013dc <HAL_GetTick>
 8002920:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002922:	e00a      	b.n	800293a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002924:	f7fe fd5a 	bl	80013dc <HAL_GetTick>
 8002928:	4602      	mov	r2, r0
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	1ad3      	subs	r3, r2, r3
 800292e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002932:	4293      	cmp	r3, r2
 8002934:	d901      	bls.n	800293a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002936:	2303      	movs	r3, #3
 8002938:	e053      	b.n	80029e2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800293a:	4b2d      	ldr	r3, [pc, #180]	; (80029f0 <HAL_RCC_ClockConfig+0x1c4>)
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	f003 020c 	and.w	r2, r3, #12
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	009b      	lsls	r3, r3, #2
 8002948:	429a      	cmp	r2, r3
 800294a:	d1eb      	bne.n	8002924 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800294c:	4b27      	ldr	r3, [pc, #156]	; (80029ec <HAL_RCC_ClockConfig+0x1c0>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f003 0307 	and.w	r3, r3, #7
 8002954:	683a      	ldr	r2, [r7, #0]
 8002956:	429a      	cmp	r2, r3
 8002958:	d210      	bcs.n	800297c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800295a:	4b24      	ldr	r3, [pc, #144]	; (80029ec <HAL_RCC_ClockConfig+0x1c0>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f023 0207 	bic.w	r2, r3, #7
 8002962:	4922      	ldr	r1, [pc, #136]	; (80029ec <HAL_RCC_ClockConfig+0x1c0>)
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	4313      	orrs	r3, r2
 8002968:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800296a:	4b20      	ldr	r3, [pc, #128]	; (80029ec <HAL_RCC_ClockConfig+0x1c0>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f003 0307 	and.w	r3, r3, #7
 8002972:	683a      	ldr	r2, [r7, #0]
 8002974:	429a      	cmp	r2, r3
 8002976:	d001      	beq.n	800297c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002978:	2301      	movs	r3, #1
 800297a:	e032      	b.n	80029e2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f003 0304 	and.w	r3, r3, #4
 8002984:	2b00      	cmp	r3, #0
 8002986:	d008      	beq.n	800299a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002988:	4b19      	ldr	r3, [pc, #100]	; (80029f0 <HAL_RCC_ClockConfig+0x1c4>)
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	68db      	ldr	r3, [r3, #12]
 8002994:	4916      	ldr	r1, [pc, #88]	; (80029f0 <HAL_RCC_ClockConfig+0x1c4>)
 8002996:	4313      	orrs	r3, r2
 8002998:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f003 0308 	and.w	r3, r3, #8
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d009      	beq.n	80029ba <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80029a6:	4b12      	ldr	r3, [pc, #72]	; (80029f0 <HAL_RCC_ClockConfig+0x1c4>)
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	691b      	ldr	r3, [r3, #16]
 80029b2:	00db      	lsls	r3, r3, #3
 80029b4:	490e      	ldr	r1, [pc, #56]	; (80029f0 <HAL_RCC_ClockConfig+0x1c4>)
 80029b6:	4313      	orrs	r3, r2
 80029b8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80029ba:	f000 f821 	bl	8002a00 <HAL_RCC_GetSysClockFreq>
 80029be:	4602      	mov	r2, r0
 80029c0:	4b0b      	ldr	r3, [pc, #44]	; (80029f0 <HAL_RCC_ClockConfig+0x1c4>)
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	091b      	lsrs	r3, r3, #4
 80029c6:	f003 030f 	and.w	r3, r3, #15
 80029ca:	490a      	ldr	r1, [pc, #40]	; (80029f4 <HAL_RCC_ClockConfig+0x1c8>)
 80029cc:	5ccb      	ldrb	r3, [r1, r3]
 80029ce:	fa22 f303 	lsr.w	r3, r2, r3
 80029d2:	4a09      	ldr	r2, [pc, #36]	; (80029f8 <HAL_RCC_ClockConfig+0x1cc>)
 80029d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80029d6:	4b09      	ldr	r3, [pc, #36]	; (80029fc <HAL_RCC_ClockConfig+0x1d0>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4618      	mov	r0, r3
 80029dc:	f7fe fcbc 	bl	8001358 <HAL_InitTick>

  return HAL_OK;
 80029e0:	2300      	movs	r3, #0
}
 80029e2:	4618      	mov	r0, r3
 80029e4:	3710      	adds	r7, #16
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bd80      	pop	{r7, pc}
 80029ea:	bf00      	nop
 80029ec:	40022000 	.word	0x40022000
 80029f0:	40021000 	.word	0x40021000
 80029f4:	08004890 	.word	0x08004890
 80029f8:	20000004 	.word	0x20000004
 80029fc:	20000008 	.word	0x20000008

08002a00 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a00:	b490      	push	{r4, r7}
 8002a02:	b08a      	sub	sp, #40	; 0x28
 8002a04:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002a06:	4b29      	ldr	r3, [pc, #164]	; (8002aac <HAL_RCC_GetSysClockFreq+0xac>)
 8002a08:	1d3c      	adds	r4, r7, #4
 8002a0a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002a0c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002a10:	f240 2301 	movw	r3, #513	; 0x201
 8002a14:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002a16:	2300      	movs	r3, #0
 8002a18:	61fb      	str	r3, [r7, #28]
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	61bb      	str	r3, [r7, #24]
 8002a1e:	2300      	movs	r3, #0
 8002a20:	627b      	str	r3, [r7, #36]	; 0x24
 8002a22:	2300      	movs	r3, #0
 8002a24:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002a26:	2300      	movs	r3, #0
 8002a28:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002a2a:	4b21      	ldr	r3, [pc, #132]	; (8002ab0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002a30:	69fb      	ldr	r3, [r7, #28]
 8002a32:	f003 030c 	and.w	r3, r3, #12
 8002a36:	2b04      	cmp	r3, #4
 8002a38:	d002      	beq.n	8002a40 <HAL_RCC_GetSysClockFreq+0x40>
 8002a3a:	2b08      	cmp	r3, #8
 8002a3c:	d003      	beq.n	8002a46 <HAL_RCC_GetSysClockFreq+0x46>
 8002a3e:	e02b      	b.n	8002a98 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002a40:	4b1c      	ldr	r3, [pc, #112]	; (8002ab4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002a42:	623b      	str	r3, [r7, #32]
      break;
 8002a44:	e02b      	b.n	8002a9e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002a46:	69fb      	ldr	r3, [r7, #28]
 8002a48:	0c9b      	lsrs	r3, r3, #18
 8002a4a:	f003 030f 	and.w	r3, r3, #15
 8002a4e:	3328      	adds	r3, #40	; 0x28
 8002a50:	443b      	add	r3, r7
 8002a52:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002a56:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002a58:	69fb      	ldr	r3, [r7, #28]
 8002a5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d012      	beq.n	8002a88 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002a62:	4b13      	ldr	r3, [pc, #76]	; (8002ab0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	0c5b      	lsrs	r3, r3, #17
 8002a68:	f003 0301 	and.w	r3, r3, #1
 8002a6c:	3328      	adds	r3, #40	; 0x28
 8002a6e:	443b      	add	r3, r7
 8002a70:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002a74:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002a76:	697b      	ldr	r3, [r7, #20]
 8002a78:	4a0e      	ldr	r2, [pc, #56]	; (8002ab4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002a7a:	fb03 f202 	mul.w	r2, r3, r2
 8002a7e:	69bb      	ldr	r3, [r7, #24]
 8002a80:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a84:	627b      	str	r3, [r7, #36]	; 0x24
 8002a86:	e004      	b.n	8002a92 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002a88:	697b      	ldr	r3, [r7, #20]
 8002a8a:	4a0b      	ldr	r2, [pc, #44]	; (8002ab8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a8c:	fb02 f303 	mul.w	r3, r2, r3
 8002a90:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a94:	623b      	str	r3, [r7, #32]
      break;
 8002a96:	e002      	b.n	8002a9e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002a98:	4b06      	ldr	r3, [pc, #24]	; (8002ab4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002a9a:	623b      	str	r3, [r7, #32]
      break;
 8002a9c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a9e:	6a3b      	ldr	r3, [r7, #32]
}
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	3728      	adds	r7, #40	; 0x28
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bc90      	pop	{r4, r7}
 8002aa8:	4770      	bx	lr
 8002aaa:	bf00      	nop
 8002aac:	08004880 	.word	0x08004880
 8002ab0:	40021000 	.word	0x40021000
 8002ab4:	007a1200 	.word	0x007a1200
 8002ab8:	003d0900 	.word	0x003d0900

08002abc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002abc:	b480      	push	{r7}
 8002abe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ac0:	4b02      	ldr	r3, [pc, #8]	; (8002acc <HAL_RCC_GetHCLKFreq+0x10>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
}
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bc80      	pop	{r7}
 8002aca:	4770      	bx	lr
 8002acc:	20000004 	.word	0x20000004

08002ad0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002ad4:	f7ff fff2 	bl	8002abc <HAL_RCC_GetHCLKFreq>
 8002ad8:	4602      	mov	r2, r0
 8002ada:	4b05      	ldr	r3, [pc, #20]	; (8002af0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	0a1b      	lsrs	r3, r3, #8
 8002ae0:	f003 0307 	and.w	r3, r3, #7
 8002ae4:	4903      	ldr	r1, [pc, #12]	; (8002af4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ae6:	5ccb      	ldrb	r3, [r1, r3]
 8002ae8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002aec:	4618      	mov	r0, r3
 8002aee:	bd80      	pop	{r7, pc}
 8002af0:	40021000 	.word	0x40021000
 8002af4:	080048a0 	.word	0x080048a0

08002af8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002afc:	f7ff ffde 	bl	8002abc <HAL_RCC_GetHCLKFreq>
 8002b00:	4602      	mov	r2, r0
 8002b02:	4b05      	ldr	r3, [pc, #20]	; (8002b18 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	0adb      	lsrs	r3, r3, #11
 8002b08:	f003 0307 	and.w	r3, r3, #7
 8002b0c:	4903      	ldr	r1, [pc, #12]	; (8002b1c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b0e:	5ccb      	ldrb	r3, [r1, r3]
 8002b10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b14:	4618      	mov	r0, r3
 8002b16:	bd80      	pop	{r7, pc}
 8002b18:	40021000 	.word	0x40021000
 8002b1c:	080048a0 	.word	0x080048a0

08002b20 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002b20:	b480      	push	{r7}
 8002b22:	b085      	sub	sp, #20
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002b28:	4b0a      	ldr	r3, [pc, #40]	; (8002b54 <RCC_Delay+0x34>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4a0a      	ldr	r2, [pc, #40]	; (8002b58 <RCC_Delay+0x38>)
 8002b2e:	fba2 2303 	umull	r2, r3, r2, r3
 8002b32:	0a5b      	lsrs	r3, r3, #9
 8002b34:	687a      	ldr	r2, [r7, #4]
 8002b36:	fb02 f303 	mul.w	r3, r2, r3
 8002b3a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002b3c:	bf00      	nop
  }
  while (Delay --);
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	1e5a      	subs	r2, r3, #1
 8002b42:	60fa      	str	r2, [r7, #12]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d1f9      	bne.n	8002b3c <RCC_Delay+0x1c>
}
 8002b48:	bf00      	nop
 8002b4a:	bf00      	nop
 8002b4c:	3714      	adds	r7, #20
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bc80      	pop	{r7}
 8002b52:	4770      	bx	lr
 8002b54:	20000004 	.word	0x20000004
 8002b58:	10624dd3 	.word	0x10624dd3

08002b5c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b086      	sub	sp, #24
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002b64:	2300      	movs	r3, #0
 8002b66:	613b      	str	r3, [r7, #16]
 8002b68:	2300      	movs	r3, #0
 8002b6a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f003 0301 	and.w	r3, r3, #1
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d07d      	beq.n	8002c74 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b7c:	4b4f      	ldr	r3, [pc, #316]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b7e:	69db      	ldr	r3, [r3, #28]
 8002b80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d10d      	bne.n	8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b88:	4b4c      	ldr	r3, [pc, #304]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b8a:	69db      	ldr	r3, [r3, #28]
 8002b8c:	4a4b      	ldr	r2, [pc, #300]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b92:	61d3      	str	r3, [r2, #28]
 8002b94:	4b49      	ldr	r3, [pc, #292]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b96:	69db      	ldr	r3, [r3, #28]
 8002b98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b9c:	60bb      	str	r3, [r7, #8]
 8002b9e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ba4:	4b46      	ldr	r3, [pc, #280]	; (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d118      	bne.n	8002be2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002bb0:	4b43      	ldr	r3, [pc, #268]	; (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4a42      	ldr	r2, [pc, #264]	; (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002bb6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bba:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002bbc:	f7fe fc0e 	bl	80013dc <HAL_GetTick>
 8002bc0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bc2:	e008      	b.n	8002bd6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bc4:	f7fe fc0a 	bl	80013dc <HAL_GetTick>
 8002bc8:	4602      	mov	r2, r0
 8002bca:	693b      	ldr	r3, [r7, #16]
 8002bcc:	1ad3      	subs	r3, r2, r3
 8002bce:	2b64      	cmp	r3, #100	; 0x64
 8002bd0:	d901      	bls.n	8002bd6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002bd2:	2303      	movs	r3, #3
 8002bd4:	e06d      	b.n	8002cb2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bd6:	4b3a      	ldr	r3, [pc, #232]	; (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d0f0      	beq.n	8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002be2:	4b36      	ldr	r3, [pc, #216]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002be4:	6a1b      	ldr	r3, [r3, #32]
 8002be6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bea:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d02e      	beq.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bfa:	68fa      	ldr	r2, [r7, #12]
 8002bfc:	429a      	cmp	r2, r3
 8002bfe:	d027      	beq.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002c00:	4b2e      	ldr	r3, [pc, #184]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c02:	6a1b      	ldr	r3, [r3, #32]
 8002c04:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c08:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002c0a:	4b2e      	ldr	r3, [pc, #184]	; (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002c0c:	2201      	movs	r2, #1
 8002c0e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002c10:	4b2c      	ldr	r3, [pc, #176]	; (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002c12:	2200      	movs	r2, #0
 8002c14:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002c16:	4a29      	ldr	r2, [pc, #164]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	f003 0301 	and.w	r3, r3, #1
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d014      	beq.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c26:	f7fe fbd9 	bl	80013dc <HAL_GetTick>
 8002c2a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c2c:	e00a      	b.n	8002c44 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c2e:	f7fe fbd5 	bl	80013dc <HAL_GetTick>
 8002c32:	4602      	mov	r2, r0
 8002c34:	693b      	ldr	r3, [r7, #16]
 8002c36:	1ad3      	subs	r3, r2, r3
 8002c38:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d901      	bls.n	8002c44 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002c40:	2303      	movs	r3, #3
 8002c42:	e036      	b.n	8002cb2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c44:	4b1d      	ldr	r3, [pc, #116]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c46:	6a1b      	ldr	r3, [r3, #32]
 8002c48:	f003 0302 	and.w	r3, r3, #2
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d0ee      	beq.n	8002c2e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002c50:	4b1a      	ldr	r3, [pc, #104]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c52:	6a1b      	ldr	r3, [r3, #32]
 8002c54:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	4917      	ldr	r1, [pc, #92]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002c62:	7dfb      	ldrb	r3, [r7, #23]
 8002c64:	2b01      	cmp	r3, #1
 8002c66:	d105      	bne.n	8002c74 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c68:	4b14      	ldr	r3, [pc, #80]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c6a:	69db      	ldr	r3, [r3, #28]
 8002c6c:	4a13      	ldr	r2, [pc, #76]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c6e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c72:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f003 0302 	and.w	r3, r3, #2
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d008      	beq.n	8002c92 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002c80:	4b0e      	ldr	r3, [pc, #56]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	689b      	ldr	r3, [r3, #8]
 8002c8c:	490b      	ldr	r1, [pc, #44]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f003 0310 	and.w	r3, r3, #16
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d008      	beq.n	8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002c9e:	4b07      	ldr	r3, [pc, #28]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	68db      	ldr	r3, [r3, #12]
 8002caa:	4904      	ldr	r1, [pc, #16]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cac:	4313      	orrs	r3, r2
 8002cae:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002cb0:	2300      	movs	r3, #0
}
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	3718      	adds	r7, #24
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bd80      	pop	{r7, pc}
 8002cba:	bf00      	nop
 8002cbc:	40021000 	.word	0x40021000
 8002cc0:	40007000 	.word	0x40007000
 8002cc4:	42420440 	.word	0x42420440

08002cc8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b082      	sub	sp, #8
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d101      	bne.n	8002cda <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	e041      	b.n	8002d5e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ce0:	b2db      	uxtb	r3, r3
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d106      	bne.n	8002cf4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2200      	movs	r2, #0
 8002cea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002cee:	6878      	ldr	r0, [r7, #4]
 8002cf0:	f7fe f976 	bl	8000fe0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2202      	movs	r2, #2
 8002cf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681a      	ldr	r2, [r3, #0]
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	3304      	adds	r3, #4
 8002d04:	4619      	mov	r1, r3
 8002d06:	4610      	mov	r0, r2
 8002d08:	f000 fa6a 	bl	80031e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2201      	movs	r2, #1
 8002d10:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2201      	movs	r2, #1
 8002d18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2201      	movs	r2, #1
 8002d20:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2201      	movs	r2, #1
 8002d28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2201      	movs	r2, #1
 8002d30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2201      	movs	r2, #1
 8002d38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2201      	movs	r2, #1
 8002d40:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2201      	movs	r2, #1
 8002d48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2201      	movs	r2, #1
 8002d50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2201      	movs	r2, #1
 8002d58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002d5c:	2300      	movs	r3, #0
}
 8002d5e:	4618      	mov	r0, r3
 8002d60:	3708      	adds	r7, #8
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd80      	pop	{r7, pc}
	...

08002d68 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b085      	sub	sp, #20
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d76:	b2db      	uxtb	r3, r3
 8002d78:	2b01      	cmp	r3, #1
 8002d7a:	d001      	beq.n	8002d80 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	e035      	b.n	8002dec <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2202      	movs	r2, #2
 8002d84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	68da      	ldr	r2, [r3, #12]
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f042 0201 	orr.w	r2, r2, #1
 8002d96:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4a16      	ldr	r2, [pc, #88]	; (8002df8 <HAL_TIM_Base_Start_IT+0x90>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d009      	beq.n	8002db6 <HAL_TIM_Base_Start_IT+0x4e>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002daa:	d004      	beq.n	8002db6 <HAL_TIM_Base_Start_IT+0x4e>
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4a12      	ldr	r2, [pc, #72]	; (8002dfc <HAL_TIM_Base_Start_IT+0x94>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d111      	bne.n	8002dda <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	689b      	ldr	r3, [r3, #8]
 8002dbc:	f003 0307 	and.w	r3, r3, #7
 8002dc0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	2b06      	cmp	r3, #6
 8002dc6:	d010      	beq.n	8002dea <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	681a      	ldr	r2, [r3, #0]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f042 0201 	orr.w	r2, r2, #1
 8002dd6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002dd8:	e007      	b.n	8002dea <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	681a      	ldr	r2, [r3, #0]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f042 0201 	orr.w	r2, r2, #1
 8002de8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002dea:	2300      	movs	r3, #0
}
 8002dec:	4618      	mov	r0, r3
 8002dee:	3714      	adds	r7, #20
 8002df0:	46bd      	mov	sp, r7
 8002df2:	bc80      	pop	{r7}
 8002df4:	4770      	bx	lr
 8002df6:	bf00      	nop
 8002df8:	40012c00 	.word	0x40012c00
 8002dfc:	40000400 	.word	0x40000400

08002e00 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b082      	sub	sp, #8
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	691b      	ldr	r3, [r3, #16]
 8002e0e:	f003 0302 	and.w	r3, r3, #2
 8002e12:	2b02      	cmp	r3, #2
 8002e14:	d122      	bne.n	8002e5c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	68db      	ldr	r3, [r3, #12]
 8002e1c:	f003 0302 	and.w	r3, r3, #2
 8002e20:	2b02      	cmp	r3, #2
 8002e22:	d11b      	bne.n	8002e5c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f06f 0202 	mvn.w	r2, #2
 8002e2c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2201      	movs	r2, #1
 8002e32:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	699b      	ldr	r3, [r3, #24]
 8002e3a:	f003 0303 	and.w	r3, r3, #3
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d003      	beq.n	8002e4a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002e42:	6878      	ldr	r0, [r7, #4]
 8002e44:	f000 f9b1 	bl	80031aa <HAL_TIM_IC_CaptureCallback>
 8002e48:	e005      	b.n	8002e56 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e4a:	6878      	ldr	r0, [r7, #4]
 8002e4c:	f000 f9a4 	bl	8003198 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e50:	6878      	ldr	r0, [r7, #4]
 8002e52:	f000 f9b3 	bl	80031bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2200      	movs	r2, #0
 8002e5a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	691b      	ldr	r3, [r3, #16]
 8002e62:	f003 0304 	and.w	r3, r3, #4
 8002e66:	2b04      	cmp	r3, #4
 8002e68:	d122      	bne.n	8002eb0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	68db      	ldr	r3, [r3, #12]
 8002e70:	f003 0304 	and.w	r3, r3, #4
 8002e74:	2b04      	cmp	r3, #4
 8002e76:	d11b      	bne.n	8002eb0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f06f 0204 	mvn.w	r2, #4
 8002e80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2202      	movs	r2, #2
 8002e86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	699b      	ldr	r3, [r3, #24]
 8002e8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d003      	beq.n	8002e9e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e96:	6878      	ldr	r0, [r7, #4]
 8002e98:	f000 f987 	bl	80031aa <HAL_TIM_IC_CaptureCallback>
 8002e9c:	e005      	b.n	8002eaa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e9e:	6878      	ldr	r0, [r7, #4]
 8002ea0:	f000 f97a 	bl	8003198 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ea4:	6878      	ldr	r0, [r7, #4]
 8002ea6:	f000 f989 	bl	80031bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2200      	movs	r2, #0
 8002eae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	691b      	ldr	r3, [r3, #16]
 8002eb6:	f003 0308 	and.w	r3, r3, #8
 8002eba:	2b08      	cmp	r3, #8
 8002ebc:	d122      	bne.n	8002f04 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	68db      	ldr	r3, [r3, #12]
 8002ec4:	f003 0308 	and.w	r3, r3, #8
 8002ec8:	2b08      	cmp	r3, #8
 8002eca:	d11b      	bne.n	8002f04 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f06f 0208 	mvn.w	r2, #8
 8002ed4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2204      	movs	r2, #4
 8002eda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	69db      	ldr	r3, [r3, #28]
 8002ee2:	f003 0303 	and.w	r3, r3, #3
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d003      	beq.n	8002ef2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002eea:	6878      	ldr	r0, [r7, #4]
 8002eec:	f000 f95d 	bl	80031aa <HAL_TIM_IC_CaptureCallback>
 8002ef0:	e005      	b.n	8002efe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ef2:	6878      	ldr	r0, [r7, #4]
 8002ef4:	f000 f950 	bl	8003198 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ef8:	6878      	ldr	r0, [r7, #4]
 8002efa:	f000 f95f 	bl	80031bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2200      	movs	r2, #0
 8002f02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	691b      	ldr	r3, [r3, #16]
 8002f0a:	f003 0310 	and.w	r3, r3, #16
 8002f0e:	2b10      	cmp	r3, #16
 8002f10:	d122      	bne.n	8002f58 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	68db      	ldr	r3, [r3, #12]
 8002f18:	f003 0310 	and.w	r3, r3, #16
 8002f1c:	2b10      	cmp	r3, #16
 8002f1e:	d11b      	bne.n	8002f58 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f06f 0210 	mvn.w	r2, #16
 8002f28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2208      	movs	r2, #8
 8002f2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	69db      	ldr	r3, [r3, #28]
 8002f36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d003      	beq.n	8002f46 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f3e:	6878      	ldr	r0, [r7, #4]
 8002f40:	f000 f933 	bl	80031aa <HAL_TIM_IC_CaptureCallback>
 8002f44:	e005      	b.n	8002f52 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f46:	6878      	ldr	r0, [r7, #4]
 8002f48:	f000 f926 	bl	8003198 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f4c:	6878      	ldr	r0, [r7, #4]
 8002f4e:	f000 f935 	bl	80031bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2200      	movs	r2, #0
 8002f56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	691b      	ldr	r3, [r3, #16]
 8002f5e:	f003 0301 	and.w	r3, r3, #1
 8002f62:	2b01      	cmp	r3, #1
 8002f64:	d10e      	bne.n	8002f84 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	68db      	ldr	r3, [r3, #12]
 8002f6c:	f003 0301 	and.w	r3, r3, #1
 8002f70:	2b01      	cmp	r3, #1
 8002f72:	d107      	bne.n	8002f84 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f06f 0201 	mvn.w	r2, #1
 8002f7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002f7e:	6878      	ldr	r0, [r7, #4]
 8002f80:	f7fd ff46 	bl	8000e10 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	691b      	ldr	r3, [r3, #16]
 8002f8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f8e:	2b80      	cmp	r3, #128	; 0x80
 8002f90:	d10e      	bne.n	8002fb0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	68db      	ldr	r3, [r3, #12]
 8002f98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f9c:	2b80      	cmp	r3, #128	; 0x80
 8002f9e:	d107      	bne.n	8002fb0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002fa8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002faa:	6878      	ldr	r0, [r7, #4]
 8002fac:	f000 fa67 	bl	800347e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	691b      	ldr	r3, [r3, #16]
 8002fb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fba:	2b40      	cmp	r3, #64	; 0x40
 8002fbc:	d10e      	bne.n	8002fdc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	68db      	ldr	r3, [r3, #12]
 8002fc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fc8:	2b40      	cmp	r3, #64	; 0x40
 8002fca:	d107      	bne.n	8002fdc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002fd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002fd6:	6878      	ldr	r0, [r7, #4]
 8002fd8:	f000 f8f9 	bl	80031ce <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	691b      	ldr	r3, [r3, #16]
 8002fe2:	f003 0320 	and.w	r3, r3, #32
 8002fe6:	2b20      	cmp	r3, #32
 8002fe8:	d10e      	bne.n	8003008 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	68db      	ldr	r3, [r3, #12]
 8002ff0:	f003 0320 	and.w	r3, r3, #32
 8002ff4:	2b20      	cmp	r3, #32
 8002ff6:	d107      	bne.n	8003008 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f06f 0220 	mvn.w	r2, #32
 8003000:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003002:	6878      	ldr	r0, [r7, #4]
 8003004:	f000 fa32 	bl	800346c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003008:	bf00      	nop
 800300a:	3708      	adds	r7, #8
 800300c:	46bd      	mov	sp, r7
 800300e:	bd80      	pop	{r7, pc}

08003010 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b084      	sub	sp, #16
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
 8003018:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003020:	2b01      	cmp	r3, #1
 8003022:	d101      	bne.n	8003028 <HAL_TIM_ConfigClockSource+0x18>
 8003024:	2302      	movs	r3, #2
 8003026:	e0b3      	b.n	8003190 <HAL_TIM_ConfigClockSource+0x180>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2201      	movs	r2, #1
 800302c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2202      	movs	r2, #2
 8003034:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	689b      	ldr	r3, [r3, #8]
 800303e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003046:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800304e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	68fa      	ldr	r2, [r7, #12]
 8003056:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003060:	d03e      	beq.n	80030e0 <HAL_TIM_ConfigClockSource+0xd0>
 8003062:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003066:	f200 8087 	bhi.w	8003178 <HAL_TIM_ConfigClockSource+0x168>
 800306a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800306e:	f000 8085 	beq.w	800317c <HAL_TIM_ConfigClockSource+0x16c>
 8003072:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003076:	d87f      	bhi.n	8003178 <HAL_TIM_ConfigClockSource+0x168>
 8003078:	2b70      	cmp	r3, #112	; 0x70
 800307a:	d01a      	beq.n	80030b2 <HAL_TIM_ConfigClockSource+0xa2>
 800307c:	2b70      	cmp	r3, #112	; 0x70
 800307e:	d87b      	bhi.n	8003178 <HAL_TIM_ConfigClockSource+0x168>
 8003080:	2b60      	cmp	r3, #96	; 0x60
 8003082:	d050      	beq.n	8003126 <HAL_TIM_ConfigClockSource+0x116>
 8003084:	2b60      	cmp	r3, #96	; 0x60
 8003086:	d877      	bhi.n	8003178 <HAL_TIM_ConfigClockSource+0x168>
 8003088:	2b50      	cmp	r3, #80	; 0x50
 800308a:	d03c      	beq.n	8003106 <HAL_TIM_ConfigClockSource+0xf6>
 800308c:	2b50      	cmp	r3, #80	; 0x50
 800308e:	d873      	bhi.n	8003178 <HAL_TIM_ConfigClockSource+0x168>
 8003090:	2b40      	cmp	r3, #64	; 0x40
 8003092:	d058      	beq.n	8003146 <HAL_TIM_ConfigClockSource+0x136>
 8003094:	2b40      	cmp	r3, #64	; 0x40
 8003096:	d86f      	bhi.n	8003178 <HAL_TIM_ConfigClockSource+0x168>
 8003098:	2b30      	cmp	r3, #48	; 0x30
 800309a:	d064      	beq.n	8003166 <HAL_TIM_ConfigClockSource+0x156>
 800309c:	2b30      	cmp	r3, #48	; 0x30
 800309e:	d86b      	bhi.n	8003178 <HAL_TIM_ConfigClockSource+0x168>
 80030a0:	2b20      	cmp	r3, #32
 80030a2:	d060      	beq.n	8003166 <HAL_TIM_ConfigClockSource+0x156>
 80030a4:	2b20      	cmp	r3, #32
 80030a6:	d867      	bhi.n	8003178 <HAL_TIM_ConfigClockSource+0x168>
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d05c      	beq.n	8003166 <HAL_TIM_ConfigClockSource+0x156>
 80030ac:	2b10      	cmp	r3, #16
 80030ae:	d05a      	beq.n	8003166 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80030b0:	e062      	b.n	8003178 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6818      	ldr	r0, [r3, #0]
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	6899      	ldr	r1, [r3, #8]
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	685a      	ldr	r2, [r3, #4]
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	68db      	ldr	r3, [r3, #12]
 80030c2:	f000 f95c 	bl	800337e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	689b      	ldr	r3, [r3, #8]
 80030cc:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80030d4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	68fa      	ldr	r2, [r7, #12]
 80030dc:	609a      	str	r2, [r3, #8]
      break;
 80030de:	e04e      	b.n	800317e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6818      	ldr	r0, [r3, #0]
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	6899      	ldr	r1, [r3, #8]
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	685a      	ldr	r2, [r3, #4]
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	68db      	ldr	r3, [r3, #12]
 80030f0:	f000 f945 	bl	800337e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	689a      	ldr	r2, [r3, #8]
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003102:	609a      	str	r2, [r3, #8]
      break;
 8003104:	e03b      	b.n	800317e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6818      	ldr	r0, [r3, #0]
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	6859      	ldr	r1, [r3, #4]
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	68db      	ldr	r3, [r3, #12]
 8003112:	461a      	mov	r2, r3
 8003114:	f000 f8bc 	bl	8003290 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	2150      	movs	r1, #80	; 0x50
 800311e:	4618      	mov	r0, r3
 8003120:	f000 f913 	bl	800334a <TIM_ITRx_SetConfig>
      break;
 8003124:	e02b      	b.n	800317e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6818      	ldr	r0, [r3, #0]
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	6859      	ldr	r1, [r3, #4]
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	68db      	ldr	r3, [r3, #12]
 8003132:	461a      	mov	r2, r3
 8003134:	f000 f8da 	bl	80032ec <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	2160      	movs	r1, #96	; 0x60
 800313e:	4618      	mov	r0, r3
 8003140:	f000 f903 	bl	800334a <TIM_ITRx_SetConfig>
      break;
 8003144:	e01b      	b.n	800317e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6818      	ldr	r0, [r3, #0]
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	6859      	ldr	r1, [r3, #4]
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	68db      	ldr	r3, [r3, #12]
 8003152:	461a      	mov	r2, r3
 8003154:	f000 f89c 	bl	8003290 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	2140      	movs	r1, #64	; 0x40
 800315e:	4618      	mov	r0, r3
 8003160:	f000 f8f3 	bl	800334a <TIM_ITRx_SetConfig>
      break;
 8003164:	e00b      	b.n	800317e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681a      	ldr	r2, [r3, #0]
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4619      	mov	r1, r3
 8003170:	4610      	mov	r0, r2
 8003172:	f000 f8ea 	bl	800334a <TIM_ITRx_SetConfig>
        break;
 8003176:	e002      	b.n	800317e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003178:	bf00      	nop
 800317a:	e000      	b.n	800317e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800317c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2201      	movs	r2, #1
 8003182:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2200      	movs	r2, #0
 800318a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800318e:	2300      	movs	r3, #0
}
 8003190:	4618      	mov	r0, r3
 8003192:	3710      	adds	r7, #16
 8003194:	46bd      	mov	sp, r7
 8003196:	bd80      	pop	{r7, pc}

08003198 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003198:	b480      	push	{r7}
 800319a:	b083      	sub	sp, #12
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80031a0:	bf00      	nop
 80031a2:	370c      	adds	r7, #12
 80031a4:	46bd      	mov	sp, r7
 80031a6:	bc80      	pop	{r7}
 80031a8:	4770      	bx	lr

080031aa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80031aa:	b480      	push	{r7}
 80031ac:	b083      	sub	sp, #12
 80031ae:	af00      	add	r7, sp, #0
 80031b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80031b2:	bf00      	nop
 80031b4:	370c      	adds	r7, #12
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bc80      	pop	{r7}
 80031ba:	4770      	bx	lr

080031bc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80031bc:	b480      	push	{r7}
 80031be:	b083      	sub	sp, #12
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80031c4:	bf00      	nop
 80031c6:	370c      	adds	r7, #12
 80031c8:	46bd      	mov	sp, r7
 80031ca:	bc80      	pop	{r7}
 80031cc:	4770      	bx	lr

080031ce <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80031ce:	b480      	push	{r7}
 80031d0:	b083      	sub	sp, #12
 80031d2:	af00      	add	r7, sp, #0
 80031d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80031d6:	bf00      	nop
 80031d8:	370c      	adds	r7, #12
 80031da:	46bd      	mov	sp, r7
 80031dc:	bc80      	pop	{r7}
 80031de:	4770      	bx	lr

080031e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80031e0:	b480      	push	{r7}
 80031e2:	b085      	sub	sp, #20
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
 80031e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	4a25      	ldr	r2, [pc, #148]	; (8003288 <TIM_Base_SetConfig+0xa8>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d007      	beq.n	8003208 <TIM_Base_SetConfig+0x28>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031fe:	d003      	beq.n	8003208 <TIM_Base_SetConfig+0x28>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	4a22      	ldr	r2, [pc, #136]	; (800328c <TIM_Base_SetConfig+0xac>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d108      	bne.n	800321a <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800320e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	68fa      	ldr	r2, [r7, #12]
 8003216:	4313      	orrs	r3, r2
 8003218:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	4a1a      	ldr	r2, [pc, #104]	; (8003288 <TIM_Base_SetConfig+0xa8>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d007      	beq.n	8003232 <TIM_Base_SetConfig+0x52>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003228:	d003      	beq.n	8003232 <TIM_Base_SetConfig+0x52>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	4a17      	ldr	r2, [pc, #92]	; (800328c <TIM_Base_SetConfig+0xac>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d108      	bne.n	8003244 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003238:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	68db      	ldr	r3, [r3, #12]
 800323e:	68fa      	ldr	r2, [r7, #12]
 8003240:	4313      	orrs	r3, r2
 8003242:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	695b      	ldr	r3, [r3, #20]
 800324e:	4313      	orrs	r3, r2
 8003250:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	68fa      	ldr	r2, [r7, #12]
 8003256:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	689a      	ldr	r2, [r3, #8]
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	681a      	ldr	r2, [r3, #0]
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	4a07      	ldr	r2, [pc, #28]	; (8003288 <TIM_Base_SetConfig+0xa8>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d103      	bne.n	8003278 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	691a      	ldr	r2, [r3, #16]
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2201      	movs	r2, #1
 800327c:	615a      	str	r2, [r3, #20]
}
 800327e:	bf00      	nop
 8003280:	3714      	adds	r7, #20
 8003282:	46bd      	mov	sp, r7
 8003284:	bc80      	pop	{r7}
 8003286:	4770      	bx	lr
 8003288:	40012c00 	.word	0x40012c00
 800328c:	40000400 	.word	0x40000400

08003290 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003290:	b480      	push	{r7}
 8003292:	b087      	sub	sp, #28
 8003294:	af00      	add	r7, sp, #0
 8003296:	60f8      	str	r0, [r7, #12]
 8003298:	60b9      	str	r1, [r7, #8]
 800329a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	6a1b      	ldr	r3, [r3, #32]
 80032a0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	6a1b      	ldr	r3, [r3, #32]
 80032a6:	f023 0201 	bic.w	r2, r3, #1
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	699b      	ldr	r3, [r3, #24]
 80032b2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80032b4:	693b      	ldr	r3, [r7, #16]
 80032b6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80032ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	011b      	lsls	r3, r3, #4
 80032c0:	693a      	ldr	r2, [r7, #16]
 80032c2:	4313      	orrs	r3, r2
 80032c4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80032c6:	697b      	ldr	r3, [r7, #20]
 80032c8:	f023 030a 	bic.w	r3, r3, #10
 80032cc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80032ce:	697a      	ldr	r2, [r7, #20]
 80032d0:	68bb      	ldr	r3, [r7, #8]
 80032d2:	4313      	orrs	r3, r2
 80032d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	693a      	ldr	r2, [r7, #16]
 80032da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	697a      	ldr	r2, [r7, #20]
 80032e0:	621a      	str	r2, [r3, #32]
}
 80032e2:	bf00      	nop
 80032e4:	371c      	adds	r7, #28
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bc80      	pop	{r7}
 80032ea:	4770      	bx	lr

080032ec <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80032ec:	b480      	push	{r7}
 80032ee:	b087      	sub	sp, #28
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	60f8      	str	r0, [r7, #12]
 80032f4:	60b9      	str	r1, [r7, #8]
 80032f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	6a1b      	ldr	r3, [r3, #32]
 80032fc:	f023 0210 	bic.w	r2, r3, #16
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	699b      	ldr	r3, [r3, #24]
 8003308:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	6a1b      	ldr	r3, [r3, #32]
 800330e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003310:	697b      	ldr	r3, [r7, #20]
 8003312:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003316:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	031b      	lsls	r3, r3, #12
 800331c:	697a      	ldr	r2, [r7, #20]
 800331e:	4313      	orrs	r3, r2
 8003320:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003322:	693b      	ldr	r3, [r7, #16]
 8003324:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003328:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800332a:	68bb      	ldr	r3, [r7, #8]
 800332c:	011b      	lsls	r3, r3, #4
 800332e:	693a      	ldr	r2, [r7, #16]
 8003330:	4313      	orrs	r3, r2
 8003332:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	697a      	ldr	r2, [r7, #20]
 8003338:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	693a      	ldr	r2, [r7, #16]
 800333e:	621a      	str	r2, [r3, #32]
}
 8003340:	bf00      	nop
 8003342:	371c      	adds	r7, #28
 8003344:	46bd      	mov	sp, r7
 8003346:	bc80      	pop	{r7}
 8003348:	4770      	bx	lr

0800334a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800334a:	b480      	push	{r7}
 800334c:	b085      	sub	sp, #20
 800334e:	af00      	add	r7, sp, #0
 8003350:	6078      	str	r0, [r7, #4]
 8003352:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	689b      	ldr	r3, [r3, #8]
 8003358:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003360:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003362:	683a      	ldr	r2, [r7, #0]
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	4313      	orrs	r3, r2
 8003368:	f043 0307 	orr.w	r3, r3, #7
 800336c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	68fa      	ldr	r2, [r7, #12]
 8003372:	609a      	str	r2, [r3, #8]
}
 8003374:	bf00      	nop
 8003376:	3714      	adds	r7, #20
 8003378:	46bd      	mov	sp, r7
 800337a:	bc80      	pop	{r7}
 800337c:	4770      	bx	lr

0800337e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800337e:	b480      	push	{r7}
 8003380:	b087      	sub	sp, #28
 8003382:	af00      	add	r7, sp, #0
 8003384:	60f8      	str	r0, [r7, #12]
 8003386:	60b9      	str	r1, [r7, #8]
 8003388:	607a      	str	r2, [r7, #4]
 800338a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	689b      	ldr	r3, [r3, #8]
 8003390:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003392:	697b      	ldr	r3, [r7, #20]
 8003394:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003398:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	021a      	lsls	r2, r3, #8
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	431a      	orrs	r2, r3
 80033a2:	68bb      	ldr	r3, [r7, #8]
 80033a4:	4313      	orrs	r3, r2
 80033a6:	697a      	ldr	r2, [r7, #20]
 80033a8:	4313      	orrs	r3, r2
 80033aa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	697a      	ldr	r2, [r7, #20]
 80033b0:	609a      	str	r2, [r3, #8]
}
 80033b2:	bf00      	nop
 80033b4:	371c      	adds	r7, #28
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bc80      	pop	{r7}
 80033ba:	4770      	bx	lr

080033bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80033bc:	b480      	push	{r7}
 80033be:	b085      	sub	sp, #20
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
 80033c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033cc:	2b01      	cmp	r3, #1
 80033ce:	d101      	bne.n	80033d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80033d0:	2302      	movs	r3, #2
 80033d2:	e041      	b.n	8003458 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2201      	movs	r2, #1
 80033d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2202      	movs	r2, #2
 80033e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	689b      	ldr	r3, [r3, #8]
 80033f2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033fa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	68fa      	ldr	r2, [r7, #12]
 8003402:	4313      	orrs	r3, r2
 8003404:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	68fa      	ldr	r2, [r7, #12]
 800340c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4a14      	ldr	r2, [pc, #80]	; (8003464 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8003414:	4293      	cmp	r3, r2
 8003416:	d009      	beq.n	800342c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003420:	d004      	beq.n	800342c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	4a10      	ldr	r2, [pc, #64]	; (8003468 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8003428:	4293      	cmp	r3, r2
 800342a:	d10c      	bne.n	8003446 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800342c:	68bb      	ldr	r3, [r7, #8]
 800342e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003432:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	68ba      	ldr	r2, [r7, #8]
 800343a:	4313      	orrs	r3, r2
 800343c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	68ba      	ldr	r2, [r7, #8]
 8003444:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2201      	movs	r2, #1
 800344a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2200      	movs	r2, #0
 8003452:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003456:	2300      	movs	r3, #0
}
 8003458:	4618      	mov	r0, r3
 800345a:	3714      	adds	r7, #20
 800345c:	46bd      	mov	sp, r7
 800345e:	bc80      	pop	{r7}
 8003460:	4770      	bx	lr
 8003462:	bf00      	nop
 8003464:	40012c00 	.word	0x40012c00
 8003468:	40000400 	.word	0x40000400

0800346c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800346c:	b480      	push	{r7}
 800346e:	b083      	sub	sp, #12
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003474:	bf00      	nop
 8003476:	370c      	adds	r7, #12
 8003478:	46bd      	mov	sp, r7
 800347a:	bc80      	pop	{r7}
 800347c:	4770      	bx	lr

0800347e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800347e:	b480      	push	{r7}
 8003480:	b083      	sub	sp, #12
 8003482:	af00      	add	r7, sp, #0
 8003484:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003486:	bf00      	nop
 8003488:	370c      	adds	r7, #12
 800348a:	46bd      	mov	sp, r7
 800348c:	bc80      	pop	{r7}
 800348e:	4770      	bx	lr

08003490 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b082      	sub	sp, #8
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d101      	bne.n	80034a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800349e:	2301      	movs	r3, #1
 80034a0:	e03f      	b.n	8003522 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034a8:	b2db      	uxtb	r3, r3
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d106      	bne.n	80034bc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2200      	movs	r2, #0
 80034b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80034b6:	6878      	ldr	r0, [r7, #4]
 80034b8:	f7fd fdb6 	bl	8001028 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2224      	movs	r2, #36	; 0x24
 80034c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	68da      	ldr	r2, [r3, #12]
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80034d2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80034d4:	6878      	ldr	r0, [r7, #4]
 80034d6:	f000 fc85 	bl	8003de4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	691a      	ldr	r2, [r3, #16]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80034e8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	695a      	ldr	r2, [r3, #20]
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80034f8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	68da      	ldr	r2, [r3, #12]
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003508:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2200      	movs	r2, #0
 800350e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2220      	movs	r2, #32
 8003514:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2220      	movs	r2, #32
 800351c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003520:	2300      	movs	r3, #0
}
 8003522:	4618      	mov	r0, r3
 8003524:	3708      	adds	r7, #8
 8003526:	46bd      	mov	sp, r7
 8003528:	bd80      	pop	{r7, pc}

0800352a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800352a:	b580      	push	{r7, lr}
 800352c:	b08a      	sub	sp, #40	; 0x28
 800352e:	af02      	add	r7, sp, #8
 8003530:	60f8      	str	r0, [r7, #12]
 8003532:	60b9      	str	r1, [r7, #8]
 8003534:	603b      	str	r3, [r7, #0]
 8003536:	4613      	mov	r3, r2
 8003538:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800353a:	2300      	movs	r3, #0
 800353c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003544:	b2db      	uxtb	r3, r3
 8003546:	2b20      	cmp	r3, #32
 8003548:	d17c      	bne.n	8003644 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800354a:	68bb      	ldr	r3, [r7, #8]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d002      	beq.n	8003556 <HAL_UART_Transmit+0x2c>
 8003550:	88fb      	ldrh	r3, [r7, #6]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d101      	bne.n	800355a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003556:	2301      	movs	r3, #1
 8003558:	e075      	b.n	8003646 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003560:	2b01      	cmp	r3, #1
 8003562:	d101      	bne.n	8003568 <HAL_UART_Transmit+0x3e>
 8003564:	2302      	movs	r3, #2
 8003566:	e06e      	b.n	8003646 <HAL_UART_Transmit+0x11c>
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	2201      	movs	r2, #1
 800356c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	2200      	movs	r2, #0
 8003574:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	2221      	movs	r2, #33	; 0x21
 800357a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800357e:	f7fd ff2d 	bl	80013dc <HAL_GetTick>
 8003582:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	88fa      	ldrh	r2, [r7, #6]
 8003588:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	88fa      	ldrh	r2, [r7, #6]
 800358e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	689b      	ldr	r3, [r3, #8]
 8003594:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003598:	d108      	bne.n	80035ac <HAL_UART_Transmit+0x82>
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	691b      	ldr	r3, [r3, #16]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d104      	bne.n	80035ac <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80035a2:	2300      	movs	r3, #0
 80035a4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80035a6:	68bb      	ldr	r3, [r7, #8]
 80035a8:	61bb      	str	r3, [r7, #24]
 80035aa:	e003      	b.n	80035b4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80035ac:	68bb      	ldr	r3, [r7, #8]
 80035ae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80035b0:	2300      	movs	r3, #0
 80035b2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	2200      	movs	r2, #0
 80035b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80035bc:	e02a      	b.n	8003614 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	9300      	str	r3, [sp, #0]
 80035c2:	697b      	ldr	r3, [r7, #20]
 80035c4:	2200      	movs	r2, #0
 80035c6:	2180      	movs	r1, #128	; 0x80
 80035c8:	68f8      	ldr	r0, [r7, #12]
 80035ca:	f000 fa38 	bl	8003a3e <UART_WaitOnFlagUntilTimeout>
 80035ce:	4603      	mov	r3, r0
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d001      	beq.n	80035d8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80035d4:	2303      	movs	r3, #3
 80035d6:	e036      	b.n	8003646 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80035d8:	69fb      	ldr	r3, [r7, #28]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d10b      	bne.n	80035f6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80035de:	69bb      	ldr	r3, [r7, #24]
 80035e0:	881b      	ldrh	r3, [r3, #0]
 80035e2:	461a      	mov	r2, r3
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80035ec:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80035ee:	69bb      	ldr	r3, [r7, #24]
 80035f0:	3302      	adds	r3, #2
 80035f2:	61bb      	str	r3, [r7, #24]
 80035f4:	e007      	b.n	8003606 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80035f6:	69fb      	ldr	r3, [r7, #28]
 80035f8:	781a      	ldrb	r2, [r3, #0]
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003600:	69fb      	ldr	r3, [r7, #28]
 8003602:	3301      	adds	r3, #1
 8003604:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800360a:	b29b      	uxth	r3, r3
 800360c:	3b01      	subs	r3, #1
 800360e:	b29a      	uxth	r2, r3
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003618:	b29b      	uxth	r3, r3
 800361a:	2b00      	cmp	r3, #0
 800361c:	d1cf      	bne.n	80035be <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	9300      	str	r3, [sp, #0]
 8003622:	697b      	ldr	r3, [r7, #20]
 8003624:	2200      	movs	r2, #0
 8003626:	2140      	movs	r1, #64	; 0x40
 8003628:	68f8      	ldr	r0, [r7, #12]
 800362a:	f000 fa08 	bl	8003a3e <UART_WaitOnFlagUntilTimeout>
 800362e:	4603      	mov	r3, r0
 8003630:	2b00      	cmp	r3, #0
 8003632:	d001      	beq.n	8003638 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003634:	2303      	movs	r3, #3
 8003636:	e006      	b.n	8003646 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	2220      	movs	r2, #32
 800363c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003640:	2300      	movs	r3, #0
 8003642:	e000      	b.n	8003646 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003644:	2302      	movs	r3, #2
  }
}
 8003646:	4618      	mov	r0, r3
 8003648:	3720      	adds	r7, #32
 800364a:	46bd      	mov	sp, r7
 800364c:	bd80      	pop	{r7, pc}

0800364e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800364e:	b580      	push	{r7, lr}
 8003650:	b084      	sub	sp, #16
 8003652:	af00      	add	r7, sp, #0
 8003654:	60f8      	str	r0, [r7, #12]
 8003656:	60b9      	str	r1, [r7, #8]
 8003658:	4613      	mov	r3, r2
 800365a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003662:	b2db      	uxtb	r3, r3
 8003664:	2b20      	cmp	r3, #32
 8003666:	d11d      	bne.n	80036a4 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003668:	68bb      	ldr	r3, [r7, #8]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d002      	beq.n	8003674 <HAL_UART_Receive_IT+0x26>
 800366e:	88fb      	ldrh	r3, [r7, #6]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d101      	bne.n	8003678 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003674:	2301      	movs	r3, #1
 8003676:	e016      	b.n	80036a6 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800367e:	2b01      	cmp	r3, #1
 8003680:	d101      	bne.n	8003686 <HAL_UART_Receive_IT+0x38>
 8003682:	2302      	movs	r3, #2
 8003684:	e00f      	b.n	80036a6 <HAL_UART_Receive_IT+0x58>
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	2201      	movs	r2, #1
 800368a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	2200      	movs	r2, #0
 8003692:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8003694:	88fb      	ldrh	r3, [r7, #6]
 8003696:	461a      	mov	r2, r3
 8003698:	68b9      	ldr	r1, [r7, #8]
 800369a:	68f8      	ldr	r0, [r7, #12]
 800369c:	f000 fa19 	bl	8003ad2 <UART_Start_Receive_IT>
 80036a0:	4603      	mov	r3, r0
 80036a2:	e000      	b.n	80036a6 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80036a4:	2302      	movs	r3, #2
  }
}
 80036a6:	4618      	mov	r0, r3
 80036a8:	3710      	adds	r7, #16
 80036aa:	46bd      	mov	sp, r7
 80036ac:	bd80      	pop	{r7, pc}
	...

080036b0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b08a      	sub	sp, #40	; 0x28
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	68db      	ldr	r3, [r3, #12]
 80036c6:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	695b      	ldr	r3, [r3, #20]
 80036ce:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80036d0:	2300      	movs	r3, #0
 80036d2:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80036d4:	2300      	movs	r3, #0
 80036d6:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80036d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036da:	f003 030f 	and.w	r3, r3, #15
 80036de:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80036e0:	69bb      	ldr	r3, [r7, #24]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d10d      	bne.n	8003702 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80036e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036e8:	f003 0320 	and.w	r3, r3, #32
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d008      	beq.n	8003702 <HAL_UART_IRQHandler+0x52>
 80036f0:	6a3b      	ldr	r3, [r7, #32]
 80036f2:	f003 0320 	and.w	r3, r3, #32
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d003      	beq.n	8003702 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80036fa:	6878      	ldr	r0, [r7, #4]
 80036fc:	f000 fac9 	bl	8003c92 <UART_Receive_IT>
      return;
 8003700:	e17b      	b.n	80039fa <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003702:	69bb      	ldr	r3, [r7, #24]
 8003704:	2b00      	cmp	r3, #0
 8003706:	f000 80b1 	beq.w	800386c <HAL_UART_IRQHandler+0x1bc>
 800370a:	69fb      	ldr	r3, [r7, #28]
 800370c:	f003 0301 	and.w	r3, r3, #1
 8003710:	2b00      	cmp	r3, #0
 8003712:	d105      	bne.n	8003720 <HAL_UART_IRQHandler+0x70>
 8003714:	6a3b      	ldr	r3, [r7, #32]
 8003716:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800371a:	2b00      	cmp	r3, #0
 800371c:	f000 80a6 	beq.w	800386c <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003722:	f003 0301 	and.w	r3, r3, #1
 8003726:	2b00      	cmp	r3, #0
 8003728:	d00a      	beq.n	8003740 <HAL_UART_IRQHandler+0x90>
 800372a:	6a3b      	ldr	r3, [r7, #32]
 800372c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003730:	2b00      	cmp	r3, #0
 8003732:	d005      	beq.n	8003740 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003738:	f043 0201 	orr.w	r2, r3, #1
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003742:	f003 0304 	and.w	r3, r3, #4
 8003746:	2b00      	cmp	r3, #0
 8003748:	d00a      	beq.n	8003760 <HAL_UART_IRQHandler+0xb0>
 800374a:	69fb      	ldr	r3, [r7, #28]
 800374c:	f003 0301 	and.w	r3, r3, #1
 8003750:	2b00      	cmp	r3, #0
 8003752:	d005      	beq.n	8003760 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003758:	f043 0202 	orr.w	r2, r3, #2
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003762:	f003 0302 	and.w	r3, r3, #2
 8003766:	2b00      	cmp	r3, #0
 8003768:	d00a      	beq.n	8003780 <HAL_UART_IRQHandler+0xd0>
 800376a:	69fb      	ldr	r3, [r7, #28]
 800376c:	f003 0301 	and.w	r3, r3, #1
 8003770:	2b00      	cmp	r3, #0
 8003772:	d005      	beq.n	8003780 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003778:	f043 0204 	orr.w	r2, r3, #4
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003782:	f003 0308 	and.w	r3, r3, #8
 8003786:	2b00      	cmp	r3, #0
 8003788:	d00f      	beq.n	80037aa <HAL_UART_IRQHandler+0xfa>
 800378a:	6a3b      	ldr	r3, [r7, #32]
 800378c:	f003 0320 	and.w	r3, r3, #32
 8003790:	2b00      	cmp	r3, #0
 8003792:	d104      	bne.n	800379e <HAL_UART_IRQHandler+0xee>
 8003794:	69fb      	ldr	r3, [r7, #28]
 8003796:	f003 0301 	and.w	r3, r3, #1
 800379a:	2b00      	cmp	r3, #0
 800379c:	d005      	beq.n	80037aa <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037a2:	f043 0208 	orr.w	r2, r3, #8
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	f000 811e 	beq.w	80039f0 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80037b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037b6:	f003 0320 	and.w	r3, r3, #32
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d007      	beq.n	80037ce <HAL_UART_IRQHandler+0x11e>
 80037be:	6a3b      	ldr	r3, [r7, #32]
 80037c0:	f003 0320 	and.w	r3, r3, #32
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d002      	beq.n	80037ce <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 80037c8:	6878      	ldr	r0, [r7, #4]
 80037ca:	f000 fa62 	bl	8003c92 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	695b      	ldr	r3, [r3, #20]
 80037d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037d8:	2b00      	cmp	r3, #0
 80037da:	bf14      	ite	ne
 80037dc:	2301      	movne	r3, #1
 80037de:	2300      	moveq	r3, #0
 80037e0:	b2db      	uxtb	r3, r3
 80037e2:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037e8:	f003 0308 	and.w	r3, r3, #8
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d102      	bne.n	80037f6 <HAL_UART_IRQHandler+0x146>
 80037f0:	697b      	ldr	r3, [r7, #20]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d031      	beq.n	800385a <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80037f6:	6878      	ldr	r0, [r7, #4]
 80037f8:	f000 f9a4 	bl	8003b44 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	695b      	ldr	r3, [r3, #20]
 8003802:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003806:	2b00      	cmp	r3, #0
 8003808:	d023      	beq.n	8003852 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	695a      	ldr	r2, [r3, #20]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003818:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800381e:	2b00      	cmp	r3, #0
 8003820:	d013      	beq.n	800384a <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003826:	4a76      	ldr	r2, [pc, #472]	; (8003a00 <HAL_UART_IRQHandler+0x350>)
 8003828:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800382e:	4618      	mov	r0, r3
 8003830:	f7fe fb56 	bl	8001ee0 <HAL_DMA_Abort_IT>
 8003834:	4603      	mov	r3, r0
 8003836:	2b00      	cmp	r3, #0
 8003838:	d016      	beq.n	8003868 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800383e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003840:	687a      	ldr	r2, [r7, #4]
 8003842:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003844:	4610      	mov	r0, r2
 8003846:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003848:	e00e      	b.n	8003868 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800384a:	6878      	ldr	r0, [r7, #4]
 800384c:	f000 f8e3 	bl	8003a16 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003850:	e00a      	b.n	8003868 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003852:	6878      	ldr	r0, [r7, #4]
 8003854:	f000 f8df 	bl	8003a16 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003858:	e006      	b.n	8003868 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800385a:	6878      	ldr	r0, [r7, #4]
 800385c:	f000 f8db 	bl	8003a16 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2200      	movs	r2, #0
 8003864:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003866:	e0c3      	b.n	80039f0 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003868:	bf00      	nop
    return;
 800386a:	e0c1      	b.n	80039f0 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003870:	2b01      	cmp	r3, #1
 8003872:	f040 80a1 	bne.w	80039b8 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8003876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003878:	f003 0310 	and.w	r3, r3, #16
 800387c:	2b00      	cmp	r3, #0
 800387e:	f000 809b 	beq.w	80039b8 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8003882:	6a3b      	ldr	r3, [r7, #32]
 8003884:	f003 0310 	and.w	r3, r3, #16
 8003888:	2b00      	cmp	r3, #0
 800388a:	f000 8095 	beq.w	80039b8 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800388e:	2300      	movs	r3, #0
 8003890:	60fb      	str	r3, [r7, #12]
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	60fb      	str	r3, [r7, #12]
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	60fb      	str	r3, [r7, #12]
 80038a2:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	695b      	ldr	r3, [r3, #20]
 80038aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d04e      	beq.n	8003950 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 80038bc:	8a3b      	ldrh	r3, [r7, #16]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	f000 8098 	beq.w	80039f4 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80038c8:	8a3a      	ldrh	r2, [r7, #16]
 80038ca:	429a      	cmp	r2, r3
 80038cc:	f080 8092 	bcs.w	80039f4 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	8a3a      	ldrh	r2, [r7, #16]
 80038d4:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038da:	699b      	ldr	r3, [r3, #24]
 80038dc:	2b20      	cmp	r3, #32
 80038de:	d02b      	beq.n	8003938 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	68da      	ldr	r2, [r3, #12]
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80038ee:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	695a      	ldr	r2, [r3, #20]
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f022 0201 	bic.w	r2, r2, #1
 80038fe:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	695a      	ldr	r2, [r3, #20]
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800390e:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2220      	movs	r2, #32
 8003914:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2200      	movs	r2, #0
 800391c:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	68da      	ldr	r2, [r3, #12]
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f022 0210 	bic.w	r2, r2, #16
 800392c:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003932:	4618      	mov	r0, r3
 8003934:	f7fe fa99 	bl	8001e6a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003940:	b29b      	uxth	r3, r3
 8003942:	1ad3      	subs	r3, r2, r3
 8003944:	b29b      	uxth	r3, r3
 8003946:	4619      	mov	r1, r3
 8003948:	6878      	ldr	r0, [r7, #4]
 800394a:	f000 f86d 	bl	8003a28 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800394e:	e051      	b.n	80039f4 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003958:	b29b      	uxth	r3, r3
 800395a:	1ad3      	subs	r3, r2, r3
 800395c:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003962:	b29b      	uxth	r3, r3
 8003964:	2b00      	cmp	r3, #0
 8003966:	d047      	beq.n	80039f8 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8003968:	8a7b      	ldrh	r3, [r7, #18]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d044      	beq.n	80039f8 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	68da      	ldr	r2, [r3, #12]
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800397c:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	695a      	ldr	r2, [r3, #20]
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f022 0201 	bic.w	r2, r2, #1
 800398c:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2220      	movs	r2, #32
 8003992:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2200      	movs	r2, #0
 800399a:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	68da      	ldr	r2, [r3, #12]
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f022 0210 	bic.w	r2, r2, #16
 80039aa:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80039ac:	8a7b      	ldrh	r3, [r7, #18]
 80039ae:	4619      	mov	r1, r3
 80039b0:	6878      	ldr	r0, [r7, #4]
 80039b2:	f000 f839 	bl	8003a28 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80039b6:	e01f      	b.n	80039f8 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80039b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d008      	beq.n	80039d4 <HAL_UART_IRQHandler+0x324>
 80039c2:	6a3b      	ldr	r3, [r7, #32]
 80039c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d003      	beq.n	80039d4 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 80039cc:	6878      	ldr	r0, [r7, #4]
 80039ce:	f000 f8f9 	bl	8003bc4 <UART_Transmit_IT>
    return;
 80039d2:	e012      	b.n	80039fa <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80039d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d00d      	beq.n	80039fa <HAL_UART_IRQHandler+0x34a>
 80039de:	6a3b      	ldr	r3, [r7, #32]
 80039e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d008      	beq.n	80039fa <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 80039e8:	6878      	ldr	r0, [r7, #4]
 80039ea:	f000 f93a 	bl	8003c62 <UART_EndTransmit_IT>
    return;
 80039ee:	e004      	b.n	80039fa <HAL_UART_IRQHandler+0x34a>
    return;
 80039f0:	bf00      	nop
 80039f2:	e002      	b.n	80039fa <HAL_UART_IRQHandler+0x34a>
      return;
 80039f4:	bf00      	nop
 80039f6:	e000      	b.n	80039fa <HAL_UART_IRQHandler+0x34a>
      return;
 80039f8:	bf00      	nop
  }
}
 80039fa:	3728      	adds	r7, #40	; 0x28
 80039fc:	46bd      	mov	sp, r7
 80039fe:	bd80      	pop	{r7, pc}
 8003a00:	08003b9d 	.word	0x08003b9d

08003a04 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003a04:	b480      	push	{r7}
 8003a06:	b083      	sub	sp, #12
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003a0c:	bf00      	nop
 8003a0e:	370c      	adds	r7, #12
 8003a10:	46bd      	mov	sp, r7
 8003a12:	bc80      	pop	{r7}
 8003a14:	4770      	bx	lr

08003a16 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003a16:	b480      	push	{r7}
 8003a18:	b083      	sub	sp, #12
 8003a1a:	af00      	add	r7, sp, #0
 8003a1c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003a1e:	bf00      	nop
 8003a20:	370c      	adds	r7, #12
 8003a22:	46bd      	mov	sp, r7
 8003a24:	bc80      	pop	{r7}
 8003a26:	4770      	bx	lr

08003a28 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003a28:	b480      	push	{r7}
 8003a2a:	b083      	sub	sp, #12
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
 8003a30:	460b      	mov	r3, r1
 8003a32:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003a34:	bf00      	nop
 8003a36:	370c      	adds	r7, #12
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	bc80      	pop	{r7}
 8003a3c:	4770      	bx	lr

08003a3e <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003a3e:	b580      	push	{r7, lr}
 8003a40:	b084      	sub	sp, #16
 8003a42:	af00      	add	r7, sp, #0
 8003a44:	60f8      	str	r0, [r7, #12]
 8003a46:	60b9      	str	r1, [r7, #8]
 8003a48:	603b      	str	r3, [r7, #0]
 8003a4a:	4613      	mov	r3, r2
 8003a4c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a4e:	e02c      	b.n	8003aaa <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a50:	69bb      	ldr	r3, [r7, #24]
 8003a52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a56:	d028      	beq.n	8003aaa <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003a58:	69bb      	ldr	r3, [r7, #24]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d007      	beq.n	8003a6e <UART_WaitOnFlagUntilTimeout+0x30>
 8003a5e:	f7fd fcbd 	bl	80013dc <HAL_GetTick>
 8003a62:	4602      	mov	r2, r0
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	1ad3      	subs	r3, r2, r3
 8003a68:	69ba      	ldr	r2, [r7, #24]
 8003a6a:	429a      	cmp	r2, r3
 8003a6c:	d21d      	bcs.n	8003aaa <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	68da      	ldr	r2, [r3, #12]
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003a7c:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	695a      	ldr	r2, [r3, #20]
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f022 0201 	bic.w	r2, r2, #1
 8003a8c:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	2220      	movs	r2, #32
 8003a92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	2220      	movs	r2, #32
 8003a9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003aa6:	2303      	movs	r3, #3
 8003aa8:	e00f      	b.n	8003aca <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	681a      	ldr	r2, [r3, #0]
 8003ab0:	68bb      	ldr	r3, [r7, #8]
 8003ab2:	4013      	ands	r3, r2
 8003ab4:	68ba      	ldr	r2, [r7, #8]
 8003ab6:	429a      	cmp	r2, r3
 8003ab8:	bf0c      	ite	eq
 8003aba:	2301      	moveq	r3, #1
 8003abc:	2300      	movne	r3, #0
 8003abe:	b2db      	uxtb	r3, r3
 8003ac0:	461a      	mov	r2, r3
 8003ac2:	79fb      	ldrb	r3, [r7, #7]
 8003ac4:	429a      	cmp	r2, r3
 8003ac6:	d0c3      	beq.n	8003a50 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003ac8:	2300      	movs	r3, #0
}
 8003aca:	4618      	mov	r0, r3
 8003acc:	3710      	adds	r7, #16
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bd80      	pop	{r7, pc}

08003ad2 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003ad2:	b480      	push	{r7}
 8003ad4:	b085      	sub	sp, #20
 8003ad6:	af00      	add	r7, sp, #0
 8003ad8:	60f8      	str	r0, [r7, #12]
 8003ada:	60b9      	str	r1, [r7, #8]
 8003adc:	4613      	mov	r3, r2
 8003ade:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	68ba      	ldr	r2, [r7, #8]
 8003ae4:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	88fa      	ldrh	r2, [r7, #6]
 8003aea:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	88fa      	ldrh	r2, [r7, #6]
 8003af0:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	2200      	movs	r2, #0
 8003af6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	2222      	movs	r2, #34	; 0x22
 8003afc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	2200      	movs	r2, #0
 8003b04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	68da      	ldr	r2, [r3, #12]
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b16:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	695a      	ldr	r2, [r3, #20]
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f042 0201 	orr.w	r2, r2, #1
 8003b26:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	68da      	ldr	r2, [r3, #12]
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f042 0220 	orr.w	r2, r2, #32
 8003b36:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003b38:	2300      	movs	r3, #0
}
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	3714      	adds	r7, #20
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	bc80      	pop	{r7}
 8003b42:	4770      	bx	lr

08003b44 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003b44:	b480      	push	{r7}
 8003b46:	b083      	sub	sp, #12
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	68da      	ldr	r2, [r3, #12]
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003b5a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	695a      	ldr	r2, [r3, #20]
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f022 0201 	bic.w	r2, r2, #1
 8003b6a:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b70:	2b01      	cmp	r3, #1
 8003b72:	d107      	bne.n	8003b84 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	68da      	ldr	r2, [r3, #12]
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f022 0210 	bic.w	r2, r2, #16
 8003b82:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2220      	movs	r2, #32
 8003b88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2200      	movs	r2, #0
 8003b90:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003b92:	bf00      	nop
 8003b94:	370c      	adds	r7, #12
 8003b96:	46bd      	mov	sp, r7
 8003b98:	bc80      	pop	{r7}
 8003b9a:	4770      	bx	lr

08003b9c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b084      	sub	sp, #16
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ba8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	2200      	movs	r2, #0
 8003bae:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003bb6:	68f8      	ldr	r0, [r7, #12]
 8003bb8:	f7ff ff2d 	bl	8003a16 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003bbc:	bf00      	nop
 8003bbe:	3710      	adds	r7, #16
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	bd80      	pop	{r7, pc}

08003bc4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	b085      	sub	sp, #20
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bd2:	b2db      	uxtb	r3, r3
 8003bd4:	2b21      	cmp	r3, #33	; 0x21
 8003bd6:	d13e      	bne.n	8003c56 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	689b      	ldr	r3, [r3, #8]
 8003bdc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003be0:	d114      	bne.n	8003c0c <UART_Transmit_IT+0x48>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	691b      	ldr	r3, [r3, #16]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d110      	bne.n	8003c0c <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6a1b      	ldr	r3, [r3, #32]
 8003bee:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	881b      	ldrh	r3, [r3, #0]
 8003bf4:	461a      	mov	r2, r3
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003bfe:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6a1b      	ldr	r3, [r3, #32]
 8003c04:	1c9a      	adds	r2, r3, #2
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	621a      	str	r2, [r3, #32]
 8003c0a:	e008      	b.n	8003c1e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6a1b      	ldr	r3, [r3, #32]
 8003c10:	1c59      	adds	r1, r3, #1
 8003c12:	687a      	ldr	r2, [r7, #4]
 8003c14:	6211      	str	r1, [r2, #32]
 8003c16:	781a      	ldrb	r2, [r3, #0]
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003c22:	b29b      	uxth	r3, r3
 8003c24:	3b01      	subs	r3, #1
 8003c26:	b29b      	uxth	r3, r3
 8003c28:	687a      	ldr	r2, [r7, #4]
 8003c2a:	4619      	mov	r1, r3
 8003c2c:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d10f      	bne.n	8003c52 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	68da      	ldr	r2, [r3, #12]
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003c40:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	68da      	ldr	r2, [r3, #12]
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003c50:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003c52:	2300      	movs	r3, #0
 8003c54:	e000      	b.n	8003c58 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003c56:	2302      	movs	r3, #2
  }
}
 8003c58:	4618      	mov	r0, r3
 8003c5a:	3714      	adds	r7, #20
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	bc80      	pop	{r7}
 8003c60:	4770      	bx	lr

08003c62 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003c62:	b580      	push	{r7, lr}
 8003c64:	b082      	sub	sp, #8
 8003c66:	af00      	add	r7, sp, #0
 8003c68:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	68da      	ldr	r2, [r3, #12]
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c78:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2220      	movs	r2, #32
 8003c7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003c82:	6878      	ldr	r0, [r7, #4]
 8003c84:	f7ff febe 	bl	8003a04 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003c88:	2300      	movs	r3, #0
}
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	3708      	adds	r7, #8
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	bd80      	pop	{r7, pc}

08003c92 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003c92:	b580      	push	{r7, lr}
 8003c94:	b086      	sub	sp, #24
 8003c96:	af00      	add	r7, sp, #0
 8003c98:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003ca0:	b2db      	uxtb	r3, r3
 8003ca2:	2b22      	cmp	r3, #34	; 0x22
 8003ca4:	f040 8099 	bne.w	8003dda <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	689b      	ldr	r3, [r3, #8]
 8003cac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cb0:	d117      	bne.n	8003ce2 <UART_Receive_IT+0x50>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	691b      	ldr	r3, [r3, #16]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d113      	bne.n	8003ce2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003cba:	2300      	movs	r3, #0
 8003cbc:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cc2:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	685b      	ldr	r3, [r3, #4]
 8003cca:	b29b      	uxth	r3, r3
 8003ccc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003cd0:	b29a      	uxth	r2, r3
 8003cd2:	693b      	ldr	r3, [r7, #16]
 8003cd4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cda:	1c9a      	adds	r2, r3, #2
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	629a      	str	r2, [r3, #40]	; 0x28
 8003ce0:	e026      	b.n	8003d30 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ce6:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8003ce8:	2300      	movs	r3, #0
 8003cea:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	689b      	ldr	r3, [r3, #8]
 8003cf0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cf4:	d007      	beq.n	8003d06 <UART_Receive_IT+0x74>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	689b      	ldr	r3, [r3, #8]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d10a      	bne.n	8003d14 <UART_Receive_IT+0x82>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	691b      	ldr	r3, [r3, #16]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d106      	bne.n	8003d14 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	685b      	ldr	r3, [r3, #4]
 8003d0c:	b2da      	uxtb	r2, r3
 8003d0e:	697b      	ldr	r3, [r7, #20]
 8003d10:	701a      	strb	r2, [r3, #0]
 8003d12:	e008      	b.n	8003d26 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	685b      	ldr	r3, [r3, #4]
 8003d1a:	b2db      	uxtb	r3, r3
 8003d1c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003d20:	b2da      	uxtb	r2, r3
 8003d22:	697b      	ldr	r3, [r7, #20]
 8003d24:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d2a:	1c5a      	adds	r2, r3, #1
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003d34:	b29b      	uxth	r3, r3
 8003d36:	3b01      	subs	r3, #1
 8003d38:	b29b      	uxth	r3, r3
 8003d3a:	687a      	ldr	r2, [r7, #4]
 8003d3c:	4619      	mov	r1, r3
 8003d3e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d148      	bne.n	8003dd6 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	68da      	ldr	r2, [r3, #12]
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f022 0220 	bic.w	r2, r2, #32
 8003d52:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	68da      	ldr	r2, [r3, #12]
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003d62:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	695a      	ldr	r2, [r3, #20]
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f022 0201 	bic.w	r2, r2, #1
 8003d72:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2220      	movs	r2, #32
 8003d78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d80:	2b01      	cmp	r3, #1
 8003d82:	d123      	bne.n	8003dcc <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2200      	movs	r2, #0
 8003d88:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	68da      	ldr	r2, [r3, #12]
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f022 0210 	bic.w	r2, r2, #16
 8003d98:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f003 0310 	and.w	r3, r3, #16
 8003da4:	2b10      	cmp	r3, #16
 8003da6:	d10a      	bne.n	8003dbe <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003da8:	2300      	movs	r3, #0
 8003daa:	60fb      	str	r3, [r7, #12]
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	60fb      	str	r3, [r7, #12]
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	685b      	ldr	r3, [r3, #4]
 8003dba:	60fb      	str	r3, [r7, #12]
 8003dbc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003dc2:	4619      	mov	r1, r3
 8003dc4:	6878      	ldr	r0, [r7, #4]
 8003dc6:	f7ff fe2f 	bl	8003a28 <HAL_UARTEx_RxEventCallback>
 8003dca:	e002      	b.n	8003dd2 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8003dcc:	6878      	ldr	r0, [r7, #4]
 8003dce:	f7fc fdfd 	bl	80009cc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	e002      	b.n	8003ddc <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	e000      	b.n	8003ddc <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8003dda:	2302      	movs	r3, #2
  }
}
 8003ddc:	4618      	mov	r0, r3
 8003dde:	3718      	adds	r7, #24
 8003de0:	46bd      	mov	sp, r7
 8003de2:	bd80      	pop	{r7, pc}

08003de4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b084      	sub	sp, #16
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	691b      	ldr	r3, [r3, #16]
 8003df2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	68da      	ldr	r2, [r3, #12]
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	430a      	orrs	r2, r1
 8003e00:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	689a      	ldr	r2, [r3, #8]
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	691b      	ldr	r3, [r3, #16]
 8003e0a:	431a      	orrs	r2, r3
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	695b      	ldr	r3, [r3, #20]
 8003e10:	4313      	orrs	r3, r2
 8003e12:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	68db      	ldr	r3, [r3, #12]
 8003e1a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003e1e:	f023 030c 	bic.w	r3, r3, #12
 8003e22:	687a      	ldr	r2, [r7, #4]
 8003e24:	6812      	ldr	r2, [r2, #0]
 8003e26:	68b9      	ldr	r1, [r7, #8]
 8003e28:	430b      	orrs	r3, r1
 8003e2a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	695b      	ldr	r3, [r3, #20]
 8003e32:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	699a      	ldr	r2, [r3, #24]
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	430a      	orrs	r2, r1
 8003e40:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	4a2c      	ldr	r2, [pc, #176]	; (8003ef8 <UART_SetConfig+0x114>)
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	d103      	bne.n	8003e54 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003e4c:	f7fe fe54 	bl	8002af8 <HAL_RCC_GetPCLK2Freq>
 8003e50:	60f8      	str	r0, [r7, #12]
 8003e52:	e002      	b.n	8003e5a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003e54:	f7fe fe3c 	bl	8002ad0 <HAL_RCC_GetPCLK1Freq>
 8003e58:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003e5a:	68fa      	ldr	r2, [r7, #12]
 8003e5c:	4613      	mov	r3, r2
 8003e5e:	009b      	lsls	r3, r3, #2
 8003e60:	4413      	add	r3, r2
 8003e62:	009a      	lsls	r2, r3, #2
 8003e64:	441a      	add	r2, r3
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	685b      	ldr	r3, [r3, #4]
 8003e6a:	009b      	lsls	r3, r3, #2
 8003e6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e70:	4a22      	ldr	r2, [pc, #136]	; (8003efc <UART_SetConfig+0x118>)
 8003e72:	fba2 2303 	umull	r2, r3, r2, r3
 8003e76:	095b      	lsrs	r3, r3, #5
 8003e78:	0119      	lsls	r1, r3, #4
 8003e7a:	68fa      	ldr	r2, [r7, #12]
 8003e7c:	4613      	mov	r3, r2
 8003e7e:	009b      	lsls	r3, r3, #2
 8003e80:	4413      	add	r3, r2
 8003e82:	009a      	lsls	r2, r3, #2
 8003e84:	441a      	add	r2, r3
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	685b      	ldr	r3, [r3, #4]
 8003e8a:	009b      	lsls	r3, r3, #2
 8003e8c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003e90:	4b1a      	ldr	r3, [pc, #104]	; (8003efc <UART_SetConfig+0x118>)
 8003e92:	fba3 0302 	umull	r0, r3, r3, r2
 8003e96:	095b      	lsrs	r3, r3, #5
 8003e98:	2064      	movs	r0, #100	; 0x64
 8003e9a:	fb00 f303 	mul.w	r3, r0, r3
 8003e9e:	1ad3      	subs	r3, r2, r3
 8003ea0:	011b      	lsls	r3, r3, #4
 8003ea2:	3332      	adds	r3, #50	; 0x32
 8003ea4:	4a15      	ldr	r2, [pc, #84]	; (8003efc <UART_SetConfig+0x118>)
 8003ea6:	fba2 2303 	umull	r2, r3, r2, r3
 8003eaa:	095b      	lsrs	r3, r3, #5
 8003eac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003eb0:	4419      	add	r1, r3
 8003eb2:	68fa      	ldr	r2, [r7, #12]
 8003eb4:	4613      	mov	r3, r2
 8003eb6:	009b      	lsls	r3, r3, #2
 8003eb8:	4413      	add	r3, r2
 8003eba:	009a      	lsls	r2, r3, #2
 8003ebc:	441a      	add	r2, r3
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	685b      	ldr	r3, [r3, #4]
 8003ec2:	009b      	lsls	r3, r3, #2
 8003ec4:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ec8:	4b0c      	ldr	r3, [pc, #48]	; (8003efc <UART_SetConfig+0x118>)
 8003eca:	fba3 0302 	umull	r0, r3, r3, r2
 8003ece:	095b      	lsrs	r3, r3, #5
 8003ed0:	2064      	movs	r0, #100	; 0x64
 8003ed2:	fb00 f303 	mul.w	r3, r0, r3
 8003ed6:	1ad3      	subs	r3, r2, r3
 8003ed8:	011b      	lsls	r3, r3, #4
 8003eda:	3332      	adds	r3, #50	; 0x32
 8003edc:	4a07      	ldr	r2, [pc, #28]	; (8003efc <UART_SetConfig+0x118>)
 8003ede:	fba2 2303 	umull	r2, r3, r2, r3
 8003ee2:	095b      	lsrs	r3, r3, #5
 8003ee4:	f003 020f 	and.w	r2, r3, #15
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	440a      	add	r2, r1
 8003eee:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003ef0:	bf00      	nop
 8003ef2:	3710      	adds	r7, #16
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	bd80      	pop	{r7, pc}
 8003ef8:	40013800 	.word	0x40013800
 8003efc:	51eb851f 	.word	0x51eb851f

08003f00 <__errno>:
 8003f00:	4b01      	ldr	r3, [pc, #4]	; (8003f08 <__errno+0x8>)
 8003f02:	6818      	ldr	r0, [r3, #0]
 8003f04:	4770      	bx	lr
 8003f06:	bf00      	nop
 8003f08:	20000010 	.word	0x20000010

08003f0c <__libc_init_array>:
 8003f0c:	b570      	push	{r4, r5, r6, lr}
 8003f0e:	2600      	movs	r6, #0
 8003f10:	4d0c      	ldr	r5, [pc, #48]	; (8003f44 <__libc_init_array+0x38>)
 8003f12:	4c0d      	ldr	r4, [pc, #52]	; (8003f48 <__libc_init_array+0x3c>)
 8003f14:	1b64      	subs	r4, r4, r5
 8003f16:	10a4      	asrs	r4, r4, #2
 8003f18:	42a6      	cmp	r6, r4
 8003f1a:	d109      	bne.n	8003f30 <__libc_init_array+0x24>
 8003f1c:	f000 fc9c 	bl	8004858 <_init>
 8003f20:	2600      	movs	r6, #0
 8003f22:	4d0a      	ldr	r5, [pc, #40]	; (8003f4c <__libc_init_array+0x40>)
 8003f24:	4c0a      	ldr	r4, [pc, #40]	; (8003f50 <__libc_init_array+0x44>)
 8003f26:	1b64      	subs	r4, r4, r5
 8003f28:	10a4      	asrs	r4, r4, #2
 8003f2a:	42a6      	cmp	r6, r4
 8003f2c:	d105      	bne.n	8003f3a <__libc_init_array+0x2e>
 8003f2e:	bd70      	pop	{r4, r5, r6, pc}
 8003f30:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f34:	4798      	blx	r3
 8003f36:	3601      	adds	r6, #1
 8003f38:	e7ee      	b.n	8003f18 <__libc_init_array+0xc>
 8003f3a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f3e:	4798      	blx	r3
 8003f40:	3601      	adds	r6, #1
 8003f42:	e7f2      	b.n	8003f2a <__libc_init_array+0x1e>
 8003f44:	080048dc 	.word	0x080048dc
 8003f48:	080048dc 	.word	0x080048dc
 8003f4c:	080048dc 	.word	0x080048dc
 8003f50:	080048e0 	.word	0x080048e0

08003f54 <memset>:
 8003f54:	4603      	mov	r3, r0
 8003f56:	4402      	add	r2, r0
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d100      	bne.n	8003f5e <memset+0xa>
 8003f5c:	4770      	bx	lr
 8003f5e:	f803 1b01 	strb.w	r1, [r3], #1
 8003f62:	e7f9      	b.n	8003f58 <memset+0x4>

08003f64 <siprintf>:
 8003f64:	b40e      	push	{r1, r2, r3}
 8003f66:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003f6a:	b500      	push	{lr}
 8003f6c:	b09c      	sub	sp, #112	; 0x70
 8003f6e:	ab1d      	add	r3, sp, #116	; 0x74
 8003f70:	9002      	str	r0, [sp, #8]
 8003f72:	9006      	str	r0, [sp, #24]
 8003f74:	9107      	str	r1, [sp, #28]
 8003f76:	9104      	str	r1, [sp, #16]
 8003f78:	4808      	ldr	r0, [pc, #32]	; (8003f9c <siprintf+0x38>)
 8003f7a:	4909      	ldr	r1, [pc, #36]	; (8003fa0 <siprintf+0x3c>)
 8003f7c:	f853 2b04 	ldr.w	r2, [r3], #4
 8003f80:	9105      	str	r1, [sp, #20]
 8003f82:	6800      	ldr	r0, [r0, #0]
 8003f84:	a902      	add	r1, sp, #8
 8003f86:	9301      	str	r3, [sp, #4]
 8003f88:	f000 f868 	bl	800405c <_svfiprintf_r>
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	9b02      	ldr	r3, [sp, #8]
 8003f90:	701a      	strb	r2, [r3, #0]
 8003f92:	b01c      	add	sp, #112	; 0x70
 8003f94:	f85d eb04 	ldr.w	lr, [sp], #4
 8003f98:	b003      	add	sp, #12
 8003f9a:	4770      	bx	lr
 8003f9c:	20000010 	.word	0x20000010
 8003fa0:	ffff0208 	.word	0xffff0208

08003fa4 <__ssputs_r>:
 8003fa4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003fa8:	688e      	ldr	r6, [r1, #8]
 8003faa:	4682      	mov	sl, r0
 8003fac:	429e      	cmp	r6, r3
 8003fae:	460c      	mov	r4, r1
 8003fb0:	4690      	mov	r8, r2
 8003fb2:	461f      	mov	r7, r3
 8003fb4:	d838      	bhi.n	8004028 <__ssputs_r+0x84>
 8003fb6:	898a      	ldrh	r2, [r1, #12]
 8003fb8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003fbc:	d032      	beq.n	8004024 <__ssputs_r+0x80>
 8003fbe:	6825      	ldr	r5, [r4, #0]
 8003fc0:	6909      	ldr	r1, [r1, #16]
 8003fc2:	3301      	adds	r3, #1
 8003fc4:	eba5 0901 	sub.w	r9, r5, r1
 8003fc8:	6965      	ldr	r5, [r4, #20]
 8003fca:	444b      	add	r3, r9
 8003fcc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003fd0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003fd4:	106d      	asrs	r5, r5, #1
 8003fd6:	429d      	cmp	r5, r3
 8003fd8:	bf38      	it	cc
 8003fda:	461d      	movcc	r5, r3
 8003fdc:	0553      	lsls	r3, r2, #21
 8003fde:	d531      	bpl.n	8004044 <__ssputs_r+0xa0>
 8003fe0:	4629      	mov	r1, r5
 8003fe2:	f000 fb6f 	bl	80046c4 <_malloc_r>
 8003fe6:	4606      	mov	r6, r0
 8003fe8:	b950      	cbnz	r0, 8004000 <__ssputs_r+0x5c>
 8003fea:	230c      	movs	r3, #12
 8003fec:	f04f 30ff 	mov.w	r0, #4294967295
 8003ff0:	f8ca 3000 	str.w	r3, [sl]
 8003ff4:	89a3      	ldrh	r3, [r4, #12]
 8003ff6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003ffa:	81a3      	strh	r3, [r4, #12]
 8003ffc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004000:	464a      	mov	r2, r9
 8004002:	6921      	ldr	r1, [r4, #16]
 8004004:	f000 face 	bl	80045a4 <memcpy>
 8004008:	89a3      	ldrh	r3, [r4, #12]
 800400a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800400e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004012:	81a3      	strh	r3, [r4, #12]
 8004014:	6126      	str	r6, [r4, #16]
 8004016:	444e      	add	r6, r9
 8004018:	6026      	str	r6, [r4, #0]
 800401a:	463e      	mov	r6, r7
 800401c:	6165      	str	r5, [r4, #20]
 800401e:	eba5 0509 	sub.w	r5, r5, r9
 8004022:	60a5      	str	r5, [r4, #8]
 8004024:	42be      	cmp	r6, r7
 8004026:	d900      	bls.n	800402a <__ssputs_r+0x86>
 8004028:	463e      	mov	r6, r7
 800402a:	4632      	mov	r2, r6
 800402c:	4641      	mov	r1, r8
 800402e:	6820      	ldr	r0, [r4, #0]
 8004030:	f000 fac6 	bl	80045c0 <memmove>
 8004034:	68a3      	ldr	r3, [r4, #8]
 8004036:	2000      	movs	r0, #0
 8004038:	1b9b      	subs	r3, r3, r6
 800403a:	60a3      	str	r3, [r4, #8]
 800403c:	6823      	ldr	r3, [r4, #0]
 800403e:	4433      	add	r3, r6
 8004040:	6023      	str	r3, [r4, #0]
 8004042:	e7db      	b.n	8003ffc <__ssputs_r+0x58>
 8004044:	462a      	mov	r2, r5
 8004046:	f000 fbb1 	bl	80047ac <_realloc_r>
 800404a:	4606      	mov	r6, r0
 800404c:	2800      	cmp	r0, #0
 800404e:	d1e1      	bne.n	8004014 <__ssputs_r+0x70>
 8004050:	4650      	mov	r0, sl
 8004052:	6921      	ldr	r1, [r4, #16]
 8004054:	f000 face 	bl	80045f4 <_free_r>
 8004058:	e7c7      	b.n	8003fea <__ssputs_r+0x46>
	...

0800405c <_svfiprintf_r>:
 800405c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004060:	4698      	mov	r8, r3
 8004062:	898b      	ldrh	r3, [r1, #12]
 8004064:	4607      	mov	r7, r0
 8004066:	061b      	lsls	r3, r3, #24
 8004068:	460d      	mov	r5, r1
 800406a:	4614      	mov	r4, r2
 800406c:	b09d      	sub	sp, #116	; 0x74
 800406e:	d50e      	bpl.n	800408e <_svfiprintf_r+0x32>
 8004070:	690b      	ldr	r3, [r1, #16]
 8004072:	b963      	cbnz	r3, 800408e <_svfiprintf_r+0x32>
 8004074:	2140      	movs	r1, #64	; 0x40
 8004076:	f000 fb25 	bl	80046c4 <_malloc_r>
 800407a:	6028      	str	r0, [r5, #0]
 800407c:	6128      	str	r0, [r5, #16]
 800407e:	b920      	cbnz	r0, 800408a <_svfiprintf_r+0x2e>
 8004080:	230c      	movs	r3, #12
 8004082:	603b      	str	r3, [r7, #0]
 8004084:	f04f 30ff 	mov.w	r0, #4294967295
 8004088:	e0d1      	b.n	800422e <_svfiprintf_r+0x1d2>
 800408a:	2340      	movs	r3, #64	; 0x40
 800408c:	616b      	str	r3, [r5, #20]
 800408e:	2300      	movs	r3, #0
 8004090:	9309      	str	r3, [sp, #36]	; 0x24
 8004092:	2320      	movs	r3, #32
 8004094:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004098:	2330      	movs	r3, #48	; 0x30
 800409a:	f04f 0901 	mov.w	r9, #1
 800409e:	f8cd 800c 	str.w	r8, [sp, #12]
 80040a2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004248 <_svfiprintf_r+0x1ec>
 80040a6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80040aa:	4623      	mov	r3, r4
 80040ac:	469a      	mov	sl, r3
 80040ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 80040b2:	b10a      	cbz	r2, 80040b8 <_svfiprintf_r+0x5c>
 80040b4:	2a25      	cmp	r2, #37	; 0x25
 80040b6:	d1f9      	bne.n	80040ac <_svfiprintf_r+0x50>
 80040b8:	ebba 0b04 	subs.w	fp, sl, r4
 80040bc:	d00b      	beq.n	80040d6 <_svfiprintf_r+0x7a>
 80040be:	465b      	mov	r3, fp
 80040c0:	4622      	mov	r2, r4
 80040c2:	4629      	mov	r1, r5
 80040c4:	4638      	mov	r0, r7
 80040c6:	f7ff ff6d 	bl	8003fa4 <__ssputs_r>
 80040ca:	3001      	adds	r0, #1
 80040cc:	f000 80aa 	beq.w	8004224 <_svfiprintf_r+0x1c8>
 80040d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80040d2:	445a      	add	r2, fp
 80040d4:	9209      	str	r2, [sp, #36]	; 0x24
 80040d6:	f89a 3000 	ldrb.w	r3, [sl]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	f000 80a2 	beq.w	8004224 <_svfiprintf_r+0x1c8>
 80040e0:	2300      	movs	r3, #0
 80040e2:	f04f 32ff 	mov.w	r2, #4294967295
 80040e6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80040ea:	f10a 0a01 	add.w	sl, sl, #1
 80040ee:	9304      	str	r3, [sp, #16]
 80040f0:	9307      	str	r3, [sp, #28]
 80040f2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80040f6:	931a      	str	r3, [sp, #104]	; 0x68
 80040f8:	4654      	mov	r4, sl
 80040fa:	2205      	movs	r2, #5
 80040fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004100:	4851      	ldr	r0, [pc, #324]	; (8004248 <_svfiprintf_r+0x1ec>)
 8004102:	f000 fa41 	bl	8004588 <memchr>
 8004106:	9a04      	ldr	r2, [sp, #16]
 8004108:	b9d8      	cbnz	r0, 8004142 <_svfiprintf_r+0xe6>
 800410a:	06d0      	lsls	r0, r2, #27
 800410c:	bf44      	itt	mi
 800410e:	2320      	movmi	r3, #32
 8004110:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004114:	0711      	lsls	r1, r2, #28
 8004116:	bf44      	itt	mi
 8004118:	232b      	movmi	r3, #43	; 0x2b
 800411a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800411e:	f89a 3000 	ldrb.w	r3, [sl]
 8004122:	2b2a      	cmp	r3, #42	; 0x2a
 8004124:	d015      	beq.n	8004152 <_svfiprintf_r+0xf6>
 8004126:	4654      	mov	r4, sl
 8004128:	2000      	movs	r0, #0
 800412a:	f04f 0c0a 	mov.w	ip, #10
 800412e:	9a07      	ldr	r2, [sp, #28]
 8004130:	4621      	mov	r1, r4
 8004132:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004136:	3b30      	subs	r3, #48	; 0x30
 8004138:	2b09      	cmp	r3, #9
 800413a:	d94e      	bls.n	80041da <_svfiprintf_r+0x17e>
 800413c:	b1b0      	cbz	r0, 800416c <_svfiprintf_r+0x110>
 800413e:	9207      	str	r2, [sp, #28]
 8004140:	e014      	b.n	800416c <_svfiprintf_r+0x110>
 8004142:	eba0 0308 	sub.w	r3, r0, r8
 8004146:	fa09 f303 	lsl.w	r3, r9, r3
 800414a:	4313      	orrs	r3, r2
 800414c:	46a2      	mov	sl, r4
 800414e:	9304      	str	r3, [sp, #16]
 8004150:	e7d2      	b.n	80040f8 <_svfiprintf_r+0x9c>
 8004152:	9b03      	ldr	r3, [sp, #12]
 8004154:	1d19      	adds	r1, r3, #4
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	9103      	str	r1, [sp, #12]
 800415a:	2b00      	cmp	r3, #0
 800415c:	bfbb      	ittet	lt
 800415e:	425b      	neglt	r3, r3
 8004160:	f042 0202 	orrlt.w	r2, r2, #2
 8004164:	9307      	strge	r3, [sp, #28]
 8004166:	9307      	strlt	r3, [sp, #28]
 8004168:	bfb8      	it	lt
 800416a:	9204      	strlt	r2, [sp, #16]
 800416c:	7823      	ldrb	r3, [r4, #0]
 800416e:	2b2e      	cmp	r3, #46	; 0x2e
 8004170:	d10c      	bne.n	800418c <_svfiprintf_r+0x130>
 8004172:	7863      	ldrb	r3, [r4, #1]
 8004174:	2b2a      	cmp	r3, #42	; 0x2a
 8004176:	d135      	bne.n	80041e4 <_svfiprintf_r+0x188>
 8004178:	9b03      	ldr	r3, [sp, #12]
 800417a:	3402      	adds	r4, #2
 800417c:	1d1a      	adds	r2, r3, #4
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	9203      	str	r2, [sp, #12]
 8004182:	2b00      	cmp	r3, #0
 8004184:	bfb8      	it	lt
 8004186:	f04f 33ff 	movlt.w	r3, #4294967295
 800418a:	9305      	str	r3, [sp, #20]
 800418c:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800424c <_svfiprintf_r+0x1f0>
 8004190:	2203      	movs	r2, #3
 8004192:	4650      	mov	r0, sl
 8004194:	7821      	ldrb	r1, [r4, #0]
 8004196:	f000 f9f7 	bl	8004588 <memchr>
 800419a:	b140      	cbz	r0, 80041ae <_svfiprintf_r+0x152>
 800419c:	2340      	movs	r3, #64	; 0x40
 800419e:	eba0 000a 	sub.w	r0, r0, sl
 80041a2:	fa03 f000 	lsl.w	r0, r3, r0
 80041a6:	9b04      	ldr	r3, [sp, #16]
 80041a8:	3401      	adds	r4, #1
 80041aa:	4303      	orrs	r3, r0
 80041ac:	9304      	str	r3, [sp, #16]
 80041ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80041b2:	2206      	movs	r2, #6
 80041b4:	4826      	ldr	r0, [pc, #152]	; (8004250 <_svfiprintf_r+0x1f4>)
 80041b6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80041ba:	f000 f9e5 	bl	8004588 <memchr>
 80041be:	2800      	cmp	r0, #0
 80041c0:	d038      	beq.n	8004234 <_svfiprintf_r+0x1d8>
 80041c2:	4b24      	ldr	r3, [pc, #144]	; (8004254 <_svfiprintf_r+0x1f8>)
 80041c4:	bb1b      	cbnz	r3, 800420e <_svfiprintf_r+0x1b2>
 80041c6:	9b03      	ldr	r3, [sp, #12]
 80041c8:	3307      	adds	r3, #7
 80041ca:	f023 0307 	bic.w	r3, r3, #7
 80041ce:	3308      	adds	r3, #8
 80041d0:	9303      	str	r3, [sp, #12]
 80041d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80041d4:	4433      	add	r3, r6
 80041d6:	9309      	str	r3, [sp, #36]	; 0x24
 80041d8:	e767      	b.n	80040aa <_svfiprintf_r+0x4e>
 80041da:	460c      	mov	r4, r1
 80041dc:	2001      	movs	r0, #1
 80041de:	fb0c 3202 	mla	r2, ip, r2, r3
 80041e2:	e7a5      	b.n	8004130 <_svfiprintf_r+0xd4>
 80041e4:	2300      	movs	r3, #0
 80041e6:	f04f 0c0a 	mov.w	ip, #10
 80041ea:	4619      	mov	r1, r3
 80041ec:	3401      	adds	r4, #1
 80041ee:	9305      	str	r3, [sp, #20]
 80041f0:	4620      	mov	r0, r4
 80041f2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80041f6:	3a30      	subs	r2, #48	; 0x30
 80041f8:	2a09      	cmp	r2, #9
 80041fa:	d903      	bls.n	8004204 <_svfiprintf_r+0x1a8>
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d0c5      	beq.n	800418c <_svfiprintf_r+0x130>
 8004200:	9105      	str	r1, [sp, #20]
 8004202:	e7c3      	b.n	800418c <_svfiprintf_r+0x130>
 8004204:	4604      	mov	r4, r0
 8004206:	2301      	movs	r3, #1
 8004208:	fb0c 2101 	mla	r1, ip, r1, r2
 800420c:	e7f0      	b.n	80041f0 <_svfiprintf_r+0x194>
 800420e:	ab03      	add	r3, sp, #12
 8004210:	9300      	str	r3, [sp, #0]
 8004212:	462a      	mov	r2, r5
 8004214:	4638      	mov	r0, r7
 8004216:	4b10      	ldr	r3, [pc, #64]	; (8004258 <_svfiprintf_r+0x1fc>)
 8004218:	a904      	add	r1, sp, #16
 800421a:	f3af 8000 	nop.w
 800421e:	1c42      	adds	r2, r0, #1
 8004220:	4606      	mov	r6, r0
 8004222:	d1d6      	bne.n	80041d2 <_svfiprintf_r+0x176>
 8004224:	89ab      	ldrh	r3, [r5, #12]
 8004226:	065b      	lsls	r3, r3, #25
 8004228:	f53f af2c 	bmi.w	8004084 <_svfiprintf_r+0x28>
 800422c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800422e:	b01d      	add	sp, #116	; 0x74
 8004230:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004234:	ab03      	add	r3, sp, #12
 8004236:	9300      	str	r3, [sp, #0]
 8004238:	462a      	mov	r2, r5
 800423a:	4638      	mov	r0, r7
 800423c:	4b06      	ldr	r3, [pc, #24]	; (8004258 <_svfiprintf_r+0x1fc>)
 800423e:	a904      	add	r1, sp, #16
 8004240:	f000 f87c 	bl	800433c <_printf_i>
 8004244:	e7eb      	b.n	800421e <_svfiprintf_r+0x1c2>
 8004246:	bf00      	nop
 8004248:	080048a8 	.word	0x080048a8
 800424c:	080048ae 	.word	0x080048ae
 8004250:	080048b2 	.word	0x080048b2
 8004254:	00000000 	.word	0x00000000
 8004258:	08003fa5 	.word	0x08003fa5

0800425c <_printf_common>:
 800425c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004260:	4616      	mov	r6, r2
 8004262:	4699      	mov	r9, r3
 8004264:	688a      	ldr	r2, [r1, #8]
 8004266:	690b      	ldr	r3, [r1, #16]
 8004268:	4607      	mov	r7, r0
 800426a:	4293      	cmp	r3, r2
 800426c:	bfb8      	it	lt
 800426e:	4613      	movlt	r3, r2
 8004270:	6033      	str	r3, [r6, #0]
 8004272:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004276:	460c      	mov	r4, r1
 8004278:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800427c:	b10a      	cbz	r2, 8004282 <_printf_common+0x26>
 800427e:	3301      	adds	r3, #1
 8004280:	6033      	str	r3, [r6, #0]
 8004282:	6823      	ldr	r3, [r4, #0]
 8004284:	0699      	lsls	r1, r3, #26
 8004286:	bf42      	ittt	mi
 8004288:	6833      	ldrmi	r3, [r6, #0]
 800428a:	3302      	addmi	r3, #2
 800428c:	6033      	strmi	r3, [r6, #0]
 800428e:	6825      	ldr	r5, [r4, #0]
 8004290:	f015 0506 	ands.w	r5, r5, #6
 8004294:	d106      	bne.n	80042a4 <_printf_common+0x48>
 8004296:	f104 0a19 	add.w	sl, r4, #25
 800429a:	68e3      	ldr	r3, [r4, #12]
 800429c:	6832      	ldr	r2, [r6, #0]
 800429e:	1a9b      	subs	r3, r3, r2
 80042a0:	42ab      	cmp	r3, r5
 80042a2:	dc28      	bgt.n	80042f6 <_printf_common+0x9a>
 80042a4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80042a8:	1e13      	subs	r3, r2, #0
 80042aa:	6822      	ldr	r2, [r4, #0]
 80042ac:	bf18      	it	ne
 80042ae:	2301      	movne	r3, #1
 80042b0:	0692      	lsls	r2, r2, #26
 80042b2:	d42d      	bmi.n	8004310 <_printf_common+0xb4>
 80042b4:	4649      	mov	r1, r9
 80042b6:	4638      	mov	r0, r7
 80042b8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80042bc:	47c0      	blx	r8
 80042be:	3001      	adds	r0, #1
 80042c0:	d020      	beq.n	8004304 <_printf_common+0xa8>
 80042c2:	6823      	ldr	r3, [r4, #0]
 80042c4:	68e5      	ldr	r5, [r4, #12]
 80042c6:	f003 0306 	and.w	r3, r3, #6
 80042ca:	2b04      	cmp	r3, #4
 80042cc:	bf18      	it	ne
 80042ce:	2500      	movne	r5, #0
 80042d0:	6832      	ldr	r2, [r6, #0]
 80042d2:	f04f 0600 	mov.w	r6, #0
 80042d6:	68a3      	ldr	r3, [r4, #8]
 80042d8:	bf08      	it	eq
 80042da:	1aad      	subeq	r5, r5, r2
 80042dc:	6922      	ldr	r2, [r4, #16]
 80042de:	bf08      	it	eq
 80042e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80042e4:	4293      	cmp	r3, r2
 80042e6:	bfc4      	itt	gt
 80042e8:	1a9b      	subgt	r3, r3, r2
 80042ea:	18ed      	addgt	r5, r5, r3
 80042ec:	341a      	adds	r4, #26
 80042ee:	42b5      	cmp	r5, r6
 80042f0:	d11a      	bne.n	8004328 <_printf_common+0xcc>
 80042f2:	2000      	movs	r0, #0
 80042f4:	e008      	b.n	8004308 <_printf_common+0xac>
 80042f6:	2301      	movs	r3, #1
 80042f8:	4652      	mov	r2, sl
 80042fa:	4649      	mov	r1, r9
 80042fc:	4638      	mov	r0, r7
 80042fe:	47c0      	blx	r8
 8004300:	3001      	adds	r0, #1
 8004302:	d103      	bne.n	800430c <_printf_common+0xb0>
 8004304:	f04f 30ff 	mov.w	r0, #4294967295
 8004308:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800430c:	3501      	adds	r5, #1
 800430e:	e7c4      	b.n	800429a <_printf_common+0x3e>
 8004310:	2030      	movs	r0, #48	; 0x30
 8004312:	18e1      	adds	r1, r4, r3
 8004314:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004318:	1c5a      	adds	r2, r3, #1
 800431a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800431e:	4422      	add	r2, r4
 8004320:	3302      	adds	r3, #2
 8004322:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004326:	e7c5      	b.n	80042b4 <_printf_common+0x58>
 8004328:	2301      	movs	r3, #1
 800432a:	4622      	mov	r2, r4
 800432c:	4649      	mov	r1, r9
 800432e:	4638      	mov	r0, r7
 8004330:	47c0      	blx	r8
 8004332:	3001      	adds	r0, #1
 8004334:	d0e6      	beq.n	8004304 <_printf_common+0xa8>
 8004336:	3601      	adds	r6, #1
 8004338:	e7d9      	b.n	80042ee <_printf_common+0x92>
	...

0800433c <_printf_i>:
 800433c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004340:	7e0f      	ldrb	r7, [r1, #24]
 8004342:	4691      	mov	r9, r2
 8004344:	2f78      	cmp	r7, #120	; 0x78
 8004346:	4680      	mov	r8, r0
 8004348:	460c      	mov	r4, r1
 800434a:	469a      	mov	sl, r3
 800434c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800434e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004352:	d807      	bhi.n	8004364 <_printf_i+0x28>
 8004354:	2f62      	cmp	r7, #98	; 0x62
 8004356:	d80a      	bhi.n	800436e <_printf_i+0x32>
 8004358:	2f00      	cmp	r7, #0
 800435a:	f000 80d9 	beq.w	8004510 <_printf_i+0x1d4>
 800435e:	2f58      	cmp	r7, #88	; 0x58
 8004360:	f000 80a4 	beq.w	80044ac <_printf_i+0x170>
 8004364:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004368:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800436c:	e03a      	b.n	80043e4 <_printf_i+0xa8>
 800436e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004372:	2b15      	cmp	r3, #21
 8004374:	d8f6      	bhi.n	8004364 <_printf_i+0x28>
 8004376:	a101      	add	r1, pc, #4	; (adr r1, 800437c <_printf_i+0x40>)
 8004378:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800437c:	080043d5 	.word	0x080043d5
 8004380:	080043e9 	.word	0x080043e9
 8004384:	08004365 	.word	0x08004365
 8004388:	08004365 	.word	0x08004365
 800438c:	08004365 	.word	0x08004365
 8004390:	08004365 	.word	0x08004365
 8004394:	080043e9 	.word	0x080043e9
 8004398:	08004365 	.word	0x08004365
 800439c:	08004365 	.word	0x08004365
 80043a0:	08004365 	.word	0x08004365
 80043a4:	08004365 	.word	0x08004365
 80043a8:	080044f7 	.word	0x080044f7
 80043ac:	08004419 	.word	0x08004419
 80043b0:	080044d9 	.word	0x080044d9
 80043b4:	08004365 	.word	0x08004365
 80043b8:	08004365 	.word	0x08004365
 80043bc:	08004519 	.word	0x08004519
 80043c0:	08004365 	.word	0x08004365
 80043c4:	08004419 	.word	0x08004419
 80043c8:	08004365 	.word	0x08004365
 80043cc:	08004365 	.word	0x08004365
 80043d0:	080044e1 	.word	0x080044e1
 80043d4:	682b      	ldr	r3, [r5, #0]
 80043d6:	1d1a      	adds	r2, r3, #4
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	602a      	str	r2, [r5, #0]
 80043dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80043e0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80043e4:	2301      	movs	r3, #1
 80043e6:	e0a4      	b.n	8004532 <_printf_i+0x1f6>
 80043e8:	6820      	ldr	r0, [r4, #0]
 80043ea:	6829      	ldr	r1, [r5, #0]
 80043ec:	0606      	lsls	r6, r0, #24
 80043ee:	f101 0304 	add.w	r3, r1, #4
 80043f2:	d50a      	bpl.n	800440a <_printf_i+0xce>
 80043f4:	680e      	ldr	r6, [r1, #0]
 80043f6:	602b      	str	r3, [r5, #0]
 80043f8:	2e00      	cmp	r6, #0
 80043fa:	da03      	bge.n	8004404 <_printf_i+0xc8>
 80043fc:	232d      	movs	r3, #45	; 0x2d
 80043fe:	4276      	negs	r6, r6
 8004400:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004404:	230a      	movs	r3, #10
 8004406:	485e      	ldr	r0, [pc, #376]	; (8004580 <_printf_i+0x244>)
 8004408:	e019      	b.n	800443e <_printf_i+0x102>
 800440a:	680e      	ldr	r6, [r1, #0]
 800440c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004410:	602b      	str	r3, [r5, #0]
 8004412:	bf18      	it	ne
 8004414:	b236      	sxthne	r6, r6
 8004416:	e7ef      	b.n	80043f8 <_printf_i+0xbc>
 8004418:	682b      	ldr	r3, [r5, #0]
 800441a:	6820      	ldr	r0, [r4, #0]
 800441c:	1d19      	adds	r1, r3, #4
 800441e:	6029      	str	r1, [r5, #0]
 8004420:	0601      	lsls	r1, r0, #24
 8004422:	d501      	bpl.n	8004428 <_printf_i+0xec>
 8004424:	681e      	ldr	r6, [r3, #0]
 8004426:	e002      	b.n	800442e <_printf_i+0xf2>
 8004428:	0646      	lsls	r6, r0, #25
 800442a:	d5fb      	bpl.n	8004424 <_printf_i+0xe8>
 800442c:	881e      	ldrh	r6, [r3, #0]
 800442e:	2f6f      	cmp	r7, #111	; 0x6f
 8004430:	bf0c      	ite	eq
 8004432:	2308      	moveq	r3, #8
 8004434:	230a      	movne	r3, #10
 8004436:	4852      	ldr	r0, [pc, #328]	; (8004580 <_printf_i+0x244>)
 8004438:	2100      	movs	r1, #0
 800443a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800443e:	6865      	ldr	r5, [r4, #4]
 8004440:	2d00      	cmp	r5, #0
 8004442:	bfa8      	it	ge
 8004444:	6821      	ldrge	r1, [r4, #0]
 8004446:	60a5      	str	r5, [r4, #8]
 8004448:	bfa4      	itt	ge
 800444a:	f021 0104 	bicge.w	r1, r1, #4
 800444e:	6021      	strge	r1, [r4, #0]
 8004450:	b90e      	cbnz	r6, 8004456 <_printf_i+0x11a>
 8004452:	2d00      	cmp	r5, #0
 8004454:	d04d      	beq.n	80044f2 <_printf_i+0x1b6>
 8004456:	4615      	mov	r5, r2
 8004458:	fbb6 f1f3 	udiv	r1, r6, r3
 800445c:	fb03 6711 	mls	r7, r3, r1, r6
 8004460:	5dc7      	ldrb	r7, [r0, r7]
 8004462:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004466:	4637      	mov	r7, r6
 8004468:	42bb      	cmp	r3, r7
 800446a:	460e      	mov	r6, r1
 800446c:	d9f4      	bls.n	8004458 <_printf_i+0x11c>
 800446e:	2b08      	cmp	r3, #8
 8004470:	d10b      	bne.n	800448a <_printf_i+0x14e>
 8004472:	6823      	ldr	r3, [r4, #0]
 8004474:	07de      	lsls	r6, r3, #31
 8004476:	d508      	bpl.n	800448a <_printf_i+0x14e>
 8004478:	6923      	ldr	r3, [r4, #16]
 800447a:	6861      	ldr	r1, [r4, #4]
 800447c:	4299      	cmp	r1, r3
 800447e:	bfde      	ittt	le
 8004480:	2330      	movle	r3, #48	; 0x30
 8004482:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004486:	f105 35ff 	addle.w	r5, r5, #4294967295
 800448a:	1b52      	subs	r2, r2, r5
 800448c:	6122      	str	r2, [r4, #16]
 800448e:	464b      	mov	r3, r9
 8004490:	4621      	mov	r1, r4
 8004492:	4640      	mov	r0, r8
 8004494:	f8cd a000 	str.w	sl, [sp]
 8004498:	aa03      	add	r2, sp, #12
 800449a:	f7ff fedf 	bl	800425c <_printf_common>
 800449e:	3001      	adds	r0, #1
 80044a0:	d14c      	bne.n	800453c <_printf_i+0x200>
 80044a2:	f04f 30ff 	mov.w	r0, #4294967295
 80044a6:	b004      	add	sp, #16
 80044a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80044ac:	4834      	ldr	r0, [pc, #208]	; (8004580 <_printf_i+0x244>)
 80044ae:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80044b2:	6829      	ldr	r1, [r5, #0]
 80044b4:	6823      	ldr	r3, [r4, #0]
 80044b6:	f851 6b04 	ldr.w	r6, [r1], #4
 80044ba:	6029      	str	r1, [r5, #0]
 80044bc:	061d      	lsls	r5, r3, #24
 80044be:	d514      	bpl.n	80044ea <_printf_i+0x1ae>
 80044c0:	07df      	lsls	r7, r3, #31
 80044c2:	bf44      	itt	mi
 80044c4:	f043 0320 	orrmi.w	r3, r3, #32
 80044c8:	6023      	strmi	r3, [r4, #0]
 80044ca:	b91e      	cbnz	r6, 80044d4 <_printf_i+0x198>
 80044cc:	6823      	ldr	r3, [r4, #0]
 80044ce:	f023 0320 	bic.w	r3, r3, #32
 80044d2:	6023      	str	r3, [r4, #0]
 80044d4:	2310      	movs	r3, #16
 80044d6:	e7af      	b.n	8004438 <_printf_i+0xfc>
 80044d8:	6823      	ldr	r3, [r4, #0]
 80044da:	f043 0320 	orr.w	r3, r3, #32
 80044de:	6023      	str	r3, [r4, #0]
 80044e0:	2378      	movs	r3, #120	; 0x78
 80044e2:	4828      	ldr	r0, [pc, #160]	; (8004584 <_printf_i+0x248>)
 80044e4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80044e8:	e7e3      	b.n	80044b2 <_printf_i+0x176>
 80044ea:	0659      	lsls	r1, r3, #25
 80044ec:	bf48      	it	mi
 80044ee:	b2b6      	uxthmi	r6, r6
 80044f0:	e7e6      	b.n	80044c0 <_printf_i+0x184>
 80044f2:	4615      	mov	r5, r2
 80044f4:	e7bb      	b.n	800446e <_printf_i+0x132>
 80044f6:	682b      	ldr	r3, [r5, #0]
 80044f8:	6826      	ldr	r6, [r4, #0]
 80044fa:	1d18      	adds	r0, r3, #4
 80044fc:	6961      	ldr	r1, [r4, #20]
 80044fe:	6028      	str	r0, [r5, #0]
 8004500:	0635      	lsls	r5, r6, #24
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	d501      	bpl.n	800450a <_printf_i+0x1ce>
 8004506:	6019      	str	r1, [r3, #0]
 8004508:	e002      	b.n	8004510 <_printf_i+0x1d4>
 800450a:	0670      	lsls	r0, r6, #25
 800450c:	d5fb      	bpl.n	8004506 <_printf_i+0x1ca>
 800450e:	8019      	strh	r1, [r3, #0]
 8004510:	2300      	movs	r3, #0
 8004512:	4615      	mov	r5, r2
 8004514:	6123      	str	r3, [r4, #16]
 8004516:	e7ba      	b.n	800448e <_printf_i+0x152>
 8004518:	682b      	ldr	r3, [r5, #0]
 800451a:	2100      	movs	r1, #0
 800451c:	1d1a      	adds	r2, r3, #4
 800451e:	602a      	str	r2, [r5, #0]
 8004520:	681d      	ldr	r5, [r3, #0]
 8004522:	6862      	ldr	r2, [r4, #4]
 8004524:	4628      	mov	r0, r5
 8004526:	f000 f82f 	bl	8004588 <memchr>
 800452a:	b108      	cbz	r0, 8004530 <_printf_i+0x1f4>
 800452c:	1b40      	subs	r0, r0, r5
 800452e:	6060      	str	r0, [r4, #4]
 8004530:	6863      	ldr	r3, [r4, #4]
 8004532:	6123      	str	r3, [r4, #16]
 8004534:	2300      	movs	r3, #0
 8004536:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800453a:	e7a8      	b.n	800448e <_printf_i+0x152>
 800453c:	462a      	mov	r2, r5
 800453e:	4649      	mov	r1, r9
 8004540:	4640      	mov	r0, r8
 8004542:	6923      	ldr	r3, [r4, #16]
 8004544:	47d0      	blx	sl
 8004546:	3001      	adds	r0, #1
 8004548:	d0ab      	beq.n	80044a2 <_printf_i+0x166>
 800454a:	6823      	ldr	r3, [r4, #0]
 800454c:	079b      	lsls	r3, r3, #30
 800454e:	d413      	bmi.n	8004578 <_printf_i+0x23c>
 8004550:	68e0      	ldr	r0, [r4, #12]
 8004552:	9b03      	ldr	r3, [sp, #12]
 8004554:	4298      	cmp	r0, r3
 8004556:	bfb8      	it	lt
 8004558:	4618      	movlt	r0, r3
 800455a:	e7a4      	b.n	80044a6 <_printf_i+0x16a>
 800455c:	2301      	movs	r3, #1
 800455e:	4632      	mov	r2, r6
 8004560:	4649      	mov	r1, r9
 8004562:	4640      	mov	r0, r8
 8004564:	47d0      	blx	sl
 8004566:	3001      	adds	r0, #1
 8004568:	d09b      	beq.n	80044a2 <_printf_i+0x166>
 800456a:	3501      	adds	r5, #1
 800456c:	68e3      	ldr	r3, [r4, #12]
 800456e:	9903      	ldr	r1, [sp, #12]
 8004570:	1a5b      	subs	r3, r3, r1
 8004572:	42ab      	cmp	r3, r5
 8004574:	dcf2      	bgt.n	800455c <_printf_i+0x220>
 8004576:	e7eb      	b.n	8004550 <_printf_i+0x214>
 8004578:	2500      	movs	r5, #0
 800457a:	f104 0619 	add.w	r6, r4, #25
 800457e:	e7f5      	b.n	800456c <_printf_i+0x230>
 8004580:	080048b9 	.word	0x080048b9
 8004584:	080048ca 	.word	0x080048ca

08004588 <memchr>:
 8004588:	4603      	mov	r3, r0
 800458a:	b510      	push	{r4, lr}
 800458c:	b2c9      	uxtb	r1, r1
 800458e:	4402      	add	r2, r0
 8004590:	4293      	cmp	r3, r2
 8004592:	4618      	mov	r0, r3
 8004594:	d101      	bne.n	800459a <memchr+0x12>
 8004596:	2000      	movs	r0, #0
 8004598:	e003      	b.n	80045a2 <memchr+0x1a>
 800459a:	7804      	ldrb	r4, [r0, #0]
 800459c:	3301      	adds	r3, #1
 800459e:	428c      	cmp	r4, r1
 80045a0:	d1f6      	bne.n	8004590 <memchr+0x8>
 80045a2:	bd10      	pop	{r4, pc}

080045a4 <memcpy>:
 80045a4:	440a      	add	r2, r1
 80045a6:	4291      	cmp	r1, r2
 80045a8:	f100 33ff 	add.w	r3, r0, #4294967295
 80045ac:	d100      	bne.n	80045b0 <memcpy+0xc>
 80045ae:	4770      	bx	lr
 80045b0:	b510      	push	{r4, lr}
 80045b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80045b6:	4291      	cmp	r1, r2
 80045b8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80045bc:	d1f9      	bne.n	80045b2 <memcpy+0xe>
 80045be:	bd10      	pop	{r4, pc}

080045c0 <memmove>:
 80045c0:	4288      	cmp	r0, r1
 80045c2:	b510      	push	{r4, lr}
 80045c4:	eb01 0402 	add.w	r4, r1, r2
 80045c8:	d902      	bls.n	80045d0 <memmove+0x10>
 80045ca:	4284      	cmp	r4, r0
 80045cc:	4623      	mov	r3, r4
 80045ce:	d807      	bhi.n	80045e0 <memmove+0x20>
 80045d0:	1e43      	subs	r3, r0, #1
 80045d2:	42a1      	cmp	r1, r4
 80045d4:	d008      	beq.n	80045e8 <memmove+0x28>
 80045d6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80045da:	f803 2f01 	strb.w	r2, [r3, #1]!
 80045de:	e7f8      	b.n	80045d2 <memmove+0x12>
 80045e0:	4601      	mov	r1, r0
 80045e2:	4402      	add	r2, r0
 80045e4:	428a      	cmp	r2, r1
 80045e6:	d100      	bne.n	80045ea <memmove+0x2a>
 80045e8:	bd10      	pop	{r4, pc}
 80045ea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80045ee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80045f2:	e7f7      	b.n	80045e4 <memmove+0x24>

080045f4 <_free_r>:
 80045f4:	b538      	push	{r3, r4, r5, lr}
 80045f6:	4605      	mov	r5, r0
 80045f8:	2900      	cmp	r1, #0
 80045fa:	d040      	beq.n	800467e <_free_r+0x8a>
 80045fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004600:	1f0c      	subs	r4, r1, #4
 8004602:	2b00      	cmp	r3, #0
 8004604:	bfb8      	it	lt
 8004606:	18e4      	addlt	r4, r4, r3
 8004608:	f000 f910 	bl	800482c <__malloc_lock>
 800460c:	4a1c      	ldr	r2, [pc, #112]	; (8004680 <_free_r+0x8c>)
 800460e:	6813      	ldr	r3, [r2, #0]
 8004610:	b933      	cbnz	r3, 8004620 <_free_r+0x2c>
 8004612:	6063      	str	r3, [r4, #4]
 8004614:	6014      	str	r4, [r2, #0]
 8004616:	4628      	mov	r0, r5
 8004618:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800461c:	f000 b90c 	b.w	8004838 <__malloc_unlock>
 8004620:	42a3      	cmp	r3, r4
 8004622:	d908      	bls.n	8004636 <_free_r+0x42>
 8004624:	6820      	ldr	r0, [r4, #0]
 8004626:	1821      	adds	r1, r4, r0
 8004628:	428b      	cmp	r3, r1
 800462a:	bf01      	itttt	eq
 800462c:	6819      	ldreq	r1, [r3, #0]
 800462e:	685b      	ldreq	r3, [r3, #4]
 8004630:	1809      	addeq	r1, r1, r0
 8004632:	6021      	streq	r1, [r4, #0]
 8004634:	e7ed      	b.n	8004612 <_free_r+0x1e>
 8004636:	461a      	mov	r2, r3
 8004638:	685b      	ldr	r3, [r3, #4]
 800463a:	b10b      	cbz	r3, 8004640 <_free_r+0x4c>
 800463c:	42a3      	cmp	r3, r4
 800463e:	d9fa      	bls.n	8004636 <_free_r+0x42>
 8004640:	6811      	ldr	r1, [r2, #0]
 8004642:	1850      	adds	r0, r2, r1
 8004644:	42a0      	cmp	r0, r4
 8004646:	d10b      	bne.n	8004660 <_free_r+0x6c>
 8004648:	6820      	ldr	r0, [r4, #0]
 800464a:	4401      	add	r1, r0
 800464c:	1850      	adds	r0, r2, r1
 800464e:	4283      	cmp	r3, r0
 8004650:	6011      	str	r1, [r2, #0]
 8004652:	d1e0      	bne.n	8004616 <_free_r+0x22>
 8004654:	6818      	ldr	r0, [r3, #0]
 8004656:	685b      	ldr	r3, [r3, #4]
 8004658:	4401      	add	r1, r0
 800465a:	6011      	str	r1, [r2, #0]
 800465c:	6053      	str	r3, [r2, #4]
 800465e:	e7da      	b.n	8004616 <_free_r+0x22>
 8004660:	d902      	bls.n	8004668 <_free_r+0x74>
 8004662:	230c      	movs	r3, #12
 8004664:	602b      	str	r3, [r5, #0]
 8004666:	e7d6      	b.n	8004616 <_free_r+0x22>
 8004668:	6820      	ldr	r0, [r4, #0]
 800466a:	1821      	adds	r1, r4, r0
 800466c:	428b      	cmp	r3, r1
 800466e:	bf01      	itttt	eq
 8004670:	6819      	ldreq	r1, [r3, #0]
 8004672:	685b      	ldreq	r3, [r3, #4]
 8004674:	1809      	addeq	r1, r1, r0
 8004676:	6021      	streq	r1, [r4, #0]
 8004678:	6063      	str	r3, [r4, #4]
 800467a:	6054      	str	r4, [r2, #4]
 800467c:	e7cb      	b.n	8004616 <_free_r+0x22>
 800467e:	bd38      	pop	{r3, r4, r5, pc}
 8004680:	200001cc 	.word	0x200001cc

08004684 <sbrk_aligned>:
 8004684:	b570      	push	{r4, r5, r6, lr}
 8004686:	4e0e      	ldr	r6, [pc, #56]	; (80046c0 <sbrk_aligned+0x3c>)
 8004688:	460c      	mov	r4, r1
 800468a:	6831      	ldr	r1, [r6, #0]
 800468c:	4605      	mov	r5, r0
 800468e:	b911      	cbnz	r1, 8004696 <sbrk_aligned+0x12>
 8004690:	f000 f8bc 	bl	800480c <_sbrk_r>
 8004694:	6030      	str	r0, [r6, #0]
 8004696:	4621      	mov	r1, r4
 8004698:	4628      	mov	r0, r5
 800469a:	f000 f8b7 	bl	800480c <_sbrk_r>
 800469e:	1c43      	adds	r3, r0, #1
 80046a0:	d00a      	beq.n	80046b8 <sbrk_aligned+0x34>
 80046a2:	1cc4      	adds	r4, r0, #3
 80046a4:	f024 0403 	bic.w	r4, r4, #3
 80046a8:	42a0      	cmp	r0, r4
 80046aa:	d007      	beq.n	80046bc <sbrk_aligned+0x38>
 80046ac:	1a21      	subs	r1, r4, r0
 80046ae:	4628      	mov	r0, r5
 80046b0:	f000 f8ac 	bl	800480c <_sbrk_r>
 80046b4:	3001      	adds	r0, #1
 80046b6:	d101      	bne.n	80046bc <sbrk_aligned+0x38>
 80046b8:	f04f 34ff 	mov.w	r4, #4294967295
 80046bc:	4620      	mov	r0, r4
 80046be:	bd70      	pop	{r4, r5, r6, pc}
 80046c0:	200001d0 	.word	0x200001d0

080046c4 <_malloc_r>:
 80046c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80046c8:	1ccd      	adds	r5, r1, #3
 80046ca:	f025 0503 	bic.w	r5, r5, #3
 80046ce:	3508      	adds	r5, #8
 80046d0:	2d0c      	cmp	r5, #12
 80046d2:	bf38      	it	cc
 80046d4:	250c      	movcc	r5, #12
 80046d6:	2d00      	cmp	r5, #0
 80046d8:	4607      	mov	r7, r0
 80046da:	db01      	blt.n	80046e0 <_malloc_r+0x1c>
 80046dc:	42a9      	cmp	r1, r5
 80046de:	d905      	bls.n	80046ec <_malloc_r+0x28>
 80046e0:	230c      	movs	r3, #12
 80046e2:	2600      	movs	r6, #0
 80046e4:	603b      	str	r3, [r7, #0]
 80046e6:	4630      	mov	r0, r6
 80046e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80046ec:	4e2e      	ldr	r6, [pc, #184]	; (80047a8 <_malloc_r+0xe4>)
 80046ee:	f000 f89d 	bl	800482c <__malloc_lock>
 80046f2:	6833      	ldr	r3, [r6, #0]
 80046f4:	461c      	mov	r4, r3
 80046f6:	bb34      	cbnz	r4, 8004746 <_malloc_r+0x82>
 80046f8:	4629      	mov	r1, r5
 80046fa:	4638      	mov	r0, r7
 80046fc:	f7ff ffc2 	bl	8004684 <sbrk_aligned>
 8004700:	1c43      	adds	r3, r0, #1
 8004702:	4604      	mov	r4, r0
 8004704:	d14d      	bne.n	80047a2 <_malloc_r+0xde>
 8004706:	6834      	ldr	r4, [r6, #0]
 8004708:	4626      	mov	r6, r4
 800470a:	2e00      	cmp	r6, #0
 800470c:	d140      	bne.n	8004790 <_malloc_r+0xcc>
 800470e:	6823      	ldr	r3, [r4, #0]
 8004710:	4631      	mov	r1, r6
 8004712:	4638      	mov	r0, r7
 8004714:	eb04 0803 	add.w	r8, r4, r3
 8004718:	f000 f878 	bl	800480c <_sbrk_r>
 800471c:	4580      	cmp	r8, r0
 800471e:	d13a      	bne.n	8004796 <_malloc_r+0xd2>
 8004720:	6821      	ldr	r1, [r4, #0]
 8004722:	3503      	adds	r5, #3
 8004724:	1a6d      	subs	r5, r5, r1
 8004726:	f025 0503 	bic.w	r5, r5, #3
 800472a:	3508      	adds	r5, #8
 800472c:	2d0c      	cmp	r5, #12
 800472e:	bf38      	it	cc
 8004730:	250c      	movcc	r5, #12
 8004732:	4638      	mov	r0, r7
 8004734:	4629      	mov	r1, r5
 8004736:	f7ff ffa5 	bl	8004684 <sbrk_aligned>
 800473a:	3001      	adds	r0, #1
 800473c:	d02b      	beq.n	8004796 <_malloc_r+0xd2>
 800473e:	6823      	ldr	r3, [r4, #0]
 8004740:	442b      	add	r3, r5
 8004742:	6023      	str	r3, [r4, #0]
 8004744:	e00e      	b.n	8004764 <_malloc_r+0xa0>
 8004746:	6822      	ldr	r2, [r4, #0]
 8004748:	1b52      	subs	r2, r2, r5
 800474a:	d41e      	bmi.n	800478a <_malloc_r+0xc6>
 800474c:	2a0b      	cmp	r2, #11
 800474e:	d916      	bls.n	800477e <_malloc_r+0xba>
 8004750:	1961      	adds	r1, r4, r5
 8004752:	42a3      	cmp	r3, r4
 8004754:	6025      	str	r5, [r4, #0]
 8004756:	bf18      	it	ne
 8004758:	6059      	strne	r1, [r3, #4]
 800475a:	6863      	ldr	r3, [r4, #4]
 800475c:	bf08      	it	eq
 800475e:	6031      	streq	r1, [r6, #0]
 8004760:	5162      	str	r2, [r4, r5]
 8004762:	604b      	str	r3, [r1, #4]
 8004764:	4638      	mov	r0, r7
 8004766:	f104 060b 	add.w	r6, r4, #11
 800476a:	f000 f865 	bl	8004838 <__malloc_unlock>
 800476e:	f026 0607 	bic.w	r6, r6, #7
 8004772:	1d23      	adds	r3, r4, #4
 8004774:	1af2      	subs	r2, r6, r3
 8004776:	d0b6      	beq.n	80046e6 <_malloc_r+0x22>
 8004778:	1b9b      	subs	r3, r3, r6
 800477a:	50a3      	str	r3, [r4, r2]
 800477c:	e7b3      	b.n	80046e6 <_malloc_r+0x22>
 800477e:	6862      	ldr	r2, [r4, #4]
 8004780:	42a3      	cmp	r3, r4
 8004782:	bf0c      	ite	eq
 8004784:	6032      	streq	r2, [r6, #0]
 8004786:	605a      	strne	r2, [r3, #4]
 8004788:	e7ec      	b.n	8004764 <_malloc_r+0xa0>
 800478a:	4623      	mov	r3, r4
 800478c:	6864      	ldr	r4, [r4, #4]
 800478e:	e7b2      	b.n	80046f6 <_malloc_r+0x32>
 8004790:	4634      	mov	r4, r6
 8004792:	6876      	ldr	r6, [r6, #4]
 8004794:	e7b9      	b.n	800470a <_malloc_r+0x46>
 8004796:	230c      	movs	r3, #12
 8004798:	4638      	mov	r0, r7
 800479a:	603b      	str	r3, [r7, #0]
 800479c:	f000 f84c 	bl	8004838 <__malloc_unlock>
 80047a0:	e7a1      	b.n	80046e6 <_malloc_r+0x22>
 80047a2:	6025      	str	r5, [r4, #0]
 80047a4:	e7de      	b.n	8004764 <_malloc_r+0xa0>
 80047a6:	bf00      	nop
 80047a8:	200001cc 	.word	0x200001cc

080047ac <_realloc_r>:
 80047ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80047b0:	4680      	mov	r8, r0
 80047b2:	4614      	mov	r4, r2
 80047b4:	460e      	mov	r6, r1
 80047b6:	b921      	cbnz	r1, 80047c2 <_realloc_r+0x16>
 80047b8:	4611      	mov	r1, r2
 80047ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80047be:	f7ff bf81 	b.w	80046c4 <_malloc_r>
 80047c2:	b92a      	cbnz	r2, 80047d0 <_realloc_r+0x24>
 80047c4:	f7ff ff16 	bl	80045f4 <_free_r>
 80047c8:	4625      	mov	r5, r4
 80047ca:	4628      	mov	r0, r5
 80047cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80047d0:	f000 f838 	bl	8004844 <_malloc_usable_size_r>
 80047d4:	4284      	cmp	r4, r0
 80047d6:	4607      	mov	r7, r0
 80047d8:	d802      	bhi.n	80047e0 <_realloc_r+0x34>
 80047da:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80047de:	d812      	bhi.n	8004806 <_realloc_r+0x5a>
 80047e0:	4621      	mov	r1, r4
 80047e2:	4640      	mov	r0, r8
 80047e4:	f7ff ff6e 	bl	80046c4 <_malloc_r>
 80047e8:	4605      	mov	r5, r0
 80047ea:	2800      	cmp	r0, #0
 80047ec:	d0ed      	beq.n	80047ca <_realloc_r+0x1e>
 80047ee:	42bc      	cmp	r4, r7
 80047f0:	4622      	mov	r2, r4
 80047f2:	4631      	mov	r1, r6
 80047f4:	bf28      	it	cs
 80047f6:	463a      	movcs	r2, r7
 80047f8:	f7ff fed4 	bl	80045a4 <memcpy>
 80047fc:	4631      	mov	r1, r6
 80047fe:	4640      	mov	r0, r8
 8004800:	f7ff fef8 	bl	80045f4 <_free_r>
 8004804:	e7e1      	b.n	80047ca <_realloc_r+0x1e>
 8004806:	4635      	mov	r5, r6
 8004808:	e7df      	b.n	80047ca <_realloc_r+0x1e>
	...

0800480c <_sbrk_r>:
 800480c:	b538      	push	{r3, r4, r5, lr}
 800480e:	2300      	movs	r3, #0
 8004810:	4d05      	ldr	r5, [pc, #20]	; (8004828 <_sbrk_r+0x1c>)
 8004812:	4604      	mov	r4, r0
 8004814:	4608      	mov	r0, r1
 8004816:	602b      	str	r3, [r5, #0]
 8004818:	f7fc fc9e 	bl	8001158 <_sbrk>
 800481c:	1c43      	adds	r3, r0, #1
 800481e:	d102      	bne.n	8004826 <_sbrk_r+0x1a>
 8004820:	682b      	ldr	r3, [r5, #0]
 8004822:	b103      	cbz	r3, 8004826 <_sbrk_r+0x1a>
 8004824:	6023      	str	r3, [r4, #0]
 8004826:	bd38      	pop	{r3, r4, r5, pc}
 8004828:	200001d4 	.word	0x200001d4

0800482c <__malloc_lock>:
 800482c:	4801      	ldr	r0, [pc, #4]	; (8004834 <__malloc_lock+0x8>)
 800482e:	f000 b811 	b.w	8004854 <__retarget_lock_acquire_recursive>
 8004832:	bf00      	nop
 8004834:	200001d8 	.word	0x200001d8

08004838 <__malloc_unlock>:
 8004838:	4801      	ldr	r0, [pc, #4]	; (8004840 <__malloc_unlock+0x8>)
 800483a:	f000 b80c 	b.w	8004856 <__retarget_lock_release_recursive>
 800483e:	bf00      	nop
 8004840:	200001d8 	.word	0x200001d8

08004844 <_malloc_usable_size_r>:
 8004844:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004848:	1f18      	subs	r0, r3, #4
 800484a:	2b00      	cmp	r3, #0
 800484c:	bfbc      	itt	lt
 800484e:	580b      	ldrlt	r3, [r1, r0]
 8004850:	18c0      	addlt	r0, r0, r3
 8004852:	4770      	bx	lr

08004854 <__retarget_lock_acquire_recursive>:
 8004854:	4770      	bx	lr

08004856 <__retarget_lock_release_recursive>:
 8004856:	4770      	bx	lr

08004858 <_init>:
 8004858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800485a:	bf00      	nop
 800485c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800485e:	bc08      	pop	{r3}
 8004860:	469e      	mov	lr, r3
 8004862:	4770      	bx	lr

08004864 <_fini>:
 8004864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004866:	bf00      	nop
 8004868:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800486a:	bc08      	pop	{r3}
 800486c:	469e      	mov	lr, r3
 800486e:	4770      	bx	lr
